ScrapedGitHubPage Data
======================
ID: 1
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: AttributeBase
Extracted Class Content:
public class MetadataAttributeBase : AttributeBase, IReflectAttributeFilter
{
    /// <summary>
    /// Don't include default bool or nullable int default values
    /// </summary>
    public virtual bool ShouldInclude(PropertyInfo pi, string value)
    {
        if (pi.PropertyType == typeof(int) && value == "-2147483648") //int.MinValue
            return false;
        if (pi.PropertyType == typeof(bool) && value == "false")
            return false;
        return true;
    }
}
--------------------------------------------------------------------------------
ID: 2
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: IQuery
Extracted Class Content:
/// <summary>
/// Change the default querying behaviour of filter properties in AutoQuery APIs
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
public class QueryDbAttribute : AttributeBase
{
    public QueryDbAttribute()
    {
    }

    public QueryDbAttribute(QueryTerm defaultTerm)
    {
        DefaultTerm = defaultTerm;
    }

    public QueryTerm DefaultTerm { get; set; }
}
--------------------------------------------------------------------------------
ID: 3
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ScriptValue
Extracted Class Content:
public abstract class ScriptValueAttribute : AttributeBase, IScriptValue
{
    public object Value { get; set; }
    public string Expression { get; set; }
    public string Eval { get; set; }
    public bool NoCache { get; set; }
}
--------------------------------------------------------------------------------
ID: 4
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ApiResponse
Extracted Class Content:
/// <summary>
/// Document potential API Responses this API could return
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = true)]
public class ApiResponseAttribute : AttributeBase, IApiResponseDescription
{
    /// <summary>
    /// HTTP status code of response
    /// </summary>
    public int StatusCode { get; set; }
    /// <summary>
    /// End-user description of the data which is returned by response
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// If set to true, the response is default for all non-explicitly defined status codes 
    /// </summary>
    public bool IsDefaultResponse { get; set; }
    /// <summary>
    /// Open API schema definition type for response
    /// </summary>
    public Type ResponseType { get; set; }

    public ApiResponseAttribute()
    {
    }

    public ApiResponseAttribute(HttpStatusCode statusCode, string description)
    {
        StatusCode = (int)statusCode;
        Description = description;
    }

    public ApiResponseAttribute(int statusCode, string description)
    {
        StatusCode = statusCode;
        Description = description;
    }
}
--------------------------------------------------------------------------------
ID: 5
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: StyleAttributes
Extracted Class Content:
/// <summary>
/// Customize the Form and Field CSS in API Explorer Forms
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
public class ExplorerCssAttribute : AttributeBase
{
    public string? Form { get; set; }
    public string? Fieldset { get; set; }
    public string? Field { get; set; }
}
--------------------------------------------------------------------------------
ID: 6
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: MetaAttribute
Extracted Class Content:
/// <summary>
/// Decorate any type or property with custom metadata
/// </summary>
public class MetaAttribute : AttributeBase
{
    public string Name { get; set; }
    public string Value { get; set; }

    public MetaAttribute(string name, string value)
    {
        Name = name;
        Value = value;
    }
}
--------------------------------------------------------------------------------
ID: 7
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: UniqueIdAttribute
Extracted Class Content:
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method)]
public class UniqueIdAttribute : AttributeBase
{
    public int Id { get; }

    public UniqueIdAttribute(int id) => Id = id;
}
--------------------------------------------------------------------------------
ID: 8
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: PostCreateTableAttribute
Extracted Class Content:
/// <summary>
/// Run Custom SQL immediately after RDBMS table is created
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
public class PostCreateTableAttribute : AttributeBase
{
    public string Sql { get; set; }

    public PostCreateTableAttribute(string sql)
    {
        Sql = sql;
    }
}
--------------------------------------------------------------------------------
ID: 9
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: EnumAsCharAttribute
Extracted Class Content:
/// <summary>
/// Save Enum value as single char in RDBMS column
/// </summary>
[AttributeUsage(AttributeTargets.Enum)]
public class EnumAsCharAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 10
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: EnableCorsAttribute
Extracted Class Content:
/// <summary>
/// Attribute marks that specific response class has support for Cross-origin resource sharing (CORS, see http://www.w3.org/TR/access-control/). CORS allows to access resources from different domain which usually forbidden by origin policy. 
/// </summary>
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false, Inherited = false)]
public class EnableCorsAttribute : AttributeBase, IHasRequestFilterAsync
{
    public int Priority { get; set; } = 0;
    public bool AutoHandleOptionRequests { get; set; }

    private readonly string allowedOrigins;
    private readonly string allowedMethods;
    private readonly string allowedHeaders;
    private readonly bool allowCredentials;
    /// <summary>
    /// Represents a default constructor with Allow Origin equals to "*", Allowed GET, POST, PUT, DELETE, OPTIONS request and allowed "Content-Type" header.
    /// </summary>
    public EnableCorsAttribute(string allowedOrigins = "*", string allowedMethods = CorsFeature.DefaultMethods, string allowedHeaders = CorsFeature.DefaultHeaders, bool allowCredentials = false)
    {
        this.allowedOrigins = allowedOrigins;
        this.allowedMethods = allowedMethods;
        this.allowedHeaders = allowedHeaders;
        this.allowCredentials = allowCredentials;
        this.AutoHandleOptionRequests = true;
    }

    public Task RequestFilterAsync(IRequest req, IResponse res, object requestDto)
    {
        if (!string.IsNullOrEmpty(allowedOrigins))
            res.AddHeader(HttpHeaders.AllowOrigin, allowedOrigins);
        if (!string.IsNullOrEmpty(allowedMethods))
            res.AddHeader(HttpHeaders.AllowMethods, allowedMethods);
        if (!string.IsNullOrEmpty(allowedHeaders))
            res.AddHeader(HttpHeaders.AllowHeaders, allowedHeaders);
        if (allowCredentials)
            res.AddHeader(HttpHeaders.AllowCredentials, "true");
        if (AutoHandleOptionRequests && req.Verb == HttpMethods.Options)
            res.EndRequest();
        return TypeConstants.EmptyTask;
    }

    public IRequestFilterBase Copy() => (IRequestFilterBase)MemberwiseClone();
}
--------------------------------------------------------------------------------
ID: 11
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: PostDropTableAttribute
Extracted Class Content:
/// <summary>
/// Run Custom SQL immediately after RDBMS table is dropped
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
public class PostDropTableAttribute : AttributeBase
{
    public string Sql { get; set; }

    public PostDropTableAttribute(string sql)
    {
        Sql = sql;
    }
}
--------------------------------------------------------------------------------
ID: 12
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: SequenceAttribute
Extracted Class Content:
/// <summary>
/// Use in FirebirdSql. indicates name of generator for columns of type AutoIncrement
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class SequenceAttribute : AttributeBase
{
    public string Name { get; set; }

    public SequenceAttribute(string name)
    {
        this.Name = name;
    }
}
--------------------------------------------------------------------------------
ID: 13
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: DefaultAttribute
Extracted Class Content:
/// <summary>
/// Create RDBMS Column definition with specified default value
/// </summary>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
public class DefaultAttribute : AttributeBase
{
    public int IntValue { get; set; }
    public double DoubleValue { get; set; }
    public Type DefaultType { get; set; }
    public string DefaultValue { get; set; }
    public string WithConstraint { get; set; }
    public bool OnUpdate { get; set; }

    public DefaultAttribute(int intValue)
    {
        this.IntValue = intValue;
        this.DefaultType = typeof(int);
        this.DefaultValue = this.IntValue.ToString();
    }

    public DefaultAttribute(double doubleValue)
    {
        this.DoubleValue = doubleValue;
        this.DefaultType = typeof(double);
        this.DefaultValue = doubleValue.ToString();
    }

    public DefaultAttribute(string defaultValue)
    {
        this.DefaultType = typeof(string);
        this.DefaultValue = defaultValue;
    }

    public DefaultAttribute(Type defaultType, string defaultValue)
    {
        this.DefaultValue = defaultValue;
        this.DefaultType = defaultType;
    }
}
--------------------------------------------------------------------------------
ID: 14
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: AutoIncrementAttribute
Extracted Class Content:
/// <summary>
/// Auto populate Primary Key Property with an RDBMS generated Auto Incrementing serial Integer
/// </summary>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
public class AutoIncrementAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 15
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ApiAllowableValuesAttribute
Extracted Class Content:
/// <summary>
/// Document the allowable values for an API Property
/// </summary>
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
public class ApiAllowableValuesAttribute : AttributeBase
{
    public ApiAllowableValuesAttribute()
    {
    }

    public ApiAllowableValuesAttribute(string name) => Name = name;
    public ApiAllowableValuesAttribute(string name, int min, int max) : this(name)
    {
        Type = "RANGE";
        Min = min;
        Max = max;
    }

    public ApiAllowableValuesAttribute(int min, int max) : this(null, min, max)
    {
    }

    public ApiAllowableValuesAttribute(string name, params string[] values) : this(name)
    {
        Type = "LIST";
        Values = values;
    }

    public ApiAllowableValuesAttribute(string[] values) : this(null, values)
    {
    }

    public ApiAllowableValuesAttribute(string name, Type enumType) : this(name)
    {
        if (enumType.IsEnum)
        {
            Type = "LIST";
            Values = Enum.GetNames(enumType);
        }
    }

    public ApiAllowableValuesAttribute(Type enumType) : this(null, enumType)
    {
    }

    public ApiAllowableValuesAttribute(string name, Func<string[]> listAction) : this(name)
    {
        if (listAction != null)
        {
            Type = "LIST";
            Values = listAction();
        }
    }

    public ApiAllowableValuesAttribute(Func<string[]> listAction) : this(null, listAction)
    {
    }

    /// <summary>
    /// Gets or sets parameter name with which allowable values will be associated.
    /// </summary>
    public string Name { get; set; }
    public string Type { get; set; }
    public int? Min { get; set; }
    public int? Max { get; set; }
    public string[] Values { get; set; }
//TODO: should be implemented according to:
//https://github.com/wordnik/swagger-core/wiki/datatypes
}
--------------------------------------------------------------------------------
ID: 16
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: RequestFilterAttribute
Extracted Class Content:
/// <summary>
/// Base class to create request filter attributes only for specific HTTP methods (GET, POST...)
/// </summary>
public abstract class RequestFilterAttribute : AttributeBase, IHasRequestFilter
{
    public int Priority { get; set; }
    public ApplyTo ApplyTo { get; set; }

    public RequestFilterAttribute() : this(ApplyTo.All)
    {
    }

    /// <summary>
    /// Creates a new <see cref = "RequestFilterAttribute"/>
    /// </summary>
    /// <param name = "applyTo">Defines when the filter should be executed</param>
    public RequestFilterAttribute(ApplyTo applyTo) => ApplyTo = applyTo;
    public void RequestFilter(IRequest req, IResponse res, object requestDto)
    {
        ApplyTo httpMethod = req.HttpMethodAsApplyTo();
        if (ApplyTo.Has(httpMethod))
            this.Execute(req, res, requestDto);
    }

    /// <summary>
    /// This method is only executed if the HTTP method matches the <see cref = "ApplyTo"/> property.
    /// </summary>
    /// <param name = "req">The http request wrapper</param>
    /// <param name = "res">The http response wrapper</param>
    /// <param name = "requestDto">The request DTO</param>
    public abstract void Execute(IRequest req, IResponse res, object requestDto);
    /// <summary>
    /// Create a ShallowCopy of this instance.
    /// </summary>
    /// <returns></returns>
    public virtual IRequestFilterBase Copy() => (IRequestFilterBase)MemberwiseClone();
}
--------------------------------------------------------------------------------
ID: 17
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: SqlServerMemoryOptimizedAttribute
Extracted Class Content:
// https://msdn.microsoft.com/en-us/library/dn553122.aspx
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
public class SqlServerMemoryOptimizedAttribute : AttributeBase
{
    public SqlServerMemoryOptimizedAttribute()
    {
    }

    public SqlServerMemoryOptimizedAttribute(SqlServerDurability durability)
    {
        Durability = durability;
    }

    public SqlServerDurability? Durability { get; set; }
}
--------------------------------------------------------------------------------
ID: 18
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: WorkerAttribute
Extracted Class Content:
/// <summary>
/// Execute AutoQuery Create/Update/Delete Request DTO in a background thread
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
public class WorkerAttribute : AttributeBase
{
    public string Name { get; set; }

    public WorkerAttribute(string name) => Name = name;
}
--------------------------------------------------------------------------------
ID: 19
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: MapColumnAttribute
Extracted Class Content:
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
public class MapColumnAttribute : AttributeBase
{
    public string Table { get; set; }
    public string Column { get; set; }

    public MapColumnAttribute(string table, string column)
    {
        Table = table ?? throw new ArgumentNullException(nameof(table));
        Column = column ?? throw new ArgumentNullException(nameof(column));
    }
}
--------------------------------------------------------------------------------
ID: 20
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: SqlServerCollateAttribute
Extracted Class Content:
// https://msdn.microsoft.com/en-us/library/ms184391.aspx
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
public class SqlServerCollateAttribute : AttributeBase
{
    public SqlServerCollateAttribute(string collation)
    {
        Collation = collation;
    }

    public string Collation { get; set; }
}
--------------------------------------------------------------------------------
ID: 21
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ReferenceAttribute
Extracted Class Content:
/// <summary>
/// Define this property as containing a POCO Complex Type Reference
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class ReferenceAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 22
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: SqlServerFileTableAttribute
Extracted Class Content:
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
public class SqlServerFileTableAttribute : AttributeBase
{
    public SqlServerFileTableAttribute()
    {
    }

    public SqlServerFileTableAttribute(string directory, string collateFileName = null)
    {
        FileTableDirectory = directory;
        FileTableCollateFileName = collateFileName;
    }

    public string FileTableDirectory { get; internal set; }
    public string FileTableCollateFileName { get; internal set; }
}
--------------------------------------------------------------------------------
ID: 23
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ApiMemberAttribute
Extracted Class Content:
/// <summary>
/// Document a short description for an API Property
/// </summary>
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
public class ApiMemberAttribute : AttributeBase
{
    /// <summary>
    /// Gets or sets verb to which applies attribute. By default applies to all verbs.
    /// </summary>
    public string Verb { get; set; }
    /// <summary>
    /// Gets or sets parameter type: It can be only one of the following: path, query, body, form, or header.
    /// </summary>
    public string ParameterType { get; set; }
    /// <summary>
    /// Gets or sets unique name for the parameter. Each name must be unique, even if they are associated with different paramType values. 
    /// </summary>
    /// <remarks>
    /// <para>
    /// Other notes on the name field:
    /// If paramType is body, the name is used only for UI and code generation.
    /// If paramType is path, the name field must correspond to the associated path segment from the path field in the api object.
    /// If paramType is query, the name field corresponds to the query param name.
    /// </para>
    /// </remarks>
    public string Name { get; set; }
    /// <summary>
    /// Gets or sets the human-readable description for the parameter.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// For path, query, and header paramTypes, this field must be a primitive. For body, this can be a complex or container datatype.
    /// </summary>
    public string DataType { get; set; }
    /// <summary>
    /// Fine-tuned primitive type definition.  
    /// </summary>
    public string Format { get; set; }
    /// <summary>
    /// For path, this is always true. Otherwise, this field tells the client whether or not the field must be supplied.
    /// </summary>
    public bool IsRequired { get; set; }
    /// <summary>
    /// Explicitly declare a property to be optional
    /// </summary>
    public bool IsOptional { get; set; } // workaround as bool? not allowed in attributes
    /// <summary>
    /// For query params, this specifies that a comma-separated list of values can be passed to the API. For path and body types, this field cannot be true.
    /// </summary>
    public bool AllowMultiple { get; set; }
    /// <summary>
    /// Gets or sets route to which applies attribute, matches using StartsWith. By default applies to all routes. 
    /// </summary>
    public string Route { get; set; }
    /// <summary>
    /// Whether to exclude this property from being included in the ModelSchema
    /// </summary>
    public bool ExcludeInSchema { get; set; }
}
--------------------------------------------------------------------------------
ID: 24
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ICommandAsync
Extracted Class Content:
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
public class CommandAttribute(Type commandType) : AttributeBase
{
    public Type CommandType { get; } = commandType;
}
--------------------------------------------------------------------------------
ID: 25
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: UploadToAttribute
Extracted Class Content:
/// <summary>
/// Specify which File Upload location should be used to manage these file uploads
/// </summary>
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
public class UploadToAttribute : AttributeBase
{
    public string Location { get; set; }

    public UploadToAttribute(string location) => Location = location;
}
--------------------------------------------------------------------------------
ID: 26
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: PrimaryKeyAttribute
Extracted Class Content:
/// <summary>
/// Treat this property is the Primary Key of the table
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class PrimaryKeyAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 27
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: PreCreateTableAttribute
Extracted Class Content:
/// <summary>
/// Run Custom SQL immediately before RDBMS table is created
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
public class PreCreateTableAttribute : AttributeBase
{
    public string Sql { get; set; }

    public PreCreateTableAttribute(string sql)
    {
        Sql = sql;
    }
}
--------------------------------------------------------------------------------
ID: 28
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ExcludeAttribute
Extracted Class Content:
/// <summary>
/// Mark types that are to be excluded from metadata & specified endpoints
/// </summary>
[AttributeUsage(AttributeTargets.Class)]
public class ExcludeAttribute(Feature feature) : AttributeBase
{
    public Feature Feature { get; set; } = feature;
}
--------------------------------------------------------------------------------
ID: 29
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: RangeKeyAttribute
Extracted Class Content:
/// <summary>
/// Range Key Attribute used to specify which property is the RangeKey, e.g. in DynamoDb.
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class RangeKeyAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 30
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: SchemaAttribute
Extracted Class Content:
/// <summary>
/// Define which RDBMS Schema Data Model belongs to
/// </summary>
[AttributeUsage(AttributeTargets.Class)]
public class SchemaAttribute : AttributeBase
{
    public SchemaAttribute(string name)
    {
        this.Name = name;
    }

    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 31
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: IdAttribute
Extracted Class Content:
/// <summary>
/// Uniquely identify C# Types and properties with a unique integer in gRPC Services
/// </summary>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method)]
public class IdAttribute : AttributeBase
{
    public int Id { get; }

    public IdAttribute(int id) => Id = id;
}
--------------------------------------------------------------------------------
ID: 32
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: UniqueAttribute
Extracted Class Content:
/// <summary>
/// Define a unique RDBMS column constraint
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class UniqueAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 33
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: CompositeKeyAttribute
Extracted Class Content:
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false)]
public class CompositeKeyAttribute : AttributeBase
{
    public CompositeKeyAttribute()
    {
        this.FieldNames = new List<string>();
    }

    public CompositeKeyAttribute(params string[] fieldNames)
    {
        this.FieldNames = new List<string>(fieldNames);
    }

    public List<string> FieldNames { get; set; }
}
--------------------------------------------------------------------------------
ID: 34
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: CompositeIndexAttribute
Extracted Class Content:
/// <summary>
/// Create an Composite RDBMS Index and optional Unique constraint
/// </summary>
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)]
public class CompositeIndexAttribute : AttributeBase
{
    public CompositeIndexAttribute()
    {
        this.FieldNames = new List<string>();
    }

    public CompositeIndexAttribute(params string[] fieldNames)
    {
        this.FieldNames = new List<string>(fieldNames);
    }

    public CompositeIndexAttribute(bool unique, params string[] fieldNames)
    {
        this.Unique = unique;
        this.FieldNames = new List<string>(fieldNames);
    }

    public List<string> FieldNames { get; set; }
    public bool Unique { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 35
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: DefaultRequestAttribute
Extracted Class Content:
/// <summary>
/// Lets you Register new Services and the optional restPaths will be registered against 
/// this default Request Type
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
public class DefaultRequestAttribute : AttributeBase
{
    public Type RequestType { get; set; }

    public DefaultRequestAttribute(Type requestType) => RequestType = requestType;
    public string Verbs { get; set; }
}
--------------------------------------------------------------------------------
ID: 36
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: StringLengthAttribute
Extracted Class Content:
/// <summary>
/// Define the RDBMS Column Definition variable character length
/// </summary>
public class StringLengthAttribute : AttributeBase
{
    public const int MaxText = int.MaxValue;
    public int MinimumLength { get; set; }
    public int MaximumLength { get; set; }

    public StringLengthAttribute(int maximumLength)
    {
        MaximumLength = maximumLength;
    }

    public StringLengthAttribute(int minimumLength, int maximumLength)
    {
        MinimumLength = minimumLength;
        MaximumLength = maximumLength;
    }
}
--------------------------------------------------------------------------------
ID: 37
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: DynamoCodes
Extracted Class Content:
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
public class ProvisionedThroughputAttribute : AttributeBase
{
    public int ReadCapacityUnits { get; set; }
    public int WriteCapacityUnits { get; set; }
}
--------------------------------------------------------------------------------
ID: 38
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: RouteAttribute
Extracted Class Content:
/// <summary>
///		Used to decorate Request DTO's to associate a RESTful request 
///		path mapping with a service.  Multiple attributes can be applied to 
///		each request DTO, to map multiple paths to the service.
/// </summary>
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true, Inherited = true)]
public class RouteAttribute : AttributeBase, IReflectAttributeConverter
{
    /// <summary>
    /// 	<para>Initializes an instance of the <see cref = "RouteAttribute"/> class.</para>
    /// </summary>
    /// <param name = "path">
    /// 	<para>The path template to map to the request.  See 
    ///		<see cref = "Path">RouteAttribute.Path</see>
    ///		for details on the correct format.</para>
    /// </param>
    public RouteAttribute(string path) : this(path, null)
    {
    }

    /// <summary>
    /// 	<para>Initializes an instance of the <see cref = "RouteAttribute"/> class.</para>
    /// </summary>
    /// <param name = "path">
    /// 	<para>The path template to map to the request.  See 
    ///		<see cref = "Path">RouteAttribute.Path</see>
    ///		for details on the correct format.</para>
    /// </param>
    /// <param name = "verbs">A comma-delimited list of HTTP verbs supported by the 
    ///		service.  If unspecified, all verbs are assumed to be supported.</param>
    public RouteAttribute(string path, string verbs)
    {
        Path = path;
        Verbs = verbs;
    }

    /// <summary>
    ///		Gets or sets the path template to be mapped to the request.
    /// </summary>
    /// <value>
    ///		A <see cref = "String"/> value providing the path mapped to
    ///		the request.  Never <see langword="null"/>.
    /// </value>
    /// <remarks>
    ///		<para>Some examples of valid paths are:</para>
    /// 
    ///		<list>
    ///			<item>"/Inventory"</item>
    ///			<item>"/Inventory/{Category}/{ItemId}"</item>
    ///			<item>"/Inventory/{ItemPath*}"</item>
    ///		</list>
    /// 
    ///		<para>Variables are specified within "{}"
    ///		brackets.  Each variable in the path is mapped to the same-named property 
    ///		on the request DTO.  At runtime, ServiceStack will parse the 
    ///		request URL, extract the variable values, instantiate the request DTO,
    ///		and assign the variable values into the corresponding request properties,
    ///		prior to passing the request DTO to the service object for processing.</para>
    /// 
    ///		<para>It is not necessary to specify all request properties as
    ///		variables in the path.  For unspecified properties, callers may provide 
    ///		values in the query string.  For example: the URL 
    ///		"http://services/Inventory?Category=Books&amp;ItemId=12345" causes the same 
    ///		request DTO to be processed as "http://services/Inventory/Books/12345", 
    ///		provided that the paths "/Inventory" (which supports the first URL) and 
    ///		"/Inventory/{Category}/{ItemId}" (which supports the second URL)
    ///		are both mapped to the request DTO.</para>
    /// 
    ///		<para>Please note that while it is possible to specify property values
    ///		in the query string, it is generally considered to be less RESTful and
    ///		less desirable than to specify them as variables in the path.  Using the 
    ///		query string to specify property values may also interfere with HTTP
    ///		caching.</para>
    /// 
    ///		<para>The final variable in the path may contain a "*" suffix
    ///		to grab all remaining segments in the path portion of the request URL and assign
    ///		them to a single property on the request DTO.
    ///		For example, if the path "/Inventory/{ItemPath*}" is mapped to the request DTO,
    ///		then the request URL "http://services/Inventory/Books/12345" will result
    ///		in a request DTO whose ItemPath property contains "Books/12345".
    ///		You may only specify one such variable in the path, and it must be positioned at
    ///		the end of the path.</para>
    /// </remarks>
    public string Path { get; set; }
    /// <summary>
    ///    Gets or sets short summary of what the route does.
    /// </summary>
    public string Summary { get; set; }
    /// <summary>
    ///    Gets or sets longer text to explain the behaviour of the route. 
    /// </summary>
    public string Notes { get; set; }
    /// <summary>
    ///		Gets or sets a comma-delimited list of HTTP verbs supported by the service, such as
    ///		"GET,PUT,POST,DELETE".
    /// </summary>
    /// <value>
    ///		A <see cref = "String"/> providing a comma-delimited list of HTTP verbs supported
    ///		by the service, <see langword="null"/> or empty if all verbs are supported.
    /// </value>
    public string Verbs { get; set; }
    /// <summary>
    /// Used to rank the precedences of route definitions in reverse routing. 
    /// i.e. Priorities below 0 are auto-generated have less precedence.
    /// </summary>
    public int Priority { get; set; }
    /// <summary>
    /// Must match rule defined in Config.RequestRules or Regex expression with format: 
    /// "{IHttpRequest.Field} =~ {pattern}", e.g "PathInfo =~ \/[0-9]+$"
    /// </summary>
    public string Matches { get; set; }

    protected bool Equals(RouteAttribute other)
    {
        return base.Equals(other) && string.Equals(Path, other.Path) && string.Equals(Summary, other.Summary) && string.Equals(Notes, other.Notes) && string.Equals(Verbs, other.Verbs) && Priority == other.Priority;
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((RouteAttribute)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = base.GetHashCode();
            hashCode = (hashCode * 397) ^ (Path != null ? Path.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Summary != null ? Summary.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Notes != null ? Notes.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Verbs != null ? Verbs.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ Priority;
            return hashCode;
        }
    }

    public ReflectAttribute ToReflectAttribute()
    {
        if (Summary == null && Notes == null && Matches == null && Priority == default)
        {
            //Return ideal Constructor Args 
            if (Path != null && Verbs != null)
            {
                return new ReflectAttribute
                {
                    ConstructorArgs = [new(GetType().GetProperty(nameof(Path)), Path), new(GetType().GetProperty(nameof(Verbs)), Verbs)]
                };
            }

            return new ReflectAttribute
            {
                ConstructorArgs = [new(GetType().GetProperty(nameof(Path)), Path)]
            };
        }

        //Otherwise return Property Args
        var to = new ReflectAttribute
        {
            PropertyArgs = [new(GetType().GetProperty(nameof(Path)), Path)]
        };
        if (Verbs != null)
            to.PropertyArgs.Add(new KeyValuePair<PropertyInfo, object>(GetType().GetProperty(nameof(Verbs)), Verbs));
        if (Summary != null)
            to.PropertyArgs.Add(new KeyValuePair<PropertyInfo, object>(GetType().GetProperty(nameof(Summary)), Summary));
        if (Notes != null)
            to.PropertyArgs.Add(new KeyValuePair<PropertyInfo, object>(GetType().GetProperty(nameof(Notes)), Notes));
        if (Matches != null)
            to.PropertyArgs.Add(new KeyValuePair<PropertyInfo, object>(GetType().GetProperty(nameof(Matches)), Matches));
        if (Priority != default)
            to.PropertyArgs.Add(new KeyValuePair<PropertyInfo, object>(GetType().GetProperty(nameof(Priority)), Priority));
        return to;
    }
}
--------------------------------------------------------------------------------
ID: 39
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: SqlServerBucketCountAttribute
Extracted Class Content:
// https://msdn.microsoft.com/en-us/library/dn494956.aspx
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
public class SqlServerBucketCountAttribute : AttributeBase
{
    public SqlServerBucketCountAttribute(int count)
    {
        Count = count;
    }

    public int Count { get; set; }
}
--------------------------------------------------------------------------------
ID: 40
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: RangeAttribute
Extracted Class Content:
/// <summary>
/// Document the allowable min and max range for this property
/// </summary>
public class RangeAttribute : AttributeBase
{
    public object Minimum { get; private set; }
    public object Maximum { get; private set; }
    public Type OperandType { get; private set; }

    public RangeAttribute(int minimum, int maximum)
    {
        OperandType = typeof(int);
        Minimum = minimum;
        Maximum = maximum;
    }

    public RangeAttribute(double minimum, double maximum)
    {
        OperandType = typeof(double);
        Minimum = minimum;
        Maximum = maximum;
    }

    public RangeAttribute(Type type, string minimum, string maximum)
    {
        OperandType = type;
        Minimum = minimum;
        Maximum = maximum;
    }
}
--------------------------------------------------------------------------------
ID: 41
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: NamedConnectionAttribute
Extracted Class Content:
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = true)]
public class NamedConnectionAttribute : AttributeBase
{
    public string Name { get; set; }

    public NamedConnectionAttribute(string name)
    {
        Name = name;
    }
}
--------------------------------------------------------------------------------
ID: 42
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: IntlAttribute
Extracted Class Content:
/// <summary>
/// Configure result field to use a JavaScript Intl formatter 
/// </summary>
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
public class Intl : MetadataAttributeBase
{
    public Intl()
    {
    }

    public Intl(IntlFormat type) => Type = type;
    public IntlFormat Type { get; set; }
    public string Locale { get; set; }
    public string Options { get; set; }
    public DateStyle Date { get; set; }
    public TimeStyle Time { get; set; }
    public NumberStyle Number { get; set; }
    public RelativeTimeStyle RelativeTime { get; set; }
    public Numeric Numeric { get; set; }
    /// <summary>
    /// Use <see cref = "NumberCurrency"/> for typed values
    /// </summary>
    public string Currency { get; set; }
    public CurrencyDisplay CurrencyDisplay { get; set; }
    public CurrencySign CurrencySign { get; set; }
    public SignDisplay SignDisplay { get; set; }
    public RoundingMode RoundingMode { get; set; }
    /// <summary>
    /// Use <see cref = "NumberUnit"/> for typed values
    /// </summary>
    public string Unit { get; set; }
    public UnitDisplay UnitDisplay { get; set; }
    public Notation Notation { get; set; }
    public int MinimumIntegerDigits { get; set; } = int.MinValue;
    public int MinimumFractionDigits { get; set; } = int.MinValue;
    public int MaximumFractionDigits { get; set; } = int.MinValue;
    public int MinimumSignificantDigits { get; set; } = int.MinValue;
    public int MaximumSignificantDigits { get; set; } = int.MinValue;
    public int FractionalSecondDigits { get; set; } = int.MinValue;
    public DateText Weekday { get; set; }
    public DateText Era { get; set; }
    public DatePart Year { get; set; }
    public DateMonth Month { get; set; }
    public DatePart Day { get; set; }
    public DatePart Hour { get; set; }
    public DatePart Minute { get; set; }
    public DatePart Second { get; set; }
    public DateText TimeZoneName { get; set; }
    public string TimeZone { get; set; }
    public bool Hour12 { get; set; }
}
--------------------------------------------------------------------------------
ID: 43
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: TagAttribute
Extracted Class Content:
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]
public class TagAttribute : AttributeBase
{
    /// <summary>
    /// Get or sets tag name
    /// </summary>
    public string Name { get; set; }

    public TagAttribute() : this(null)
    {
    }

    public TagAttribute(string name) => Name = name;
}
--------------------------------------------------------------------------------
ID: 44
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: AutoIdAttribute
Extracted Class Content:
/// <summary>
/// Auto populate Property with RDBMS generated UUID if supported otherwise with a new C# GUID
/// </summary>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
public class AutoIdAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 45
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: MultiPartFieldAttribute
Extracted Class Content:
/// A simple solution to handle FormData Content Type that would otherwise require a ModelBinder
/// https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding?view=aspnetcore-6.0
/// That uses MultipartReader to parse the stream reuqest body
/// https://docs.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads?view=aspnetcore-6.0#upload-large-files-with-streaming
//////[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
public class MultiPartFieldAttribute : AttributeBase
{
    public string ContentType { get; set; }

    public MultiPartFieldAttribute(string contentType) => ContentType = contentType;
    public Type StringSerializer { get; set; }

    public MultiPartFieldAttribute(Type stringSerializer) => StringSerializer = stringSerializer;
}
--------------------------------------------------------------------------------
ID: 46
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: EnumAsIntAttribute
Extracted Class Content:
/// <summary>
/// Save Enum integer value in RDBMS column
/// </summary>
[AttributeUsage(AttributeTargets.Enum)]
public class EnumAsIntAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 47
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: CheckConstraintAttribute
Extracted Class Content:
/// <summary>
/// Create an RDBMS Check Constraint on a Table column
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class CheckConstraintAttribute : AttributeBase
{
    public string Constraint { get; }

    public CheckConstraintAttribute(string constraint)
    {
        this.Constraint = constraint;
    }
}
--------------------------------------------------------------------------------
ID: 48
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: AutoQueryViewerAttributes
Extracted Class Content:
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
public class AutoQueryViewerAttribute : AttributeBase
{
    public string Name { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public string IconUrl { get; set; }
    public string BrandUrl { get; set; }
    public string BrandImageUrl { get; set; }
    public string TextColor { get; set; }
    public string LinkColor { get; set; }
    public string BackgroundColor { get; set; }
    public string BackgroundImageUrl { get; set; }
    public string DefaultSearchField { get; set; }
    public string DefaultSearchType { get; set; }
    public string DefaultSearchText { get; set; }
    public string DefaultFields { get; set; }
}
--------------------------------------------------------------------------------
ID: 49
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ResponseFilterAttribute
Extracted Class Content:
/// <summary>
/// Base class to create response filter attributes only for specific HTTP methods (GET, POST...)
/// </summary>
public abstract class ResponseFilterAttribute : AttributeBase, IHasResponseFilter
{
    public int Priority { get; set; }
    public ApplyTo ApplyTo { get; set; }

    public ResponseFilterAttribute() : this(ApplyTo.All)
    {
    }

    /// <summary>
    /// Creates a new <see cref = "ResponseFilterAttribute"/>
    /// </summary>
    /// <param name = "applyTo">Defines when the filter should be executed</param>
    public ResponseFilterAttribute(ApplyTo applyTo) => ApplyTo = applyTo;
    public void ResponseFilter(IRequest req, IResponse res, object response)
    {
        ApplyTo httpMethod = req.HttpMethodAsApplyTo();
        if (ApplyTo.Has(httpMethod))
            this.Execute(req, res, response);
    }

    /// <summary>
    /// This method is only executed if the HTTP method matches the <see cref = "ApplyTo"/> property.
    /// </summary>
    /// <param name = "req">The http request wrapper</param>
    /// <param name = "res">The http response wrapper</param>
    /// <param name = "responseDto">The response DTO</param>
    public abstract void Execute(IRequest req, IResponse res, object responseDto);
    /// <summary>
    /// Create a ShallowCopy of this instance.
    /// </summary>
    /// <returns></returns>
    public virtual IResponseFilterBase Copy() => (IResponseFilterBase)MemberwiseClone();
}
--------------------------------------------------------------------------------
ID: 50
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: IndexAttribute
Extracted Class Content:
/// <summary>
/// Create an RDBMS Column Index
/// </summary>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct)]
public class IndexAttribute : AttributeBase
{
    public IndexAttribute()
    {
    }

    public IndexAttribute(bool unique)
    {
        Unique = unique;
    }

    public string Name { get; set; }
    public bool Unique { get; set; }
    public bool Clustered { get; set; }
    public bool NonClustered { get; set; }
}
--------------------------------------------------------------------------------
ID: 51
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: DescriptionAttribute
Extracted Class Content:
/// <summary>
/// Annotate any Type, Property or Enum with a textual description
/// </summary>
public class DescriptionAttribute : AttributeBase
{
    public string Description { get; set; }

    public DescriptionAttribute(string description)
    {
        Description = description;
    }
}
--------------------------------------------------------------------------------
ID: 52
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ApiAttribute
Extracted Class Content:
/// <summary>
/// Document a short description for an API Type
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
public class ApiAttribute : AttributeBase
{
    /// <summary>
    /// The overall description of an API. Used by Swagger.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Create or not body param for request type when verb is POST or PUT.
    /// Value can be one of the constants of `GenerateBodyParam` class:
    /// `GenerateBodyParam.IfNotDisabled` (default value), `GenerateBodyParam.Always`, `GenerateBodyParam.Never`
    /// </summary>
    public int BodyParameter { get; set; }
    /// <summary>
    /// Preferred Content-Type, e.g: application/json, multipart/form-data, application/x-www-form-urlencoded
    /// or [MimeTypes.Json, MimeTypes.MultiPartFormData, MimeTypes.FormUrlEncoded]
    /// </summary>
    public string RequestContentType { get; set; }
    /// <summary>
    /// Tells if body param is required
    /// </summary>
    public bool IsRequired { get; set; }

    public ApiAttribute()
    {
    }

    public ApiAttribute(string description) : this(description, GenerateBodyParameter.IfNotDisabled)
    {
    }

    public ApiAttribute(string description, int generateBodyParameter) : this(description, generateBodyParameter, false)
    {
    }

    public ApiAttribute(string description, int generateBodyParameter, bool isRequired)
    {
        Description = description;
        BodyParameter = generateBodyParameter;
        IsRequired = isRequired;
    }
}
--------------------------------------------------------------------------------
ID: 53
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: SynthesizeAttribute
Extracted Class Content:
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = false)]
public class SynthesizeAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 54
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: IconAttribute
Extracted Class Content:
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
public class IconAttribute : AttributeBase
{
    public string Svg { get; set; }
    public string Uri { get; set; }
    public string Alt { get; set; }
    public string Cls { get; set; }
}
--------------------------------------------------------------------------------
ID: 55
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ValidateAttribute
Extracted Class Content:
/// <summary>
/// Assert pre-conditions before DTO's Fluent Validation properties are evaluated
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = true)]
[Tag("PropertyOrder")]
public class ValidateRequestAttribute : AttributeBase, IValidateRule, IReflectAttributeConverter
{
    public ValidateRequestAttribute()
    {
    }

    public ValidateRequestAttribute(string validator) => Validator = validator;
    /// <summary>
    /// Script Expression to create an IPropertyValidator registered in Validators.Types
    /// </summary>
    public string Validator { get; set; }
    /// <summary>
    /// Boolean #Script Code Expression to Test
    /// ARGS:
    ///   - Request: IRequest
    ///   -     dto: Request DTO
    ///   -      it: Request DTO
    /// </summary>
    public string Condition { get; set; }

    /// <summary>
    /// Combine multiple conditions
    /// </summary>
    [Ignore]
    public string[] Conditions { get => new[]
        {
            Condition
        }; set => Condition = ValidateAttribute.Combine("&&", value); }
    /// <summary>
    /// Custom ErrorCode to return 
    /// </summary>
    public string ErrorCode { get; set; }
    /// <summary>
    /// Custom Error Message to return
    ///  - {PropertyName}
    ///  - {PropertyValue}
    /// </summary>
    public string Message { get; set; }
    /// <summary>
    /// Custom Status Code to return when invalid
    /// </summary>
    public int StatusCode { get; set; }

    [Ignore]
    public string[] AllConditions { get => throw new NotSupportedException(nameof(AllConditions)); set => Condition = ValidateAttribute.Combine("&&", value); }

    [Ignore]
    public string[] AnyConditions { get => throw new NotSupportedException(nameof(AnyConditions)); set => Condition = ValidateAttribute.Combine("||", value); }

    public ReflectAttribute ToReflectAttribute()
    {
        var to = new ReflectAttribute
        {
            Name = "ValidateRequest",
            PropertyArgs = []
        };
        if (!string.IsNullOrEmpty(Validator))
            to.PropertyArgs.Add(new KeyValuePair<PropertyInfo, object>(GetType().GetProperty(nameof(Validator)), Validator));
        else if (!string.IsNullOrEmpty(Condition))
            to.PropertyArgs.Add(new KeyValuePair<PropertyInfo, object>(GetType().GetProperty(nameof(Condition)), Condition));
        if (!string.IsNullOrEmpty(ErrorCode))
            to.PropertyArgs.Add(new KeyValuePair<PropertyInfo, object>(GetType().GetProperty(nameof(ErrorCode)), ErrorCode));
        if (!string.IsNullOrEmpty(Message))
            to.PropertyArgs.Add(new KeyValuePair<PropertyInfo, object>(GetType().GetProperty(nameof(Message)), Message));
        if (StatusCode != default)
            to.PropertyArgs.Add(new KeyValuePair<PropertyInfo, object>(GetType().GetProperty(nameof(StatusCode)), StatusCode));
        return to;
    }
}
--------------------------------------------------------------------------------
ID: 56
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: CustomSelectAttribute
Extracted Class Content:
/// <summary>
/// Populate property with Custom SELECT expression, e.g. [CustomSelect("Width * Height")]
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class CustomSelectAttribute : AttributeBase
{
    public string Sql { get; set; }

    public CustomSelectAttribute(string sql) => Sql = sql;
}
--------------------------------------------------------------------------------
ID: 57
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: RequiredAttribute
Extracted Class Content:
/// <summary>
/// Create NOT NULL Column Definitions in RDBMS Create Table statements
/// Use [ValidateNotNull] to use https://docs.servicestack.net/validation to enforce a not null property 
/// </summary>
public class RequiredAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 58
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: TextInputAttribute
Extracted Class Content:
[AttributeUsage(AttributeTargets.Property, AllowMultiple = true, Inherited = false)]
public class TextInputAttribute : AttributeBase
{
    public string Id { get; set; }
    public string Name { get; set; }
    public string Type { get; set; }
    public string Value { get; set; }
    public string Placeholder { get; set; }
    public string Help { get; set; }
    public string Label { get; set; }
    public string Size { get; set; }
    public string Pattern { get; set; }
    public bool? ReadOnly { get; set; }
    public bool? IsRequired { get; set; }
    public string Min { get; set; }
    public string Max { get; set; }
    public int? Step { get; set; }
    public int? MinLength { get; set; }
    public int? MaxLength { get; set; }
    public string[] AllowableValues { get; set; }

    public TextInputAttribute()
    {
    }

    public TextInputAttribute(string id) => Id = id;
    public TextInputAttribute(string id, string type)
    {
        Id = id;
        Type = type;
    }
}
--------------------------------------------------------------------------------
ID: 59
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: EmitCodeAttribute
Extracted Class Content:
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)]
public class EmitCodeAttribute : AttributeBase
{
    public Lang Lang { get; set; }
    public string[] Statements { get; set; }

    public EmitCodeAttribute(Lang lang, string statement) : this(lang, new[] { statement })
    {
    }

    public EmitCodeAttribute(Lang lang, string[] statements)
    {
        Lang = lang;
        Statements = statements ?? throw new ArgumentNullException(nameof(Statements));
    }
}
--------------------------------------------------------------------------------
ID: 60
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: CustomFieldAttribute
Extracted Class Content:
/// <summary>
/// Create RDBMS using Custom SQL Data Type
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class CustomFieldAttribute : AttributeBase
{
    public string Sql { get; set; }
    public int Order { get; set; }

    public CustomFieldAttribute()
    {
    }

    public CustomFieldAttribute(string sql)
    {
        Sql = sql;
    }
}
--------------------------------------------------------------------------------
ID: 61
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ReferencesAttribute
Extracted Class Content:
/// <summary>
/// Document a reference to an external Type, used to create simple Foreign Key references
/// </summary>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)]
public class ReferencesAttribute : AttributeBase
{
    public Type Type { get; set; }

    public ReferencesAttribute(Type type)
    {
        this.Type = type;
    }
}
--------------------------------------------------------------------------------
ID: 62
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: HashKeyAttribute
Extracted Class Content:
/// <summary>
/// Hash Key Attribute used to specify which property is the HashKey, e.g. in DynamoDb.
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class HashKeyAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 63
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: AddColumnAttribute
Extracted Class Content:
public abstract class AlterColumnAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 64
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: RowVersionAttribute
Extracted Class Content:
/// <summary>
/// Treat property as an automatically incremented RDBMS Row Version 
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class RowVersionAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 65
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ComputeAttribute
Extracted Class Content:
/// <summary>
/// Compute attribute.
/// Use to indicate that a property is a Calculated Field.
/// Use [Persisted] attribute to persist column
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class ComputeAttribute : AttributeBase
{
    public string Expression { get; set; }

    public ComputeAttribute() : this(string.Empty)
    {
    }

    public ComputeAttribute(string expression)
    {
        Expression = expression;
    }
}
--------------------------------------------------------------------------------
ID: 66
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: RefAttribute
Extracted Class Content:
/// <summary>
/// Define UI References to external Data Models
/// </summary>
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
public class RefAttribute : AttributeBase
{
    public Type ModelType { get; set; }
    public string Model { get; set; }
    public string RefId { get; set; }
    public string RefLabel { get; set; }
    public string SelfId { get; set; }
    public Type QueryType { get; set; }
    public bool None { get; set; }
}
--------------------------------------------------------------------------------
ID: 67
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: UniqueConstraintAttribute
Extracted Class Content:
/// <summary>
/// Define a unique multi column RDBMS column constraint
/// </summary>
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)]
public class UniqueConstraintAttribute : AttributeBase
{
    public UniqueConstraintAttribute()
    {
        this.FieldNames = new List<string>();
    }

    public UniqueConstraintAttribute(params string[] fieldNames)
    {
        this.FieldNames = new List<string>(fieldNames);
    }

    public List<string> FieldNames { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 68
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ReturnOnInsertAttribute
Extracted Class Content:
/// <summary>
/// Indicate the property should be included in the returning/output clause of INSERT SQL Statements
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class ReturnOnInsertAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 69
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: RestrictAttribute
Extracted Class Content:
/// <summary>
/// Restrict the accessibility of a service and its visibility in Metadata services
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
public class RestrictAttribute : AttributeBase
{
    /// <summary>
    /// Allow access but hide from metadata to requests from Localhost only
    /// </summary>
    public bool VisibleInternalOnly
    {
        get => CanShowTo(RequestAttributes.InternalNetworkAccess);
        set
        {
            if (value == false)
                throw new Exception("Only true allowed");
            VisibilityTo = RequestAttributes.InternalNetworkAccess.ToAllowedFlagsSet();
        }
    }

    /// <summary>
    /// Allow access but hide from metadata to requests from Localhost and Local Intranet only
    /// </summary>
    public bool VisibleLocalhostOnly
    {
        get => CanShowTo(RequestAttributes.Localhost);
        set
        {
            if (value == false)
                throw new Exception("Only true allowed");
            VisibilityTo = RequestAttributes.Localhost.ToAllowedFlagsSet();
        }
    }

    /// <summary>
    /// Restrict access and hide from metadata to requests from Localhost only
    /// </summary>
    public bool LocalhostOnly
    {
        get => HasAccessTo(RequestAttributes.Localhost) && CanShowTo(RequestAttributes.Localhost);
        set
        {
            if (value == false)
                throw new Exception("Only true allowed");
            AccessTo = RequestAttributes.Localhost.ToAllowedFlagsSet();
            VisibilityTo = RequestAttributes.Localhost.ToAllowedFlagsSet();
        }
    }

    /// <summary>
    /// Restrict access and hide from metadata to requests from Localhost and Local Intranet only
    /// </summary>
    public bool InternalOnly
    {
        get => HasAccessTo(RequestAttributes.InternalNetworkAccess) && CanShowTo(RequestAttributes.InternalNetworkAccess);
        set
        {
            if (value == false)
                throw new Exception("Only true allowed");
            AccessTo = RequestAttributes.InternalNetworkAccess.ToAllowedFlagsSet();
            VisibilityTo = RequestAttributes.InternalNetworkAccess.ToAllowedFlagsSet();
        }
    }

    /// <summary>
    /// Restrict access and hide from metadata to requests from External only
    /// </summary>
    public bool ExternalOnly
    {
        get => HasAccessTo(RequestAttributes.External) && CanShowTo(RequestAttributes.External);
        set
        {
            if (value == false)
                throw new Exception("Only true allowed");
            AccessTo = RequestAttributes.External.ToAllowedFlagsSet();
            VisibilityTo = RequestAttributes.External.ToAllowedFlagsSet();
        }
    }

    /// <summary>
    /// Sets a single access restriction
    /// </summary>
    /// <value>Restrict Access to.</value>
    public RequestAttributes AccessTo { get => this.AccessibleToAny.Length == 0 ? RequestAttributes.Any : this.AccessibleToAny[0]; set => this.AccessibleToAny = new[]
        {
            value.ToAllowedFlagsSet()
        }; }
    /// <summary>
    /// Restrict access to any of the specified access scenarios
    /// </summary>
    /// <value>Access restrictions</value>
    public RequestAttributes[] AccessibleToAny { get; private set; }
    /// <summary>
    /// Sets a single metadata Visibility restriction
    /// </summary>
    /// <value>Restrict metadata Visibility to.</value>
    public RequestAttributes VisibilityTo { get => this.VisibleToAny.Length == 0 ? RequestAttributes.Any : this.VisibleToAny[0]; set => this.VisibleToAny = new[]
        {
            value.ToAllowedFlagsSet()
        }; }

    public bool Hide
    {
        set
        {
            if (value)
                this.VisibleToAny = new[]
                {
                    RequestAttributes.None
                };
        }
    }

    /// <summary>
    /// Restrict metadata visibility to any of the specified access scenarios
    /// </summary>
    /// <value>Visibility restrictions</value>
    public RequestAttributes[] VisibleToAny { get; private set; }

    public RestrictAttribute()
    {
        this.AccessTo = RequestAttributes.Any;
        this.VisibilityTo = RequestAttributes.Any;
    }

    /// <summary>
    /// Restrict access and metadata visibility to any of the specified access scenarios
    /// </summary>
    /// <value>The restrict access to scenarios.</value>
    public RestrictAttribute(params RequestAttributes[] restrictAccessAndVisibilityToScenarios)
    {
        this.AccessibleToAny = ToAllowedFlagsSet(restrictAccessAndVisibilityToScenarios);
        this.VisibleToAny = ToAllowedFlagsSet(restrictAccessAndVisibilityToScenarios);
    }

    /// <summary>
    /// Restrict access and metadata visibility to any of the specified access scenarios
    /// </summary>
    /// <value>The restrict access to scenarios.</value>
    public RestrictAttribute(RequestAttributes[] allowedAccessScenarios, RequestAttributes[] visibleToScenarios) : this()
    {
        this.AccessibleToAny = ToAllowedFlagsSet(allowedAccessScenarios);
        this.VisibleToAny = ToAllowedFlagsSet(visibleToScenarios);
    }

    /// <summary>
    /// Returns the allowed set of scenarios based on the user-specified restrictions
    /// </summary>
    /// <param name = "restrictToAny"></param>
    /// <returns></returns>
    private static RequestAttributes[] ToAllowedFlagsSet(RequestAttributes[] restrictToAny)
    {
        if (restrictToAny.Length == 0)
            return new[]
            {
                RequestAttributes.Any
            };
        var scenarios = new List<RequestAttributes>();
        foreach (var restrictToScenario in restrictToAny)
        {
            var restrictTo = restrictToScenario.ToAllowedFlagsSet();
            scenarios.Add(restrictTo);
        }

        return scenarios.ToArray();
    }

    public bool CanShowTo(RequestAttributes restrictions)
    {
        return this.VisibleToAny.Any(scenario => (restrictions & scenario) == restrictions);
    }

    public bool HasAccessTo(RequestAttributes restrictions)
    {
        return this.AccessibleToAny.Any(scenario => (restrictions & scenario) == restrictions);
    }

    public bool HasNoAccessRestrictions => this.AccessTo == RequestAttributes.Any;
    public bool HasNoVisibilityRestrictions => this.VisibilityTo == RequestAttributes.Any;
}
--------------------------------------------------------------------------------
ID: 70
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: FormatAttribute
Extracted Class Content:
/// <summary>
/// Format Results to use custom formatting function. 
/// Can use any available JS function, see <see cref = "FormatMethods"/> for built-in format functions
/// </summary>
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
public class FormatAttribute : AttributeBase
{
    /// <summary>
    /// Name of available JS function, see <see cref = "FormatMethods"/> for built-in functions
    /// </summary>
    public string Method { get; set; }
    public string Options { get; set; }
    public string Locale { get; set; }

    public FormatAttribute()
    {
    }

    public FormatAttribute(string method) => Method = method;
}
--------------------------------------------------------------------------------
ID: 71
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: PriorityAttribute
Extracted Class Content:
/// <summary>
/// Specify the order in which legacy Modular Startup classes are run
/// </summary>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method)]
public class PriorityAttribute : AttributeBase
{
    public int Value { get; set; }

    public PriorityAttribute(int value) => Value = value;
}
--------------------------------------------------------------------------------
ID: 72
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: PreDropTableAttribute
Extracted Class Content:
/// <summary>
/// Run Custom SQL immediately before RDBMS table is dropped
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
public class PreDropTableAttribute : AttributeBase
{
    public string Sql { get; set; }

    public PreDropTableAttribute(string sql)
    {
        Sql = sql;
    }
}
--------------------------------------------------------------------------------
ID: 73
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: IgnoreAttribute
Extracted Class Content:
/// <summary>
/// Ignore property from consideration as an RDBMS column.
/// Properties with this attribute are ignored in all SQL.
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class IgnoreAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 74
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: AliasAttribute
Extracted Class Content:
/// <summary>
/// Map C# Type Name to a different RDBMS Table name or a Property Name to a different RDBMS Column name
/// </summary>
[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method)]
public class AliasAttribute : AttributeBase
{
    public string Name { get; set; }

    public AliasAttribute(string name)
    {
        this.Name = name;
    }
}
--------------------------------------------------------------------------------
ID: 75
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: PageAttribute
Extracted Class Content:
/// <summary>
/// Specify a VirtualPath or Layout for a Code Page
/// </summary>
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, Inherited = true)]
public class PageAttribute : AttributeBase
{
    public string VirtualPath { get; set; }
    public string Layout { get; set; }

    public PageAttribute(string virtualPath, string layout = null)
    {
        VirtualPath = virtualPath;
        Layout = layout;
    }
}
--------------------------------------------------------------------------------
ID: 76
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: BelongToAttribute
Extracted Class Content:
/// <summary>
/// Populate property from ambiguous column name in the specified joined table type
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class BelongToAttribute : AttributeBase
{
    public Type BelongToTableType { get; set; }

    public BelongToAttribute(Type belongToTableType)
    {
        BelongToTableType = belongToTableType;
    }
}
--------------------------------------------------------------------------------
ID: 77
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: ReferenceFieldAttribute
Extracted Class Content:
/// <summary>
/// Populate with a field from a foreign table in AutoQuery and Load* APIs
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class ReferenceFieldAttribute : AttributeBase
{
    /// <summary>
    /// Foreign Key Table name
    /// </summary>
    public Type Model { get; set; }
    /// <summary>
    /// The Field name on current Model to use for the Foreign Key Table Lookup 
    /// </summary>
    public string Id { get; set; }
    /// <summary>
    /// Specify Field to reference (if different from property name)
    /// </summary>
    public string Field { get; set; }

    public ReferenceFieldAttribute()
    {
    }

    public ReferenceFieldAttribute(Type model, string id)
    {
        Model = model;
        Id = id;
    }

    public ReferenceFieldAttribute(Type model, string id, string field)
    {
        Model = model;
        Id = id;
        Field = field;
    }
}
--------------------------------------------------------------------------------
ID: 78
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: IgnoreServicesAttribute
Extracted Class Content:
/// <summary>
/// Ignore Auto Registering this Service in the IOC
/// </summary>
[AttributeUsage(AttributeTargets.Class)]
public class IgnoreServicesAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 79
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: DecimalLengthAttribute
Extracted Class Content:
/// <summary>
/// Create RDBMS Column with specified decimal scale & precision
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class DecimalLengthAttribute : AttributeBase
{
    public int Precision { get; set; }
    public int Scale { get; set; }

    public DecimalLengthAttribute(int precision, int scale)
    {
        Precision = precision;
        Scale = scale;
    }

    public DecimalLengthAttribute(int precision) : this(precision, 0)
    {
    }

    public DecimalLengthAttribute() : this(18, 0)
    {
    }
}
--------------------------------------------------------------------------------
ID: 80
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: InputAttribute
Extracted Class Content:
/// <summary>
/// Customize the HTML Input control in Auto Form UIs
/// </summary>
[AttributeUsage(AttributeTargets.Property)]
public class InputAttribute : InputAttributeBase
{
}
--------------------------------------------------------------------------------
ID: 81
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: NotesAttribute
Extracted Class Content:
/// <summary>
/// Document a longer form description about a Type
/// </summary>
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
public class NotesAttribute : AttributeBase
{
    /// <summary>
    /// Get or sets a Label
    /// </summary>
    public string Notes { get; set; }

    public NotesAttribute(string notes) => Notes = notes;
}
--------------------------------------------------------------------------------
ID: 82
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: AttributeTests
Extracted Class Content:
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true, Inherited = true)]
public class BaseAttribute : AttributeBase, IBaseAttribute
{
    public string Name { get; set; }

    public BaseAttribute(string name)
    {
        Name = name;
    }
}
--------------------------------------------------------------------------------
ID: 83
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: KeyAttribute
Extracted Class Content:
/// <summary>
/// An example of a custom / domain attribute that could be applied to properties of a POCO / Request DTO.
/// If this type is added to the <typeparamref name = "RouteInferenceStrategies"/><code>.AttributesToMatch</code> collection, 
/// calling <typeparamref name = "IServiceRoutes"/><code>.AddFromAssembly()</code> will allow
/// <typeparamref name = "RouteInferenceStrategies . FromAttributes"/> to infer a custom route if its included in the 
/// <typeparamref name = "RouteInferenceStrategies"/> available at runtime.
/// </summary>
[AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
sealed class KeyAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 84
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: AttributeFiltersTest
Extracted Class Content:
//Always executed
public class FilterTestAttribute : AttributeBase, IHasRequestFilter
{
    private static ICacheClient previousCache;
    public ICacheClient Cache { get; set; }
    public int Priority { get; set; }

    public void RequestFilter(IRequest req, IResponse res, object requestDto)
    {
        var dto = (AttributeFiltered)requestDto;
        dto.AttrsExecuted.Add(GetType().Name);
        dto.RequestFilterExecuted = true;
        //Check for equality to previous cache to ensure a filter attribute is no singleton
        dto.RequestFilterDependencyIsResolved = Cache != null && !Cache.Equals(previousCache);
        previousCache = Cache;
    }

    public IRequestFilterBase Copy() => (IRequestFilterBase)this.MemberwiseClone();
}
--------------------------------------------------------------------------------
ID: 85
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: AutoMappingTests
Extracted Class Content:
public class ReadOnlyAttribute : AttributeBase
{
}
--------------------------------------------------------------------------------
ID: 86
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: AttributeFiltersTestAsync
Extracted Class Content:
//Always executed
public class FilterTestAsyncAttribute : AttributeBase, IHasRequestFilterAsync
{
    private static ICacheClient previousCache;
    public ICacheClient Cache { get; set; }
    public int Priority { get; set; }

    public Task RequestFilterAsync(IRequest req, IResponse res, object requestDto)
    {
        var dto = (AttributeFilteredAsync)requestDto;
        dto.AttrsExecuted.Add(GetType().Name);
        dto.RequestFilterExecuted = true;
        //Check for equality to previous cache to ensure a filter attribute is no singleton
        dto.RequestFilterDependencyIsResolved = Cache != null && !Cache.Equals(previousCache);
        previousCache = Cache;
        return TypeConstants.EmptyTask;
    }

    public IRequestFilterBase Copy() => (IRequestFilterBase)this.MemberwiseClone();
}
--------------------------------------------------------------------------------
ID: 87
Repository: ServiceStack/ServiceStack
User: ServiceStack
Class Name: IocService
Extracted Class Content:
public class IocRequestFilterAttribute : AttributeBase, IHasRequestFilter
{
    public FunqSingletonScope FunqSingletonScope { get; set; }
    public FunqRequestScope FunqRequestScope { get; set; }
    public FunqNoneScope FunqNoneScope { get; set; }
    public FunqRequestScopeDepDisposableProperty FunqRequestScopeDepDisposableProperty { get; set; }
    public AltRequestScopeDepDisposableProperty AltRequestScopeDepDisposableProperty { get; set; }
    public int Priority { get; set; }

    public void RequestFilter(IRequest req, IResponse res, object requestDto)
    {
    }

    public IRequestFilterBase Copy() => (IRequestFilterBase)this.MemberwiseClone();
}
--------------------------------------------------------------------------------

ServiceStackAttributeInformation Data
=====================================
ID: 1
Scraped GitHub Page ID: 1
Class Name : MetadataAttributeBase
Attribute Targets: None
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 2
Scraped GitHub Page ID: 2
Class Name : QueryDb
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: defaultTerm, Type: QueryTerm, Order: 0, IsParams: False
Summary Comment: /// Change the default querying behaviour of filter properties in AutoQuery APIs
///
--------------------------------------------------------------------------------
ID: 3
Scraped GitHub Page ID: 3
Class Name : ScriptValue
Attribute Targets: None
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 4
Scraped GitHub Page ID: 4
Class Name : ApiResponse
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: statusCode, Type: HttpStatusCode, Order: 0, IsParams: False
  - Name: description, Type: string, Order: 1, IsParams: False
  - Name: statusCode, Type: int, Order: 0, IsParams: False
  - Name: description, Type: string, Order: 1, IsParams: False
Summary Comment: /// Document potential API Responses this API could return
///
--------------------------------------------------------------------------------
ID: 5
Scraped GitHub Page ID: 5
Class Name : ExplorerCss
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
Summary Comment: /// Customize the Form and Field CSS in API Explorer Forms
///
--------------------------------------------------------------------------------
ID: 6
Scraped GitHub Page ID: 6
Class Name : Meta
Attribute Targets: None
Constructor Arguments:
  - Name: name, Type: string, Order: 0, IsParams: False
  - Name: value, Type: string, Order: 1, IsParams: False
Summary Comment: /// Decorate any type or property with custom metadata
///
--------------------------------------------------------------------------------
ID: 7
Scraped GitHub Page ID: 7
Class Name : UniqueId
Attribute Targets: AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method
Constructor Arguments:
  - Name: id, Type: int, Order: 0, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 8
Scraped GitHub Page ID: 8
Class Name : PostCreateTable
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: sql, Type: string, Order: 0, IsParams: False
Summary Comment: /// Run Custom SQL immediately after RDBMS table is created
///
--------------------------------------------------------------------------------
ID: 9
Scraped GitHub Page ID: 9
Class Name : EnumAsChar
Attribute Targets: AttributeTargets.Enum
Constructor Arguments:
Summary Comment: /// Save Enum value as single char in RDBMS column
///
--------------------------------------------------------------------------------
ID: 10
Scraped GitHub Page ID: 10
Class Name : EnableCors
Attribute Targets: AttributeTargets.Class | AttributeTargets.Method
Constructor Arguments:
  - Name: allowedOrigins, Type: string, Order: 0, IsParams: False
  - Name: allowedMethods, Type: string, Order: 1, IsParams: False
  - Name: allowedHeaders, Type: string, Order: 2, IsParams: False
  - Name: allowCredentials, Type: bool, Order: 3, IsParams: False
Summary Comment: /// Attribute marks that specific response class has support for Cross-origin resource sharing (CORS, see http://www.w3.org/TR/access-control/). CORS allows to access resources from different domain which usually forbidden by origin policy. 
///
--------------------------------------------------------------------------------
ID: 11
Scraped GitHub Page ID: 11
Class Name : PostDropTable
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: sql, Type: string, Order: 0, IsParams: False
Summary Comment: /// Run Custom SQL immediately after RDBMS table is dropped
///
--------------------------------------------------------------------------------
ID: 12
Scraped GitHub Page ID: 12
Class Name : Sequence
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: name, Type: string, Order: 0, IsParams: False
Summary Comment: /// Use in FirebirdSql. indicates name of generator for columns of type AutoIncrement
///
--------------------------------------------------------------------------------
ID: 13
Scraped GitHub Page ID: 13
Class Name : Default
Attribute Targets: AttributeTargets.Property | AttributeTargets.Field
Constructor Arguments:
  - Name: intValue, Type: int, Order: 0, IsParams: False
  - Name: doubleValue, Type: double, Order: 0, IsParams: False
  - Name: defaultValue, Type: string, Order: 0, IsParams: False
  - Name: defaultType, Type: Type, Order: 0, IsParams: False
  - Name: defaultValue, Type: string, Order: 1, IsParams: False
Summary Comment: /// Create RDBMS Column definition with specified default value
///
--------------------------------------------------------------------------------
ID: 14
Scraped GitHub Page ID: 14
Class Name : AutoIncrement
Attribute Targets: AttributeTargets.Property | AttributeTargets.Field
Constructor Arguments:
Summary Comment: /// Auto populate Primary Key Property with an RDBMS generated Auto Incrementing serial Integer
///
--------------------------------------------------------------------------------
ID: 15
Scraped GitHub Page ID: 15
Class Name : ApiAllowableValues
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: name, Type: string, Order: 0, IsParams: False
  - Name: name, Type: string, Order: 0, IsParams: False
  - Name: min, Type: int, Order: 1, IsParams: False
  - Name: max, Type: int, Order: 2, IsParams: False
  - Name: min, Type: int, Order: 0, IsParams: False
  - Name: max, Type: int, Order: 1, IsParams: False
  - Name: name, Type: string, Order: 0, IsParams: False
  - Name: values, Type: string[], Order: 1, IsParams: True
  - Name: values, Type: string[], Order: 0, IsParams: False
  - Name: name, Type: string, Order: 0, IsParams: False
  - Name: enumType, Type: Type, Order: 1, IsParams: False
  - Name: enumType, Type: Type, Order: 0, IsParams: False
  - Name: name, Type: string, Order: 0, IsParams: False
  - Name: listAction, Type: Func<string[]>, Order: 1, IsParams: False
  - Name: listAction, Type: Func<string[]>, Order: 0, IsParams: False
Summary Comment: /// Document the allowable values for an API Property
///
--------------------------------------------------------------------------------
ID: 16
Scraped GitHub Page ID: 16
Class Name : RequestFilter
Attribute Targets: None
Constructor Arguments:
  - Name: applyTo, Type: ApplyTo, Order: 0, IsParams: False
Summary Comment: /// Base class to create request filter attributes only for specific HTTP methods (GET, POST...)
///
--------------------------------------------------------------------------------
ID: 17
Scraped GitHub Page ID: 17
Class Name : SqlServerMemoryOptimized
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: durability, Type: SqlServerDurability, Order: 0, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 18
Scraped GitHub Page ID: 18
Class Name : Worker
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: name, Type: string, Order: 0, IsParams: False
Summary Comment: /// Execute AutoQuery Create/Update/Delete Request DTO in a background thread
///
--------------------------------------------------------------------------------
ID: 19
Scraped GitHub Page ID: 19
Class Name : MapColumn
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: table, Type: string, Order: 0, IsParams: False
  - Name: column, Type: string, Order: 1, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 20
Scraped GitHub Page ID: 20
Class Name : SqlServerCollate
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: collation, Type: string, Order: 0, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 21
Scraped GitHub Page ID: 21
Class Name : Reference
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Define this property as containing a POCO Complex Type Reference
///
--------------------------------------------------------------------------------
ID: 22
Scraped GitHub Page ID: 22
Class Name : SqlServerFileTable
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: directory, Type: string, Order: 0, IsParams: False
  - Name: collateFileName, Type: string, Order: 1, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 23
Scraped GitHub Page ID: 23
Class Name : ApiMember
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Document a short description for an API Property
///
--------------------------------------------------------------------------------
ID: 24
Scraped GitHub Page ID: 24
Class Name : Command
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 25
Scraped GitHub Page ID: 25
Class Name : UploadTo
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: location, Type: string, Order: 0, IsParams: False
Summary Comment: /// Specify which File Upload location should be used to manage these file uploads
///
--------------------------------------------------------------------------------
ID: 26
Scraped GitHub Page ID: 26
Class Name : PrimaryKey
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Treat this property is the Primary Key of the table
///
--------------------------------------------------------------------------------
ID: 27
Scraped GitHub Page ID: 27
Class Name : PreCreateTable
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: sql, Type: string, Order: 0, IsParams: False
Summary Comment: /// Run Custom SQL immediately before RDBMS table is created
///
--------------------------------------------------------------------------------
ID: 28
Scraped GitHub Page ID: 28
Class Name : Exclude
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
Summary Comment: /// Mark types that are to be excluded from metadata & specified endpoints
///
--------------------------------------------------------------------------------
ID: 29
Scraped GitHub Page ID: 29
Class Name : RangeKey
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Range Key Attribute used to specify which property is the RangeKey, e.g. in DynamoDb.
///
--------------------------------------------------------------------------------
ID: 30
Scraped GitHub Page ID: 30
Class Name : Schema
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: name, Type: string, Order: 0, IsParams: False
Summary Comment: /// Define which RDBMS Schema Data Model belongs to
///
--------------------------------------------------------------------------------
ID: 31
Scraped GitHub Page ID: 31
Class Name : Id
Attribute Targets: AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method
Constructor Arguments:
  - Name: id, Type: int, Order: 0, IsParams: False
Summary Comment: /// Uniquely identify C# Types and properties with a unique integer in gRPC Services
///
--------------------------------------------------------------------------------
ID: 32
Scraped GitHub Page ID: 32
Class Name : Unique
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Define a unique RDBMS column constraint
///
--------------------------------------------------------------------------------
ID: 33
Scraped GitHub Page ID: 33
Class Name : CompositeKey
Attribute Targets: AttributeTargets.Class | AttributeTargets.Struct
Constructor Arguments:
  - Name: fieldNames, Type: string[], Order: 0, IsParams: True
Summary Comment: 
--------------------------------------------------------------------------------
ID: 34
Scraped GitHub Page ID: 34
Class Name : CompositeIndex
Attribute Targets: AttributeTargets.Class | AttributeTargets.Struct
Constructor Arguments:
  - Name: fieldNames, Type: string[], Order: 0, IsParams: True
  - Name: unique, Type: bool, Order: 0, IsParams: False
  - Name: fieldNames, Type: string[], Order: 1, IsParams: True
Summary Comment: /// Create an Composite RDBMS Index and optional Unique constraint
///
--------------------------------------------------------------------------------
ID: 35
Scraped GitHub Page ID: 35
Class Name : DefaultRequest
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: requestType, Type: Type, Order: 0, IsParams: False
Summary Comment: /// Lets you Register new Services and the optional restPaths will be registered against 
/// this default Request Type
///
--------------------------------------------------------------------------------
ID: 36
Scraped GitHub Page ID: 36
Class Name : StringLength
Attribute Targets: None
Constructor Arguments:
  - Name: maximumLength, Type: int, Order: 0, IsParams: False
  - Name: minimumLength, Type: int, Order: 0, IsParams: False
  - Name: maximumLength, Type: int, Order: 1, IsParams: False
Summary Comment: /// Define the RDBMS Column Definition variable character length
///
--------------------------------------------------------------------------------
ID: 37
Scraped GitHub Page ID: 37
Class Name : ProvisionedThroughput
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 38
Scraped GitHub Page ID: 38
Class Name : Route
Attribute Targets: AttributeTargets.Class | AttributeTargets.Method
Constructor Arguments:
  - Name: path, Type: string, Order: 0, IsParams: False
  - Name: path, Type: string, Order: 0, IsParams: False
  - Name: verbs, Type: string, Order: 1, IsParams: False
Summary Comment: ///		Used to decorate Request DTO's to associate a RESTful request 
///		path mapping with a service.  Multiple attributes can be applied to 
///		each request DTO, to map multiple paths to the service.
///
--------------------------------------------------------------------------------
ID: 39
Scraped GitHub Page ID: 39
Class Name : SqlServerBucketCount
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: count, Type: int, Order: 0, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 40
Scraped GitHub Page ID: 40
Class Name : Range
Attribute Targets: None
Constructor Arguments:
  - Name: minimum, Type: int, Order: 0, IsParams: False
  - Name: maximum, Type: int, Order: 1, IsParams: False
  - Name: minimum, Type: double, Order: 0, IsParams: False
  - Name: maximum, Type: double, Order: 1, IsParams: False
  - Name: type, Type: Type, Order: 0, IsParams: False
  - Name: minimum, Type: string, Order: 1, IsParams: False
  - Name: maximum, Type: string, Order: 2, IsParams: False
Summary Comment: /// Document the allowable min and max range for this property
///
--------------------------------------------------------------------------------
ID: 41
Scraped GitHub Page ID: 41
Class Name : NamedConnection
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: name, Type: string, Order: 0, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 42
Scraped GitHub Page ID: 42
Class Name : Intl
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: type, Type: IntlFormat, Order: 0, IsParams: False
Summary Comment: /// Configure result field to use a JavaScript Intl formatter 
///
--------------------------------------------------------------------------------
ID: 43
Scraped GitHub Page ID: 43
Class Name : Tag
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: name, Type: string, Order: 0, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 44
Scraped GitHub Page ID: 44
Class Name : AutoId
Attribute Targets: AttributeTargets.Property | AttributeTargets.Field
Constructor Arguments:
Summary Comment: /// Auto populate Property with RDBMS generated UUID if supported otherwise with a new C# GUID
///
--------------------------------------------------------------------------------
ID: 45
Scraped GitHub Page ID: 45
Class Name : MultiPartField
Attribute Targets: None
Constructor Arguments:
  - Name: contentType, Type: string, Order: 0, IsParams: False
  - Name: stringSerializer, Type: Type, Order: 0, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 46
Scraped GitHub Page ID: 46
Class Name : EnumAsInt
Attribute Targets: AttributeTargets.Enum
Constructor Arguments:
Summary Comment: /// Save Enum integer value in RDBMS column
///
--------------------------------------------------------------------------------
ID: 47
Scraped GitHub Page ID: 47
Class Name : CheckConstraint
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: constraint, Type: string, Order: 0, IsParams: False
Summary Comment: /// Create an RDBMS Check Constraint on a Table column
///
--------------------------------------------------------------------------------
ID: 48
Scraped GitHub Page ID: 48
Class Name : AutoQueryViewer
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 49
Scraped GitHub Page ID: 49
Class Name : ResponseFilter
Attribute Targets: None
Constructor Arguments:
  - Name: applyTo, Type: ApplyTo, Order: 0, IsParams: False
Summary Comment: /// Base class to create response filter attributes only for specific HTTP methods (GET, POST...)
///
--------------------------------------------------------------------------------
ID: 50
Scraped GitHub Page ID: 50
Class Name : Index
Attribute Targets: AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct
Constructor Arguments:
  - Name: unique, Type: bool, Order: 0, IsParams: False
Summary Comment: /// Create an RDBMS Column Index
///
--------------------------------------------------------------------------------
ID: 51
Scraped GitHub Page ID: 51
Class Name : Description
Attribute Targets: None
Constructor Arguments:
  - Name: description, Type: string, Order: 0, IsParams: False
Summary Comment: /// Annotate any Type, Property or Enum with a textual description
///
--------------------------------------------------------------------------------
ID: 52
Scraped GitHub Page ID: 52
Class Name : Api
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: description, Type: string, Order: 0, IsParams: False
  - Name: description, Type: string, Order: 0, IsParams: False
  - Name: generateBodyParameter, Type: int, Order: 1, IsParams: False
  - Name: description, Type: string, Order: 0, IsParams: False
  - Name: generateBodyParameter, Type: int, Order: 1, IsParams: False
  - Name: isRequired, Type: bool, Order: 2, IsParams: False
Summary Comment: /// Document a short description for an API Type
///
--------------------------------------------------------------------------------
ID: 53
Scraped GitHub Page ID: 53
Class Name : Synthesize
Attribute Targets: AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 54
Scraped GitHub Page ID: 54
Class Name : Icon
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 55
Scraped GitHub Page ID: 55
Class Name : ValidateRequest
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: validator, Type: string, Order: 0, IsParams: False
Summary Comment: /// Assert pre-conditions before DTO's Fluent Validation properties are evaluated
///
--------------------------------------------------------------------------------
ID: 56
Scraped GitHub Page ID: 56
Class Name : CustomSelect
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: sql, Type: string, Order: 0, IsParams: False
Summary Comment: /// Populate property with Custom SELECT expression, e.g. [CustomSelect("Width * Height")]
///
--------------------------------------------------------------------------------
ID: 57
Scraped GitHub Page ID: 57
Class Name : Required
Attribute Targets: None
Constructor Arguments:
Summary Comment: /// Create NOT NULL Column Definitions in RDBMS Create Table statements
/// Use [ValidateNotNull] to use https://docs.servicestack.net/validation to enforce a not null property 
///
--------------------------------------------------------------------------------
ID: 58
Scraped GitHub Page ID: 58
Class Name : TextInput
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: id, Type: string, Order: 0, IsParams: False
  - Name: id, Type: string, Order: 0, IsParams: False
  - Name: type, Type: string, Order: 1, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 59
Scraped GitHub Page ID: 59
Class Name : EmitCode
Attribute Targets: AttributeTargets.Property | AttributeTargets.Class | AttributeTargets.Struct
Constructor Arguments:
  - Name: lang, Type: Lang, Order: 0, IsParams: False
  - Name: statement, Type: string, Order: 1, IsParams: False
  - Name: lang, Type: Lang, Order: 0, IsParams: False
  - Name: statements, Type: string[], Order: 1, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 60
Scraped GitHub Page ID: 60
Class Name : CustomField
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: sql, Type: string, Order: 0, IsParams: False
Summary Comment: /// Create RDBMS using Custom SQL Data Type
///
--------------------------------------------------------------------------------
ID: 61
Scraped GitHub Page ID: 61
Class Name : References
Attribute Targets: AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct
Constructor Arguments:
  - Name: type, Type: Type, Order: 0, IsParams: False
Summary Comment: /// Document a reference to an external Type, used to create simple Foreign Key references
///
--------------------------------------------------------------------------------
ID: 62
Scraped GitHub Page ID: 62
Class Name : HashKey
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Hash Key Attribute used to specify which property is the HashKey, e.g. in DynamoDb.
///
--------------------------------------------------------------------------------
ID: 63
Scraped GitHub Page ID: 63
Class Name : AlterColumn
Attribute Targets: None
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 64
Scraped GitHub Page ID: 64
Class Name : RowVersion
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Treat property as an automatically incremented RDBMS Row Version 
///
--------------------------------------------------------------------------------
ID: 65
Scraped GitHub Page ID: 65
Class Name : Compute
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: expression, Type: string, Order: 0, IsParams: False
Summary Comment: /// Compute attribute.
/// Use to indicate that a property is a Calculated Field.
/// Use [Persisted] attribute to persist column
///
--------------------------------------------------------------------------------
ID: 66
Scraped GitHub Page ID: 66
Class Name : Ref
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Define UI References to external Data Models
///
--------------------------------------------------------------------------------
ID: 67
Scraped GitHub Page ID: 67
Class Name : UniqueConstraint
Attribute Targets: AttributeTargets.Class | AttributeTargets.Struct
Constructor Arguments:
  - Name: fieldNames, Type: string[], Order: 0, IsParams: True
Summary Comment: /// Define a unique multi column RDBMS column constraint
///
--------------------------------------------------------------------------------
ID: 68
Scraped GitHub Page ID: 68
Class Name : ReturnOnInsert
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Indicate the property should be included in the returning/output clause of INSERT SQL Statements
///
--------------------------------------------------------------------------------
ID: 69
Scraped GitHub Page ID: 69
Class Name : Restrict
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: restrictAccessAndVisibilityToScenarios, Type: RequestAttributes[], Order: 0, IsParams: True
  - Name: allowedAccessScenarios, Type: RequestAttributes[], Order: 0, IsParams: False
  - Name: visibleToScenarios, Type: RequestAttributes[], Order: 1, IsParams: False
Summary Comment: /// Restrict the accessibility of a service and its visibility in Metadata services
///
--------------------------------------------------------------------------------
ID: 70
Scraped GitHub Page ID: 70
Class Name : Format
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: method, Type: string, Order: 0, IsParams: False
Summary Comment: /// Format Results to use custom formatting function. 
/// Can use any available JS function, see <see cref = "FormatMethods"/> for built-in format functions
///
--------------------------------------------------------------------------------
ID: 71
Scraped GitHub Page ID: 71
Class Name : Priority
Attribute Targets: AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method
Constructor Arguments:
  - Name: value, Type: int, Order: 0, IsParams: False
Summary Comment: /// Specify the order in which legacy Modular Startup classes are run
///
--------------------------------------------------------------------------------
ID: 72
Scraped GitHub Page ID: 72
Class Name : PreDropTable
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: sql, Type: string, Order: 0, IsParams: False
Summary Comment: /// Run Custom SQL immediately before RDBMS table is dropped
///
--------------------------------------------------------------------------------
ID: 73
Scraped GitHub Page ID: 73
Class Name : Ignore
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Ignore property from consideration as an RDBMS column.
/// Properties with this attribute are ignored in all SQL.
///
--------------------------------------------------------------------------------
ID: 74
Scraped GitHub Page ID: 74
Class Name : Alias
Attribute Targets: AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method
Constructor Arguments:
  - Name: name, Type: string, Order: 0, IsParams: False
Summary Comment: /// Map C# Type Name to a different RDBMS Table name or a Property Name to a different RDBMS Column name
///
--------------------------------------------------------------------------------
ID: 75
Scraped GitHub Page ID: 75
Class Name : Page
Attribute Targets: AttributeTargets.Class | AttributeTargets.Method
Constructor Arguments:
  - Name: virtualPath, Type: string, Order: 0, IsParams: False
  - Name: layout, Type: string, Order: 1, IsParams: False
Summary Comment: /// Specify a VirtualPath or Layout for a Code Page
///
--------------------------------------------------------------------------------
ID: 76
Scraped GitHub Page ID: 76
Class Name : BelongTo
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: belongToTableType, Type: Type, Order: 0, IsParams: False
Summary Comment: /// Populate property from ambiguous column name in the specified joined table type
///
--------------------------------------------------------------------------------
ID: 77
Scraped GitHub Page ID: 77
Class Name : ReferenceField
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: model, Type: Type, Order: 0, IsParams: False
  - Name: id, Type: string, Order: 1, IsParams: False
  - Name: model, Type: Type, Order: 0, IsParams: False
  - Name: id, Type: string, Order: 1, IsParams: False
  - Name: field, Type: string, Order: 2, IsParams: False
Summary Comment: /// Populate with a field from a foreign table in AutoQuery and Load* APIs
///
--------------------------------------------------------------------------------
ID: 78
Scraped GitHub Page ID: 78
Class Name : IgnoreServices
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
Summary Comment: /// Ignore Auto Registering this Service in the IOC
///
--------------------------------------------------------------------------------
ID: 79
Scraped GitHub Page ID: 79
Class Name : DecimalLength
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
  - Name: precision, Type: int, Order: 0, IsParams: False
  - Name: scale, Type: int, Order: 1, IsParams: False
  - Name: precision, Type: int, Order: 0, IsParams: False
Summary Comment: /// Create RDBMS Column with specified decimal scale & precision
///
--------------------------------------------------------------------------------
ID: 80
Scraped GitHub Page ID: 80
Class Name : Input
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// Customize the HTML Input control in Auto Form UIs
///
--------------------------------------------------------------------------------
ID: 81
Scraped GitHub Page ID: 81
Class Name : Notes
Attribute Targets: AttributeTargets.Class
Constructor Arguments:
  - Name: notes, Type: string, Order: 0, IsParams: False
Summary Comment: /// Document a longer form description about a Type
///
--------------------------------------------------------------------------------
ID: 82
Scraped GitHub Page ID: 82
Class Name : Base
Attribute Targets: AttributeTargets.Class | AttributeTargets.Method
Constructor Arguments:
  - Name: name, Type: string, Order: 0, IsParams: False
Summary Comment: 
--------------------------------------------------------------------------------
ID: 83
Scraped GitHub Page ID: 83
Class Name : Key
Attribute Targets: AttributeTargets.Property
Constructor Arguments:
Summary Comment: /// An example of a custom / domain attribute that could be applied to properties of a POCO / Request DTO.
/// If this type is added to the <typeparamref name = "RouteInferenceStrategies"/><code>.AttributesToMatch</code> collection, 
/// calling <typeparamref name = "IServiceRoutes"/><code>.AddFromAssembly()</code> will allow
/// <typeparamref name = "RouteInferenceStrategies . FromAttributes"/> to infer a custom route if its included in the 
/// <typeparamref name = "RouteInferenceStrategies"/> available at runtime.
///
--------------------------------------------------------------------------------
ID: 84
Scraped GitHub Page ID: 84
Class Name : FilterTest
Attribute Targets: None
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 85
Scraped GitHub Page ID: 85
Class Name : ReadOnly
Attribute Targets: None
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 86
Scraped GitHub Page ID: 86
Class Name : FilterTestAsync
Attribute Targets: None
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------
ID: 87
Scraped GitHub Page ID: 87
Class Name : IocRequestFilter
Attribute Targets: None
Constructor Arguments:
Summary Comment: 
--------------------------------------------------------------------------------

ServiceStackAttributeInformationUsage Data
===========================================
ID: 1
ServiceStack Attribute Information ID: 2
Class Name: QueryOrRockstars
Class Example:
[QueryDb(QueryTerm.Or)]
[Route("/OrRockstars")]
public class QueryOrRockstars : QueryDb<Rockstar>
{
    public int? Age { get; set; }
    public string FirstName { get; set; }
}
--------------------------------------------------------------------------------
ID: 2
ServiceStack Attribute Information ID: 2
Class Name: QueryGetRockstars
Class Example:
[QueryDb(QueryTerm.Or)]
public class QueryGetRockstars : QueryDb<Rockstar>
{
    public int[] Ids { get; set; }
    public List<int> Ages { get; set; }
    public List<string> FirstNames { get; set; }
    public int[] IdsBetween { get; set; }
}
--------------------------------------------------------------------------------
ID: 3
ServiceStack Attribute Information ID: 2
Class Name: QueryGetRockstarsDynamic
Class Example:
[QueryDb(QueryTerm.Or)]
public class QueryGetRockstarsDynamic : QueryDb<Rockstar>
{
}
--------------------------------------------------------------------------------
ID: 4
ServiceStack Attribute Information ID: 2
Class Name: SearchMovies
Class Example:
[Route("/movies/search")]
[QueryDb(QueryTerm.And)] //Default
public class SearchMovies : QueryDb<Movie>
{
}
--------------------------------------------------------------------------------
ID: 5
ServiceStack Attribute Information ID: 2
Class Name: QueryMovies
Class Example:
[Route("/movies")]
[QueryDb(QueryTerm.Or)]
public class QueryMovies : QueryDb<Movie>
{
    public int[] Ids { get; set; }
    public string[] ImdbIds { get; set; }
    public string[] Ratings { get; set; }
}
--------------------------------------------------------------------------------
ID: 6
ServiceStack Attribute Information ID: 2
Class Name: QueryRockstarAuditSubOr
Class Example:
[QueryDb(QueryTerm.Or)]
[AutoFilter(QueryTerm.Ensure, nameof(AuditBase.SoftDeletedDate), SqlTemplate.IsNull)]
[AutoFilter(QueryTerm.Ensure, nameof(IAuditTenant.TenantId), Eval = "Request.Items.TenantId")]
public class QueryRockstarAuditSubOr : QueryDb<RockstarAuditTenant, RockstarAuto>
{
    public string FirstNameStartsWith { get; set; }
    public int? AgeOlderThan { get; set; }
}
--------------------------------------------------------------------------------
ID: 7
ServiceStack Attribute Information ID: 4
Class Name: SwaggerTest
Class Example:
[Tag("TheTag")]
[Api("SwaggerTest Service Description")]
[ApiResponse(HttpStatusCode.BadRequest, "Your request was not understood")]
[ApiResponse(HttpStatusCode.InternalServerError, "Oops, something broke")]
[Route("/swagger", "GET", Summary = @"GET / Summary", Notes = "GET / Notes")]
[Route("/swagger/{Name}", "GET", Summary = @"GET Summary", Notes = "GET /Name Notes")]
[Route("/swagger/{Name}", "POST", Summary = @"POST Summary", Notes = "POST /Name Notes")]
[DataContract]
public class SwaggerTest
{
    [ApiMember(Description = "Color Description", ParameterType = "path", DataType = "string", IsRequired = true)]
    [ApiAllowableValues("Name", typeof(MyColor))] //Enum
    [DataMember]
    public string Name { get; set; }

    [ApiMember]
    [ApiAllowableValues("Color", typeof(MyColor))] //Enum
    [DataMember]
    public MyColor Color { get; set; }

    [ApiMember(Description = "Aliased Description", DataType = "string", IsRequired = true)]
    [DataMember(Name = "Aliased")]
    public string Original { get; set; }

    [ApiMember(Description = "Not Aliased Description", DataType = "string", IsRequired = true)]
    [DataMember]
    public string NotAliased { get; set; }

    [ApiMember(Description = "Format as password", DataType = "password")]
    [DataMember]
    public string Password { get; set; }

    [DataMember]
    [ApiMember(IsRequired = false, AllowMultiple = true)]
    public DateTime[] MyDateBetween { get; set; }

    [ApiMember(Description = "Nested model 1", DataType = "SwaggerNestedModel")]
    [DataMember]
    public SwaggerNestedModel NestedModel1 { get; set; }

    [ApiMember(Description = "Nested model 2", DataType = "SwaggerNestedModel2")]
    [DataMember]
    public SwaggerNestedModel2 NestedModel2 { get; set; }
}
--------------------------------------------------------------------------------
ID: 8
ServiceStack Attribute Information ID: 4
Class Name: SwaggerMultiApiResponseTest
Class Example:
[ApiResponse(400, "Code 1")]
[CustomApiResponse()]
[ApiResponse(402, "Code 2")]
[CustomApiResponse()]
[CustomApiResponse()]
[ApiResponse(401, "Code 3")]
[Route("/swagger/multiattrtest", Verbs = "POST", Summary = "Sample request")]
public sealed class SwaggerMultiApiResponseTest : IReturnVoid
{
}
--------------------------------------------------------------------------------
ID: 9
ServiceStack Attribute Information ID: 4
Class Name: ReturnAnnotatedDtoRequest
Class Example:
[Route("/return-annotated", "GET")]
[ApiResponse(StatusCode = (int)HttpStatusCode.OK, Description = "All OK")]
[ApiResponse(StatusCode = (int)HttpStatusCode.Forbidden, Description = "Forbidden Service", ResponseType = typeof(Return403Response))]
[ApiResponse(Description = "Default Response", ResponseType = typeof(Return200Response), IsDefaultResponse = true)]
public class ReturnAnnotatedDtoRequest : IReturn<Return200Response>, IGet
{
    public int Code { get; set; }
}
--------------------------------------------------------------------------------
ID: 10
ServiceStack Attribute Information ID: 4
Class Name: AllowedAttributes
Class Example:
///<summary>
///AllowedAttributes Description
///</summary>
[Route("/allowed-attributes", "GET")]
[Api(Description = "AllowedAttributes Description")]
[ApiResponse(400, "Your request was not understood")]
[DataContract]
public partial class AllowedAttributes
{
    [DataMember]
    [Required]
    public virtual int Id { get; set; }

    ///<summary>
    ///Range Description
    ///</summary>
    [DataMember(Name = "Aliased")]
    [ApiMember(DataType = "double", Description = "Range Description", IsRequired = true, ParameterType = "path")]
    public virtual double Range { get; set; }
}
--------------------------------------------------------------------------------
ID: 11
ServiceStack Attribute Information ID: 4
Class Name: CreateBookings
Class Example:
[Route("/bookings/repeat", Summary = "Create new bookings", Notes = "Create new bookings if you are authorized to do so.", Verbs = "POST")]
[ApiResponse(HttpStatusCode.Unauthorized, "You were unauthorized to call this service")]
//[Restrict(VisibleLocalhostOnly = true)]
[Tag("web"), Tag("mobile"), Tag("desktop")]
public class CreateBookings : CreateBookingBase, IReturn<CreateBookingsResponse>
{
    [ApiMember(Description = "Set the dates you want to book and it's quantities. It's an array of dates and quantities.", IsRequired = true)]
    public List<DatesToRepeat> DatesToRepeat { get; set; }

    [ApiMember]
    public IEnumerable<DatesToRepeat> DatesToRepeatIEnumerable { get; set; }

    [ApiMember]
    public DatesToRepeat[] DatesToRepeatArray { get; set; }
}
--------------------------------------------------------------------------------
ID: 12
ServiceStack Attribute Information ID: 4
Class Name: DeleteServiceProviderRequestDto
Class Example:
[Api("CRUD for ServiceProviders")]
[Route("/ServiceProvider/{Id}", "Delete", Summary = "Delete a ServiceProvider by Id")]
[ApiResponse(HttpStatusCode.InternalServerError, "Something went wrong. Please contact the support team")]
public class DeleteServiceProviderRequestDto : IReturn<DeleteServiceProviderReponseDto>
{
    [ApiMember(ParameterType = "path", IsRequired = true)]
    public int Id { get; set; }

    [ApiMember(DataType = "boolean")]
    public bool ForceDelete { get; set; }
}
--------------------------------------------------------------------------------
ID: 13
ServiceStack Attribute Information ID: 5
Class Name: CreateBooking
Class Example:
// Uncomment below to enable DeletedBookings API to view deleted bookings:
// [Route("/bookings/deleted")]
// [AutoFilter(QueryTerm.Ensure, nameof(AuditBase.DeletedDate), Template = SqlTemplate.IsNotNull)]
// public class DeletedBookings : QueryDb<Booking> {}
[Tag("bookings"), Description("Create a new Booking")]
[LocodeCss(Field = "col-span-12 sm:col-span-6", Fieldset = "grid grid-cols-8 gap-2", Form = "border overflow-hidden max-w-screen-lg")]
[ExplorerCss(Field = "col-span-12 sm:col-span-6", Fieldset = "grid grid-cols-6 gap-8", Form = "border border-indigo-500 overflow-hidden max-w-screen-lg")]
[Route("/bookings", "POST")]
[ValidateHasRole("Employee")]
[AutoApply(Behavior.AuditCreate)]
public class CreateBooking : ICreateDb<Booking>, IReturn<IdResponse>
{
    [Description("Name this Booking is for"), ValidateNotEmpty]
    public string Name { get; set; } = string.Empty;
    public RoomType RoomType { get; set; }

    [ValidateGreaterThan(0)]
    public int RoomNumber { get; set; }

    [ValidateGreaterThan(0)]
    public decimal Cost { get; set; }

    [Required]
    [Input(Type = "date", Options = "{ datepicker:true, 'datepicker-format':'dd-mm-yyyy' }")]
    public DateTime BookingStartDate { get; set; }

    [Input(Type = "date", Options = "{ datepicker:true, 'datepicker-format':'dd-mm-yyyy' }")]
    public DateTime? BookingEndDate { get; set; }

    [Input(Type = "textarea")]
    public string? Notes { get; set; }
    public string? CouponId { get; set; }
}
--------------------------------------------------------------------------------
ID: 14
ServiceStack Attribute Information ID: 8
Class Name: ModelWithSeedDataSql
Class Example:
[PostCreateTable("INSERT INTO ModelWithSeedDataSql (Name) VALUES ('Foo');" + "INSERT INTO ModelWithSeedDataSql (Name) VALUES ('Bar');")]
public class ModelWithSeedDataSql
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 15
ServiceStack Attribute Information ID: 8
Class Name: ModelWithSeedDataSqlMulti
Class Example:
[PostCreateTable("INSERT INTO ModelWithSeedDataSqlMulti (Name) VALUES ('Foo')"), PostCreateTable("INSERT INTO ModelWithSeedDataSqlMulti (Name) VALUES ('Bar')")]
public class ModelWithSeedDataSqlMulti
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 16
ServiceStack Attribute Information ID: 8
Class Name: ModelWithPreAndPostDrop
Class Example:
[PreDropTable("-- PreDropTable")]
[PostDropTable("-- PostDropTable")]
[PreCreateTable("-- PreCreateTable")]
[PostCreateTable("-- PostCreateTable")]
public class ModelWithPreAndPostDrop
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 17
ServiceStack Attribute Information ID: 8
Class Name: SeedTest
Class Example:
[PostCreateTable("DBCC CHECKIDENT (SeedTest, RESEED, 1000)")]
public class SeedTest
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 18
ServiceStack Attribute Information ID: 10
Class Name: CorsFeatureRequest
Class Example:
[Route("/corsmethod")]
[EnableCors("http://localhost http://localhost2", "POST, GET", "Type1, Type2", true)]
public class CorsFeatureRequest
{
}
--------------------------------------------------------------------------------
ID: 19
ServiceStack Attribute Information ID: 11
Class Name: ModelWithPostDropSql
Class Example:
[PostDropTable("CREATE INDEX udxNoTable on NonExistingTable (Name);")]
public class ModelWithPostDropSql
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 20
ServiceStack Attribute Information ID: 11
Class Name: ModelWithPreAndPostDrop
Class Example:
[PreDropTable("-- PreDropTable")]
[PostDropTable("-- PostDropTable")]
[PreCreateTable("-- PreCreateTable")]
[PostCreateTable("-- PostCreateTable")]
public class ModelWithPreAndPostDrop
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 21
ServiceStack Attribute Information ID: 13
Class Name: GetFileService
Class Example:
[DefaultRequest(typeof(GetFile))]
public class GetFileService : Service
{
    public object Get(GetFile request)
    {
        var file = VirtualFileSources.GetFile(request.Path);
        if (file == null)
            throw HttpError.NotFound("File does not exist");
        var bytes = file.ReadAllBytes();
        var to = new FileContent
        {
            Name = file.Name,
            Type = MimeTypes.GetMimeType(file.Extension),
            Body = bytes,
            Length = bytes.Length,
        };
        return to;
    }
}
--------------------------------------------------------------------------------
ID: 22
ServiceStack Attribute Information ID: 13
Class Name: AssignRolesService
Class Example:
[DefaultRequest(typeof(AssignRoles))]
public class AssignRolesService : Service
{
    public async Task<object> Post(AssignRoles request)
    {
        if (!Request.IsInProcessRequest())
            await RequiredRoleAttribute.AssertRequiredRoleAsync(Request, RoleNames.Admin);
        if (string.IsNullOrEmpty(request.UserName))
            throw new ArgumentNullException(nameof(request.UserName));
        var userAuth = await AuthRepositoryAsync.GetUserAuthByUserNameAsync(request.UserName).ConfigAwait();
        if (userAuth == null)
            throw HttpError.NotFound(request.UserName);
        await AuthRepositoryAsync.AssignRolesAsync(userAuth, request.Roles, request.Permissions).ConfigAwait();
        return new AssignRolesResponse
        {
            AllRoles = (await AuthRepositoryAsync.GetRolesAsync(userAuth).ConfigAwait()).ToList(),
            AllPermissions = (await AuthRepositoryAsync.GetPermissionsAsync(userAuth).ConfigAwait()).ToList(),
        };
    }
}
--------------------------------------------------------------------------------
ID: 23
ServiceStack Attribute Information ID: 13
Class Name: AdminDashboardService
Class Example:
[DefaultRequest(typeof(AdminDashboard))]
public class AdminDashboardService : Service
{
    public object Any(AdminDashboard request)
    {
        var mqServer = TryResolve<IMessageService>();
        var mqWorker = mqServer?.GetStats();
        var stats = new ServerStats
        {
            Redis = (TryResolve<IRedisClientsManager>() as IHasStats)?.Stats,
            ServerEvents = TryResolve<IServerEvents>()?.GetStats(),
            MqDescription = mqServer?.GetStatsDescription(),
            MqWorkers = mqWorker.ToDictionary(),
        };
        return new AdminDashboardResponse
        {
            ServerStats = stats,
        };
    }
}
--------------------------------------------------------------------------------
ID: 24
ServiceStack Attribute Information ID: 13
Class Name: HotReloadFilesService
Class Example:
[DefaultRequest(typeof(HotReloadFiles))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class HotReloadFilesService : Service
{
    public static IVirtualPathProvider UseVirtualFiles { get; set; }
    public static string DefaultPattern { get; set; } = "*";
    public static List<string> ExcludePatterns { get; } = ["*.sqlite", "*.db", "*.cs", //monitored by dotnet watch
 "*.ts", //watch on generated .js instead
 "*.log", //exclude log files
 "*.csv"];

    public static TimeSpan LongPollDuration = TimeSpan.FromSeconds(60);
    public static TimeSpan CheckDelay = TimeSpan.FromMilliseconds(50);
    // No delay sometimes causes repetitive loop 
    public static TimeSpan ModifiedDelay = TimeSpan.FromMilliseconds(50);
    public async Task<HotReloadPageResponse> Any(HotReloadFiles request)
    {
        var vfs = UseVirtualFiles ?? VirtualFileSources;
        // Remove embedded ResourceVirtualFiles from scan list
        if (vfs is MultiVirtualFiles multiVfs)
            vfs = new MultiVirtualFiles(multiVfs.ChildProviders.Where(x => !(x is ResourceVirtualFiles)).ToArray());
        var startedAt = DateTime.UtcNow;
        var maxLastModified = DateTime.MinValue;
        IVirtualFile maxLastFile = null;
        var shouldReload = false;
        while (DateTime.UtcNow - startedAt < LongPollDuration)
        {
            maxLastModified = DateTime.MinValue;
            var patterns = (!string.IsNullOrEmpty(request.Pattern) ? request.Pattern : DefaultPattern).Split(';');
            foreach (var pattern in patterns)
            {
                var files = vfs.GetAllMatchingFiles(pattern.Trim()).ToList();
                foreach (var file in files)
                {
                    if (ExcludePatterns.Any(exclude => file.Name.Glob(exclude)))
                        continue;
                    file.Refresh();
                    if (file.LastModified > maxLastModified)
                    {
                        maxLastModified = file.LastModified;
                        maxLastFile = file;
                    }
                }
            }

            if (string.IsNullOrEmpty(request.ETag))
                return new HotReloadPageResponse
                {
                    ETag = maxLastModified.Ticks.ToString()
                };
            shouldReload = maxLastModified != DateTime.MinValue && maxLastModified.Ticks > long.Parse(request.ETag);
            if (shouldReload)
            {
                await Task.Delay(ModifiedDelay).ConfigAwait();
                break;
            }

            await Task.Delay(CheckDelay).ConfigAwait();
        }

        return new HotReloadPageResponse
        {
            Reload = shouldReload,
            ETag = maxLastModified.Ticks.ToString(),
            LastUpdatedPath = maxLastFile?.VirtualPath,
        };
    }
}
--------------------------------------------------------------------------------
ID: 25
ServiceStack Attribute Information ID: 13
Class Name: StoreFileUploadService
Class Example:
[DefaultRequest(typeof(StoreFileUpload))]
public class StoreFileUploadService : Service
{
    public async Task<object> Any(StoreFileUpload request)
    {
        var feature = AssertPlugin<FilesUploadFeature>();
        var location = feature.AssertLocation(request.Name, Request);
        if (Request.Files.Length == 0)
            throw HttpError.BadRequest("No files uploaded");
        var session = await Request.GetSessionAsync();
        var results = new List<string>();
        foreach (var file in Request.Files)
        {
            var path = await feature.UploadFileAsync(location, Request, session, file).ConfigAwait();
            if (path == null)
                continue;
            results.Add(path);
        }

        return new StoreFileUploadResponse
        {
            Results = results,
        };
    }
}
--------------------------------------------------------------------------------
ID: 26
ServiceStack Attribute Information ID: 13
Class Name: GetFileUploadService
Class Example:
[DefaultRequest(typeof(GetFileUpload))]
public class GetFileUploadService : Service
{
    public async Task<object> Get(GetFileUpload request)
    {
        var feature = AssertPlugin<FilesUploadFeature>();
        var(name, path) = request.Name != null ? (request.Name, request.Path) : feature.GetNameAndPath(Request.PathInfo);
        var location = feature.AssertLocation(name, Request);
        var session = await Request.GetSessionAsync();
        var vfsPath = location.Name.CombineWith(path);
        var file = await feature.GetFileAsync(location, Request, session, vfsPath).ConfigAwait();
        if (file == null)
            throw HttpError.NotFound(feature.Errors.FileNotExists);
        var asAttachment = request.Attachment ?? !FileExt.WebFormats.Contains(path.LastRightPart('.'));
        return new HttpResult(file, asAttachment: asAttachment);
    }
}
--------------------------------------------------------------------------------
ID: 27
ServiceStack Attribute Information ID: 13
Class Name: ReplaceFileUploadService
Class Example:
[DefaultRequest(typeof(ReplaceFileUpload))]
public class ReplaceFileUploadService : Service
{
    public async Task<object> Put(ReplaceFileUpload request)
    {
        var feature = AssertPlugin<FilesUploadFeature>();
        var(name, path) = request.Name != null ? (request.Name, request.Path) : feature.GetNameAndPath(Request.PathInfo);
        var location = feature.AssertLocation(name, Request);
        var session = await Request.GetSessionAsync();
        var vfsPath = location.Name.CombineWith(path);
        await feature.ReplaceFileAsync(location, Request, session, vfsPath).ConfigAwait();
        return new ReplaceFileUploadResponse();
    }
}
--------------------------------------------------------------------------------
ID: 28
ServiceStack Attribute Information ID: 13
Class Name: DeleteFileUploadService
Class Example:
[DefaultRequest(typeof(DeleteFileUpload))]
public class DeleteFileUploadService : Service
{
    public async Task<object> Delete(DeleteFileUpload request)
    {
        var feature = AssertPlugin<FilesUploadFeature>();
        var(name, path) = request.Name != null ? (request.Name, request.Path) : feature.GetNameAndPath(Request.PathInfo);
        var location = feature.AssertLocation(name, Request);
        var session = await Request.GetSessionAsync();
        var vfsPath = location.Name.CombineWith(path);
        var result = await feature.DeleteFileAsync(location, Request, session, vfsPath).ConfigAwait();
        return new DeleteFileUploadResponse
        {
            Result = result
        };
    }
}
--------------------------------------------------------------------------------
ID: 29
ServiceStack Attribute Information ID: 13
Class Name: CancellableRequestService
Class Example:
[DefaultRequest(typeof(CancelRequest))]
public class CancellableRequestService : Service
{
    public object Any(CancelRequest request)
    {
        if (request.Tag.IsNullOrEmpty())
            throw new ArgumentNullException(nameof(request.Tag));
        using var cancellableReq = base.Request.GetCancellableRequest(request.Tag);
        if (cancellableReq == null)
            throw HttpError.NotFound($"Request with Tag does not exist");
        cancellableReq.TokenSource.Cancel();
        return new CancelRequestResponse
        {
            Tag = request.Tag,
            Elapsed = cancellableReq.Elapsed,
        };
    }
}
--------------------------------------------------------------------------------
ID: 30
ServiceStack Attribute Information ID: 13
Class Name: MetadataNavService
Class Example:
[DefaultRequest(typeof(GetNavItems))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class MetadataNavService : Service
{
    public object Get(GetNavItems request)
    {
        return request.Name != null ? new GetNavItemsResponse
        {
            BaseUrl = Request.GetBaseUrl(),
            Results = ViewUtils.NavItemsMap.TryGetValue(request.Name, out var navItems) ? navItems : TypeConstants<NavItem>.EmptyList,
        }

        : new GetNavItemsResponse
        {
            BaseUrl = Request.GetBaseUrl(),
            Results = ViewUtils.NavItems,
            NavItemsMap = ViewUtils.NavItemsMap,
        };
    }
}
--------------------------------------------------------------------------------
ID: 31
ServiceStack Attribute Information ID: 13
Class Name: MetadataAppService
Class Example:
[DefaultRequest(typeof(MetadataApp))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class MetadataAppService(INativeTypesMetadata nativeTypesMetadata) : Service
{
    public AppMetadata Any(MetadataApp request) => nativeTypesMetadata.ToAppMetadata(Request);
}
--------------------------------------------------------------------------------
ID: 32
ServiceStack Attribute Information ID: 13
Class Name: DesktopFileService
Class Example:
[DefaultRequest(typeof(DesktopFile))]
public partial class DesktopFileService : Service
{
    public async Task Get(DesktopFile request)
    {
        AssertFile(request.File);
        var appSettingsDir = GetDesktopFilesDirectory();
        var filePath = Path.Combine(appSettingsDir, request.File);
        using var fs = new FileInfo(filePath).OpenRead();
        if (fs == null)
            throw new FileNotFoundException();
        Response.ContentType = MimeTypes.GetMimeType(filePath);
        await Response.EndRequestAsync(afterHeaders: async res =>
        {
            await fs.CopyToAsync(Response.OutputStream).ConfigAwait();
        }).ConfigAwait();
    }

    public Task Post(DesktopFile request) => Put(request);
    public async Task Put(DesktopFile request)
    {
        AssertFile(request.File);
        var appSettingsDir = GetDesktopFilesDirectory();
        FileSystemVirtualFiles.AssertDirectory(appSettingsDir);
        var filePath = Path.Combine(appSettingsDir, request.File);
        var tmpFilePath = Path.Combine(appSettingsDir, request.File + ".tmp");
        try
        {
            File.Delete(tmpFilePath);
        }
        catch
        {
        }

        using (var fs = new FileInfo(tmpFilePath).Open(FileMode.OpenOrCreate))
        {
            await request.RequestStream.CopyToAsync(fs).ConfigAwait();
        }

        try
        {
            File.Delete(filePath);
        }
        catch
        {
        }

        File.Move(tmpFilePath, filePath);
    }

    public void Delete(DesktopFile request)
    {
        AssertFile(request.File);
        var appSettingsDir = GetDesktopFilesDirectory();
        var filePath = Path.Combine(appSettingsDir, request.File);
        try
        {
            File.Delete(filePath);
        }
        catch
        {
        }
    }

    public static void AssertFile(string file)
    {
        if (string.IsNullOrEmpty(file))
            throw new ArgumentNullException(nameof(DesktopFile.File));
        if (file.IndexOf("..", StringComparison.Ordinal) >= 0 || file.IndexOfAny(Path.GetInvalidFileNameChars()) >= 0)
            throw new NotSupportedException("Invalid File Name");
    }

    private string GetDesktopFilesDirectory()
    {
        if (Request.PathInfo.StartsWith("/desktop/downloads/"))
            return KnownFolders.GetPath(KnownFolders.Downloads);
        var appName = DesktopConfig.Instance.AppName;
        if (string.IsNullOrEmpty(appName))
            throw new NotSupportedException("DesktopConfig.Instance.AppName is required");
        var homeDir = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        var appSettingsPath = Path.Combine(homeDir, ".servicestack", "desktop", appName);
        return appSettingsPath;
    }
}
--------------------------------------------------------------------------------
ID: 33
ServiceStack Attribute Information ID: 13
Class Name: DesktopDownloadUrlService
Class Example:
[DefaultRequest(typeof(DesktopDownloadUrl))]
public partial class DesktopDownloadUrlService : Service
{
    public async Task Any(DesktopDownloadUrl request)
    {
        DesktopFileService.AssertFile(request.File);
        var url = request.Url.IndexOf("://", StringComparison.Ordinal) >= 0 ? request.Url.UrlDecode() : Request.GetBaseUrl().CombineWith(request.Url.UrlDecode());
#pragma warning disable CS0618, SYSLIB0014
        var webReq = WebRequest.CreateHttp(url);
#pragma warning restore CS0618, SYSLIB0014
        var httpReq = (IHttpRequest)base.Request;
        ProxyFeatureHandler.InitWebRequest(httpReq, webReq);
        if (httpReq.ContentLength > 0)
        {
            using (request.RequestStream)
            using (var requestStream = await webReq.GetRequestStreamAsync().ConfigAwait())
            {
                await request.RequestStream.WriteToAsync(requestStream).ConfigAwait();
            }
        }

        var downloadFile = Path.Combine(KnownFolders.GetPath(KnownFolders.Downloads), request.File);
        try
        {
            File.Delete(downloadFile);
        }
        catch
        {
        }

        using (var webRes = await webReq.GetResponseAsync().ConfigAwait())
        using (var resStream = webRes.ResponseStream())
        using (var fs = new FileInfo(downloadFile).Open(FileMode.OpenOrCreate))
        {
            await resStream.CopyToAsync(fs).ConfigAwait();
        }

        await Response.EndRequestAsync().ConfigAwait();
        if (request.Open)
        {
            var p = new Process
            {
                StartInfo = request.Start != null ? new ProcessStartInfo(request.Start, downloadFile)
                {
                    UseShellExecute = true
                }

                : new ProcessStartInfo(downloadFile)
                {
                    UseShellExecute = true
                }
            };
            p.Start();
        }
    }
}
--------------------------------------------------------------------------------
ID: 34
ServiceStack Attribute Information ID: 13
Class Name: DesktopScriptServices
Class Example:
[DefaultRequest(typeof(EvalScript))]
public partial class DesktopScriptServices : Service
{
    public static ILog log = LogManager.GetLogger(typeof(DesktopScriptServices));
    public async Task Any(EvalScript request)
    {
        var feature = HostContext.AssertPlugin<DesktopFeature>();
        await RequestUtils.AssertAccessRoleAsync(base.Request, accessRole: feature.AccessRole, authSecret: request.AuthSecret);
        var appHost = HostContext.AppHost;
        string script;
        var method = ((script = request.EvaluateScript) != null ? nameof(request.EvaluateScript) : (script = request.EvaluateCode) != null ? nameof(request.EvaluateCode) : (script = request.EvaluateLisp) != null ? nameof(request.EvaluateLisp) : (script = request.RenderScript) != null ? nameof(request.RenderScript) : (script = request.RenderCode) != null ? nameof(request.RenderCode) : (script = request.RenderLisp) != null ? nameof(request.RenderLisp) : null) ?? ((script = request.EvaluateScriptAsync) != null ? nameof(request.EvaluateScriptAsync) : (script = request.EvaluateCodeAsync) != null ? nameof(request.EvaluateCodeAsync) : (script = request.EvaluateLispAsync) != null ? nameof(request.EvaluateLispAsync) : (script = request.RenderScriptAsync) != null ? nameof(request.RenderScriptAsync) : (script = request.RenderCodeAsync) != null ? nameof(request.RenderCodeAsync) : (script = request.RenderLispAsync) != null ? nameof(request.RenderLispAsync) : null) ?? throw new ArgumentNullException(nameof(request.EvaluateCode));
        async Task HandleExceptionAsync(Exception e)
        {
            log.Error(e.Message, e);
            base.Response.StatusCode = 500;
            base.Response.StatusDescription = e.GetType().Name;
            base.Response.ContentType = MimeTypes.PlainText;
            await base.Response.OutputStream.WriteAsync(MemoryProvider.Instance.ToUtf8(e.ToString().AsSpan())).ConfigAwait();
            await base.Response.EndRequestAsync(skipHeaders: true).ConfigAwait();
        }

        async Task SetResult(object value, string resultType = " result")
        {
            base.Response.ContentType = MimeTypes.Json;
            base.Response.StatusCode = 200;
            base.Response.StatusDescription = method + resultType;
            await base.Response.EndRequestAsync(skipHeaders: false, async res =>
            {
                using var ms = MemoryStreamFactory.GetStream();
                JsonSerializer.SerializeToStream(value, ms);
                ms.Position = 0;
                await ms.CopyToAsync(base.Response.OutputStream).ConfigAwait();
            }).ConfigAwait();
        }

        async Task SetOutput(PageResult result)
        {
            base.Response.StatusCode = 200;
            base.Response.StatusDescription = method + " result";
            base.Response.ContentType = MimeTypes.PlainText;
            await base.Response.EndRequestAsync(skipHeaders: false, async res =>
            {
                using var ms = MemoryStreamFactory.GetStream();
                await result.RenderToStreamAsync(ms).ConfigAwait();
                ms.Position = 0;
                await ms.CopyToAsync(res.OutputStream).ConfigAwait();
            }).ConfigAwait();
        }

        var args = new Dictionary<string, object>
        {
            [ScriptConstants.Request] = base.Request,
        };
        if (method.EqualsIgnoreCase(nameof(ScriptTemplateUtils.EvaluateScript)))
            await SetResult(await appHost.ScriptContext.EvaluateAsync(script, args)).ConfigAwait();
        else if (method.EqualsIgnoreCase(nameof(ScriptTemplateUtils.RenderScript)))
            await SetOutput(new PageResult(appHost.ScriptContext.SharpScriptPage(script)).AssignArgs(args)).ConfigAwait();
        else if (method.EqualsIgnoreCase(nameof(ScriptCodeUtils.EvaluateCode)))
            await SetResult(await appHost.ScriptContext.EvaluateCodeAsync(ScriptCodeUtils.EnsureReturn(script), args)).ConfigAwait();
        else if (method.EqualsIgnoreCase(nameof(ScriptCodeUtils.RenderCode)))
            await SetOutput(new PageResult(appHost.ScriptContext.CodeSharpPage(script)).AssignArgs(args)).ConfigAwait();
        else if (method.EqualsIgnoreCase(nameof(ScriptLispUtils.EvaluateLisp)))
            await SetResult(await appHost.ScriptContext.EvaluateLispAsync(ScriptLispUtils.EnsureReturn(script), args)).ConfigAwait();
        else if (method.EqualsIgnoreCase(nameof(ScriptLispUtils.RenderLisp)))
            await SetOutput(new PageResult(appHost.ScriptContext.LispSharpPage(script)).AssignArgs(args)).ConfigAwait();
        if (base.Response.IsClosed)
            return;
        async Task setResultAsync(Task<object> valueTask, string resultType = " result")
        {
            try
            {
                base.Response.ContentType = MimeTypes.Json;
                base.Response.StatusCode = 200;
                base.Response.StatusDescription = method + resultType;
                await base.Response.EndRequestAsync(skipHeaders: false, async res =>
                {
                    using var ms = MemoryStreamFactory.GetStream();
                    JsonSerializer.SerializeToStream(await valueTask.ConfigAwait(), ms);
                    await ms.CopyToAsync(base.Response.OutputStream).ConfigAwait();
                }).ConfigAwait();
            }
            catch (Exception e)
            {
                await HandleExceptionAsync(e).ConfigAwait();
            }
        }

        async Task setOutputAsync(PageResult result)
        {
            try
            {
                base.Response.StatusCode = 200;
                base.Response.StatusDescription = method + " async result";
                base.Response.ContentType = MimeTypes.PlainText;
                await base.Response.EndRequestAsync(skipHeaders: false, async res =>
                {
                    using var ms = MemoryStreamFactory.GetStream();
                    await result.RenderToStreamAsync(ms).ConfigAwait();
                    await ms.CopyToAsync(res.OutputStream).ConfigAwait();
                }).ConfigAwait();
            }
            catch (Exception e)
            {
                await HandleExceptionAsync(e).ConfigAwait();
            }
        }

        if (method.EqualsIgnoreCase(nameof(ScriptTemplateUtils.EvaluateScriptAsync)))
            await Task.Run(async () => await setResultAsync(appHost.ScriptContext.EvaluateAsync(script, args), " async result").ConfigAwait()).ConfigAwait();
        else if (method.EqualsIgnoreCase(nameof(ScriptTemplateUtils.RenderScriptAsync)))
            await Task.Run(async () => await setOutputAsync(new PageResult(appHost.ScriptContext.SharpScriptPage(script)).AssignArgs(args)).ConfigAwait()).ConfigAwait();
        else if (method.EqualsIgnoreCase(nameof(ScriptCodeUtils.EvaluateCodeAsync)))
            await Task.Run(async () => await setResultAsync(appHost.ScriptContext.EvaluateCodeAsync(ScriptCodeUtils.EnsureReturn(script), args), " async result").ConfigAwait()).ConfigAwait();
        else if (method.EqualsIgnoreCase(nameof(ScriptCodeUtils.RenderCodeAsync)))
            await Task.Run(async () => await setOutputAsync(new PageResult(appHost.ScriptContext.CodeSharpPage(script)).AssignArgs(args)).ConfigAwait()).ConfigAwait();
        else if (method.EqualsIgnoreCase(nameof(ScriptLispUtils.EvaluateLispAsync)))
            await Task.Run(async () => await setResultAsync(appHost.ScriptContext.EvaluateLispAsync(ScriptLispUtils.EnsureReturn(script), args), " async result").ConfigAwait()).ConfigAwait();
        else if (method.EqualsIgnoreCase(nameof(ScriptLispUtils.RenderLispAsync)))
            await Task.Run(async () => await setOutputAsync(new PageResult(appHost.ScriptContext.LispSharpPage(script)).AssignArgs(args)).ConfigAwait()).ConfigAwait();
        else
            throw new NotSupportedException($"Unsupported script API '{method}', supported: " + "EvaluateScript/Async, EvaluateCode/Async, EvaluateLisp/Async");
    }
}
--------------------------------------------------------------------------------
ID: 35
ServiceStack Attribute Information ID: 13
Class Name: PostmanService
Class Example:
[DefaultRequest(typeof(Postman))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class PostmanService : Service
{
    [AddHeader(ContentType = MimeTypes.Json)]
    public object Any(Postman request)
    {
        var feature = HostContext.GetPlugin<PostmanFeature>();
        if (request.ExportSession)
        {
            if (feature.EnableSessionExport != true)
                throw new ArgumentException("PostmanFeature.EnableSessionExport is not enabled");
            var url = Request.GetBaseUrl().CombineWith(Request.PathInfo).AddQueryParam("ssopt", Request.GetItemOrCookie(SessionFeature.SessionOptionsKey)).AddQueryParam("sspid", Request.GetPermanentSessionId()).AddQueryParam("ssid", Request.GetTemporarySessionId());
            return HttpResult.Redirect(url);
        }

        var id = HostContext.AppHost.CreateSessionId();
        var ret = new PostmanCollection
        {
            info = new PostmanCollectionInfo
            {
                version = "1",
                name = HostContext.AppHost.ServiceName,
                schema = "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
            },
            item = GetRequests(request, id, HostContext.Metadata.OperationsMap.Values),
        };
        return ret;
    }

    public List<PostmanRequest> GetRequests(Postman request, string parentId, IEnumerable<Operation> operations)
    {
        var ret = new List<PostmanRequest>();
        var feature = HostContext.GetPlugin<PostmanFeature>();
        var headers = feature.Headers ?? ("Accept: " + MimeTypes.Json);
        if (Response is IHttpResponse httpRes)
        {
            if (request.ssopt != null || request.sspid != null || request.ssid != null)
            {
                if (feature.EnableSessionExport != true)
                    throw new ArgumentException("PostmanFeature.EnableSessionExport is not enabled");
            }

            if (request.ssopt != null)
            {
                Request.AddSessionOptions(request.ssopt);
            }

            if (request.sspid != null)
            {
                httpRes.Cookies.AddPermanentCookie(SessionFeature.PermanentSessionId, request.sspid);
            }

            if (request.ssid != null)
            {
                httpRes.Cookies.AddSessionCookie(SessionFeature.SessionId, request.ssid, (HostContext.Config.UseSecureCookies && Request.IsSecureConnection));
            }
        }

        foreach (var op in operations)
        {
            Uri url = null;
            if (!HostContext.Metadata.IsVisible(base.Request, op))
                continue;
            var allVerbs = new HashSet<string>(op.Actions.Concat(op.Routes.SelectMany(x => x.Verbs)).SelectMany(x => x == ActionContext.AnyAction ? feature.DefaultVerbsForAny : [x]));
            var propertyTypes = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            op.RequestType.GetSerializableFields().Each(x => propertyTypes[x.Name] = x.FieldType.AsFriendlyName(feature));
            op.RequestType.GetSerializableProperties().Each(x => propertyTypes[x.Name] = x.PropertyType.AsFriendlyName(feature));
            foreach (var route in op.Routes)
            {
                var routeVerbs = route.Verbs.Contains(ActionContext.AnyAction) ? feature.DefaultVerbsForAny.ToArray() : route.Verbs;
                var restRoute = route.ToRestRoute();
                foreach (var verb in routeVerbs)
                {
                    allVerbs.Remove(verb); //exclude handled verbs
                    var routeData = restRoute.QueryStringVariables.Map(x => new PostmanData { key = x, value = "", type = "text", }).ApplyPropertyTypes(propertyTypes);
                    url = new Uri(Request.GetBaseUrl().CombineWith(restRoute.Path.ToPostmanPathVariables()));
                    ret.Add(new PostmanRequest { request = new PostmanRequestDetails { url = new PostmanRequestUrl { raw = url.OriginalString, host = url.Host, port = url.Port.ToString(), protocol = url.Scheme, path = url.LocalPath.SplitPaths(), query = !HttpUtils.HasRequestBody(verb) ? routeData.Select(x => x.key).ApplyPropertyTypes(propertyTypes).Map(x => new PostmanRequestKeyValue { key = x.Key, value = x.Value }) : null, variable = restRoute.Variables.Any() ? restRoute.Variables.Map(x => new PostmanRequestKeyValue { key = x }) : null }, method = verb, body = new PostmanRequestBody { formdata = HttpUtils.HasRequestBody(verb) ? routeData : null, }, header = headers, }, name = GetName(feature, request, op.RequestType, restRoute.Path), });
                }
            }

            var emptyRequest = op.RequestType.CreateInstance();
            var virtualPath = emptyRequest.ToReplyUrlOnly();
            var requestParams = propertyTypes.Map(x => new PostmanData { key = x.Key, value = x.Value, type = "text", });
            url = new Uri(Request.GetBaseUrl().CombineWith(virtualPath));
            ret.AddRange(allVerbs.Select(verb => new PostmanRequest { request = new PostmanRequestDetails { url = new PostmanRequestUrl { raw = url.OriginalString, host = url.Host, port = url.Port.ToString(), protocol = url.Scheme, path = url.LocalPath.SplitPaths(), query = !HttpUtils.HasRequestBody(verb) ? requestParams.Select(x => x.key).Where(x => !x.StartsWith(":")).ApplyPropertyTypes(propertyTypes).Map(x => new PostmanRequestKeyValue { key = x.Key, value = x.Value }) : null, variable = url.Segments.Any(x => x.StartsWith(":")) ? url.Segments.Where(x => x.StartsWith(":")).Map(x => new PostmanRequestKeyValue { key = x.Replace(":", ""), value = "" }) : null }, method = verb, body = new PostmanRequestBody { formdata = HttpUtils.HasRequestBody(verb) ? requestParams : null, }, header = headers, }, name = GetName(feature, request, op.RequestType, virtualPath), }));
        }

        return ret;
    }

    public string GetName(PostmanFeature feature, Postman request, Type requestType, string virtualPath)
    {
        var fragments = request.Label ?? feature.DefaultLabelFmt;
        var sb = StringBuilderCache.Allocate();
        foreach (var fragment in fragments)
        {
            var parts = fragment.ToLower().Split(':');
            var asEnglish = parts.Length > 1 && parts[1] == "english";
            if (parts[0] == "type")
            {
                sb.Append(asEnglish ? requestType.Name.ToEnglish() : requestType.Name);
            }
            else if (parts[0] == "route")
            {
                sb.Append(virtualPath);
            }
            else
            {
                sb.Append(parts[0]);
            }
        }

        return StringBuilderCache.ReturnAndFree(sb);
    }
}
--------------------------------------------------------------------------------
ID: 36
ServiceStack Attribute Information ID: 13
Class Name: RequestLogsService
Class Example:
[DefaultRequest(typeof(RequestLogs))]
public class RequestLogsService(IRequestLogger requestLogger) : Service
{
    private static readonly Dictionary<string, string> Usage = new()
    {
        {
            "int BeforeSecs",
            "Requests before elapsed time"
        },
        {
            "int AfterSecs",
            "Requests after elapsed time"
        },
        {
            "string IpAddress",
            "Requests matching Ip Address"
        },
        {
            "string ForwardedFor",
            "Requests matching Forwarded Ip Address"
        },
        {
            "string UserAuthId",
            "Requests matching UserAuthId"
        },
        {
            "string SessionId",
            "Requests matching SessionId"
        },
        {
            "string Referer",
            "Requests matching Http Referer"
        },
        {
            "string PathInfo",
            "Requests matching PathInfo"
        },
        {
            "int BeforeId",
            "Requests before RequestLog Id"
        },
        {
            "int AfterId",
            "Requests after RequestLog Id"
        },
        {
            "bool WithErrors",
            "Requests with errors"
        },
        {
            "bool EnableSessionTracking",
            "Turn On/Off Session Tracking"
        },
        {
            "bool EnableResponseTracking",
            "Turn On/Off Tracking of Responses"
        },
        {
            "bool EnableErrorTracking",
            "Turn On/Off Tracking of Errors"
        },
        {
            "TimeSpan DurationLongerThan",
            "Requests with a duration longer than"
        },
        {
            "TimeSpan DurationLessThan",
            "Requests with a duration less than"
        },
        {
            "int Skip",
            "Skip past N results"
        },
        {
            "int Take",
            "Only look at last N results"
        },
        {
            "string OrderBy",
            "Order results by specified fields, e.g. SessionId,-Id"
        },
    };
    public async Task<object> Any(RequestLogs request)
    {
        var feature = AssertPlugin<RequestLogsFeature>();
        if (!HostContext.DebugMode)
            await RequiredRoleAttribute.AssertRequiredRoleAsync(Request, feature.AccessRole);
        if (request.EnableSessionTracking.HasValue)
            requestLogger.EnableSessionTracking = request.EnableSessionTracking.Value;
        var defaultLimit = feature?.DefaultLimit ?? 100;
        var now = DateTime.UtcNow;
        var snapshot = requestLogger.GetLatestLogs(null);
        var logs = snapshot.AsQueryable();
        if (request.BeforeSecs.HasValue)
            logs = logs.Where(x => (now - x.DateTime) <= TimeSpan.FromSeconds(request.BeforeSecs.Value));
        if (request.AfterSecs.HasValue)
            logs = logs.Where(x => (now - x.DateTime) > TimeSpan.FromSeconds(request.AfterSecs.Value));
        if (!request.OperationName.IsNullOrEmpty())
            logs = logs.Where(x => x.OperationName == request.OperationName);
        if (!request.IpAddress.IsNullOrEmpty())
            logs = logs.Where(x => x.IpAddress == request.IpAddress);
        if (!request.ForwardedFor.IsNullOrEmpty())
            logs = logs.Where(x => x.ForwardedFor == request.ForwardedFor);
        if (!request.UserAuthId.IsNullOrEmpty())
            logs = logs.Where(x => x.UserAuthId == request.UserAuthId);
        if (!request.SessionId.IsNullOrEmpty())
            logs = logs.Where(x => x.SessionId == request.SessionId);
        if (!request.Referer.IsNullOrEmpty())
            logs = logs.Where(x => x.Referer == request.Referer);
        if (!request.PathInfo.IsNullOrEmpty())
            logs = logs.Where(x => x.PathInfo == request.PathInfo);
        if (!request.Ids.IsEmpty())
            logs = logs.Where(x => request.Ids.Contains(x.Id));
        if (request.BeforeId.HasValue)
            logs = logs.Where(x => x.Id <= request.BeforeId);
        if (request.AfterId.HasValue)
            logs = logs.Where(x => x.Id > request.AfterId);
        if (request.WithErrors.HasValue)
            logs = request.WithErrors.Value ? logs.Where(x => x.ErrorResponse != null || x.StatusCode >= 400) : logs.Where(x => x.ErrorResponse == null);
        if (request.DurationLongerThan.HasValue)
            logs = logs.Where(x => x.RequestDuration > request.DurationLongerThan.Value);
        if (request.DurationLessThan.HasValue)
            logs = logs.Where(x => x.RequestDuration < request.DurationLessThan.Value);
        var query = string.IsNullOrEmpty(request.OrderBy) ? logs.OrderByDescending(x => x.Id) : logs.OrderBy(request.OrderBy);
        var results = query.Skip(request.Skip);
        results = results.Take(request.Take.GetValueOrDefault(defaultLimit));
        return new RequestLogsResponse
        {
            Results = results.ToList(),
            Total = snapshot.Count,
            Usage = Usage,
        };
    }
}
--------------------------------------------------------------------------------
ID: 37
ServiceStack Attribute Information ID: 13
Class Name: GetApiKeysService
Class Example:
[Authenticate]
[DefaultRequest(typeof(GetApiKeys))]
public class GetApiKeysService : Service
{
    public async Task<object> Any(GetApiKeys request)
    {
        var apiKeyAuth = this.Request.AssertValidApiKeyRequest();
        if (string.IsNullOrEmpty(request.Environment) && apiKeyAuth.Environments.Length != 1)
            throw new ArgumentNullException(nameof(request.Environment));
        var env = request.Environment ?? apiKeyAuth.Environments[0];
        var manageApiKeys = HostContext.AppHost.AssertManageApiKeysAsync(Request);
        using (manageApiKeys as IDisposable)
        {
            var userId = (await GetSessionAsync().ConfigAwait()).UserAuthId;
            return new GetApiKeysResponse
            {
                Results = (await manageApiKeys.GetUserApiKeysAsync(userId).ConfigAwait()).Where(x => x.Environment == env).Map(k => new UserApiKey { Key = k.Id, KeyType = k.KeyType, ExpiryDate = k.ExpiryDate, })
            };
        }
    }
}
--------------------------------------------------------------------------------
ID: 38
ServiceStack Attribute Information ID: 13
Class Name: RegenerateApiKeysService
Class Example:
[Authenticate]
[DefaultRequest(typeof(RegenerateApiKeys))]
public class RegenerateApiKeysService : Service
{
    public async Task<object> Any(RegenerateApiKeys request)
    {
        var apiKeyAuth = this.Request.AssertValidApiKeyRequest();
        if (string.IsNullOrEmpty(request.Environment) && apiKeyAuth.Environments.Length != 1)
            throw new ArgumentNullException("Environment");
        var env = request.Environment ?? apiKeyAuth.Environments[0];
        var manageApiKeys = HostContext.AppHost.AssertManageApiKeysAsync(Request);
        using (manageApiKeys as IDisposable)
        {
            var userId = (await GetSessionAsync().ConfigAwait()).UserAuthId;
            var updateKeys = (await manageApiKeys.GetUserApiKeysAsync(userId).ConfigAwait()).Where(x => x.Environment == env).ToList();
            updateKeys.Each(x => x.CancelledDate = DateTime.UtcNow);
            var newKeys = apiKeyAuth.GenerateNewApiKeys(userId, env);
            updateKeys.AddRange(newKeys);
            await manageApiKeys.StoreAllAsync(updateKeys).ConfigAwait();
            return new RegenerateApiKeysResponse
            {
                Results = newKeys.Map(k => new UserApiKey { Key = k.Id, KeyType = k.KeyType, ExpiryDate = k.ExpiryDate, })
            };
        }
    }
}
--------------------------------------------------------------------------------
ID: 39
ServiceStack Attribute Information ID: 13
Class Name: AuthenticateService
Class Example:
[DefaultRequest(typeof(Authenticate))]
[ErrorView(nameof(ServiceStack.Authenticate.ErrorView))]
public class AuthenticateService : Service
{
    public const string BasicProvider = "basic";
    public const string ApiKeyProvider = "apikey";
    public const string JwtProvider = "jwt";
    public const string CredentialsProvider = "credentials";
    public const string WindowsAuthProvider = "windowsauth";
    public const string CredentialsAliasProvider = "login";
    public const string LogoutAction = "logout";
    public const string DigestProvider = "digest";
    public const string IdentityProvider = "identity";
    public static Func<IAuthSession> CurrentSessionFactory { get; set; }
    public static ValidateFn ValidateFn { get; set; }
    public static string DefaultOAuthProvider { get; private set; }
    public static string DefaultOAuthRealm { get; private set; }
    public static string HtmlRedirect { get; internal set; }
    public static string HtmlRedirectAccessDenied { get; internal set; }
    public static string HtmlRedirectReturnParam { get; internal set; }
    public static bool HtmlRedirectReturnPathOnly { get; internal set; }
    public static Func<AuthFilterContext, object> AuthResponseDecorator { get; internal set; }

    internal static IAuthProvider[] AuthProviders;
    internal static IAuthWithRequest[] AuthWithRequestProviders;
#pragma warning disable CS0618
    internal static IAuthWithRequestSync[] AuthWithRequestSyncProviders;
#pragma warning restore CS0618
    internal static IAuthResponseFilter[] AuthResponseFilters;
    static AuthenticateService()
    {
        Reset();
    }

    internal static void Reset()
    {
        CurrentSessionFactory = () => new AuthUserSession();
        AuthProviders = TypeConstants<IAuthProvider>.EmptyArray;
        AuthResponseFilters = TypeConstants<IAuthResponseFilter>.EmptyArray;
    }

    /// <summary>
    /// Get AuthProviders Registered in AuthFeature Plugin.
    /// </summary>
    /// <param name = "provider">specific provider, or null for all providers</param>
    /// <returns></returns>
    /// <exception cref = "Exception"></exception>
    public static IAuthProvider[] GetAuthProviders(string provider = null)
    {
        if (AuthProviders == null || AuthProviders.Length == 0)
            return TypeConstants<IAuthProvider>.EmptyArray;
        if (provider != null)
        {
            var matchingOAuthProviders = AuthProviders.Where(x => string.IsNullOrEmpty(provider) || x.Provider == provider).ToArray();
            return matchingOAuthProviders;
        }

        return AuthProviders;
    }

#pragma warning disable 618
    [Obsolete("Use GetUserSessionSourceAsync()")]
    public static IUserSessionSource GetUserSessionSource()
    {
        var userSessionSource = HostContext.TryResolve<IUserSessionSource>();
        if (userSessionSource != null)
            return userSessionSource;
        if (AuthProviders != null)
        {
            foreach (var authProvider in AuthProviders)
            {
                // ReSharper disable once SuspiciousTypeConversion.Global
                if (authProvider is IUserSessionSource sessionSource) //don't remove
                    return sessionSource;
            }
        }

        return null;
    }

    public static IUserSessionSourceAsync GetUserSessionSourceAsync()
    {
        var userSessionSource = HostContext.TryResolve<IUserSessionSourceAsync>();
        if (userSessionSource != null)
            return userSessionSource;
        if (AuthProviders != null)
        {
            foreach (var authProvider in AuthProviders)
            {
                // ReSharper disable once SuspiciousTypeConversion.Global
                if (authProvider is IUserSessionSourceAsync sessionSource) //don't remove
                    return sessionSource;
            }
        }

        var sync = GetUserSessionSource();
        if (sync != null)
            return new UserSessionSourceSyncWrapper(sync);
        return null;
    }

    class UserSessionSourceSyncWrapper(IUserSessionSource source) : IUserSessionSourceAsync
    {
        public Task<IAuthSession> GetUserSessionAsync(string userAuthId, CancellationToken token = default)
        {
            return source.GetUserSession(userAuthId).InTask();
        }
    }

#pragma warning restore 618
    /// <summary>
    /// Get specific AuthProvider
    /// </summary>
    /// <param name = "provider"></param>
    /// <returns></returns>
    public static IAuthProvider GetAuthProvider(string provider)
    {
        if (string.IsNullOrEmpty(provider))
            throw new ArgumentNullException(nameof(provider));
        if (AuthProviders.Length == 0)
            return null;
        if (provider == LogoutAction)
            return AuthProviders[0];
        foreach (var authConfig in AuthProviders)
        {
            if (string.Compare(authConfig.Provider, provider, StringComparison.OrdinalIgnoreCase) == 0)
                return authConfig;
        }

        return null;
    }

    public static JwtAuthProviderReader GetJwtAuthProvider() => GetAuthProvider(JwtAuthProviderReader.Name) as JwtAuthProviderReader;
    public static JwtAuthProviderReader GetRequiredJwtAuthProvider()
    {
        var jwtProvider = GetJwtAuthProvider();
        if (jwtProvider == null)
            throw new NotSupportedException("JwtAuthProvider is required but was not registered in AuthFeature's AuthProviders");
        return jwtProvider;
    }

    public static void Init(Func<IAuthSession> sessionFactory, params IAuthProvider[] authProviders)
    {
        if (authProviders.Length == 0)
            throw new ArgumentNullException(nameof(authProviders));
        DefaultOAuthProvider = authProviders[0].Provider;
        DefaultOAuthRealm = authProviders[0].AuthRealm;
        AuthProviders = authProviders;
        AuthWithRequestProviders = authProviders.OfType<IAuthWithRequest>().ToArray();
#pragma warning disable CS0618
        AuthWithRequestSyncProviders = authProviders.OfType<IAuthWithRequestSync>().ToArray();
#pragma warning restore CS0618
        AuthResponseFilters = authProviders.OfType<IAuthResponseFilter>().ToArray();
        if (sessionFactory != null)
            CurrentSessionFactory = sessionFactory;
    }

    private void AssertAuthProviders()
    {
        if (AuthProviders == null || AuthProviders.Length == 0)
            throw new ConfigurationErrorsException("No OAuth providers have been registered in your AppHost.");
    }

    public void Options(Authenticate request)
    {
    }

    public Task<object> GetAsync(Authenticate request)
    {
        var allowGetAuthRequests = HostContext.AssertPlugin<AuthFeature>().AllowGetAuthenticateRequests;
        // null == allow all Auth Requests or 
        if (allowGetAuthRequests != null && !allowGetAuthRequests(Request))
            throw new NotSupportedException("GET Authenticate requests are disabled, to enable set AuthFeature.AllowGetAuthenticateRequests = req => true");
        return PostAsync(request);
    }

    [Obsolete("Use PostAsync")]
    public object Post(Authenticate request)
    {
        try
        {
            var task = PostAsync(request);
            var response = task.GetResult();
            return response;
        }
        catch (Exception e)
        {
            throw e.UnwrapIfSingleException();
        }
    }

    public Task<object> AnyAsync(AuthenticateLogout request)
    {
        return PostAsync(new Authenticate { provider = LogoutAction });
    }

    public async Task<object> PostAsync(Authenticate request)
    {
        AssertAuthProviders();
        if (ValidateFn != null)
        {
            var validationResponse = ValidateFn(this, Request.Verb, request);
            if (validationResponse != null)
                return validationResponse;
        }

        var authFeature = GetPlugin<AuthFeature>();
        if (request.RememberMe.HasValue)
        {
            var opt = request.RememberMe.GetValueOrDefault(false) ? SessionOptions.Permanent : SessionOptions.Temporary;
            Request.AddSessionOptions(opt);
        }

        var provider = request.provider ?? AuthProviders[0].Provider;
        if (provider == CredentialsAliasProvider)
            provider = CredentialsProvider;
        var authProvider = GetAuthProvider(provider);
        if (authProvider == null)
            throw HttpError.NotFound(ErrorMessages.UnknownAuthProviderFmt.LocalizeFmt(Request, provider.SafeInput()));
        if (LogoutAction.EqualsIgnoreCase(request.provider))
        {
            return await HandleLogoutAsync(request, authProvider);
        }

        if (authProvider is IAuthWithRequest && !base.Request.IsInProcessRequest())
        {
            //IAuthWithRequest normally doesn't call Authenticate directly, but they can to return Auth Info
            //But as AuthenticateService doesn't have [Authenticate] we need to call it manually
            await new AuthenticateAttribute().ExecuteAsync(base.Request, base.Response, request);
            if (base.Response.IsClosed)
                return null;
        }

        var session = await this.GetSessionAsync().ConfigAwait();
        var isHtml = base.Request.ResponseContentType.MatchesContentType(MimeTypes.Html);
        try
        {
            var response = await AuthenticateAsync(request, provider, session, authProvider).ConfigAwait();
            // The above Authenticate call may end an existing session and create a new one so we need
            // to refresh the current session reference.
            session = await this.GetSessionAsync().ConfigAwait();
            if (request.provider == null && !session.IsAuthenticated)
                throw HttpError.Unauthorized(ErrorMessages.NotAuthenticated.Localize(Request));
            var returnUrl = Request.GetReturnUrl();
            var referrerUrl = returnUrl ?? session.ReferrerUrl ?? this.Request.GetHeader(HttpHeaders.Referer) ?? authProvider.CallbackUrl;
            if (authFeature != null)
            {
                if (!string.IsNullOrEmpty(returnUrl))
                    authFeature.ValidateRedirectLinks(Request, referrerUrl);
            }

            var manageRoles = AuthRepositoryAsync as IManageRolesAsync;
            var alreadyAuthenticated = response == null;
            response ??= new AuthenticateResponse
            {
                UserId = session.UserAuthId,
                UserName = session.UserAuthName,
                DisplayName = session.DisplayName ?? session.UserName ?? $"{session.FirstName} {session.LastName}".Trim(),
                SessionId = session.Id,
                ReferrerUrl = referrerUrl,
            };
            if (response is AuthenticateResponse authResponse)
            {
                authResponse.ProfileUrl ??= session.GetProfileUrl();
                if (session.UserAuthId != null && authFeature != null)
                {
                    if (authFeature.IncludeRolesInAuthenticateResponse)
                    {
                        var authSession = authFeature.AuthSecretSession;
                        if (authSession != null && session.UserAuthName == authSession.UserAuthName && session.UserAuthId == authSession.UserAuthId)
                        {
                            authResponse.Roles = session.Roles;
                            authResponse.Permissions = session.Permissions;
                        }

                        authResponse.Roles ??= (manageRoles != null ? (await manageRoles.GetRolesAsync(session.UserAuthId).ConfigAwait())?.ToList() : session.Roles);
                        authResponse.Permissions ??= (manageRoles != null ? (await manageRoles.GetPermissionsAsync(session.UserAuthId).ConfigAwait())?.ToList() : session.Permissions);
                        if (authResponse.Roles?.Contains(RoleNames.Admin) == true)
                            authResponse.Roles.AddDistinctRange(HostContext.Metadata.GetAllRoles());
                    }

                    if (authFeature.IncludeOAuthTokensInAuthenticateResponse && AuthRepositoryAsync != null)
                    {
                        var authDetails = await AuthRepositoryAsync.GetUserAuthDetailsAsync(session.UserAuthId).ConfigAwait();
                        if (authDetails?.Count > 0)
                        {
                            authResponse.Meta ??= new Dictionary<string, string>();
                            foreach (var authDetail in authDetails.Where(x => x.AccessTokenSecret != null))
                            {
                                authResponse.Meta[authDetail.Provider + "-tokens"] = authDetail.AccessTokenSecret + (authDetail.AccessToken != null ? ':' + authDetail.AccessToken : "");
                            }
                        }
                    }
                }

                var authCtx = new AuthFilterContext
                {
                    AuthService = this,
                    AuthProvider = authProvider,
                    AuthRequest = request,
                    AuthResponse = authResponse,
                    ReferrerUrl = referrerUrl,
                    Session = session,
                    AlreadyAuthenticated = alreadyAuthenticated,
                    DidAuthenticate = Request.Items.ContainsKey(Keywords.DidAuthenticate),
                };
                foreach (var responseFilter in AuthResponseFilters)
                {
                    await responseFilter.ExecuteAsync(authCtx);
                }

                if (AuthResponseDecorator != null)
                {
                    var authDecoratorResponse = AuthResponseDecorator(authCtx);
                    if (authDecoratorResponse != response)
                        return authDecoratorResponse;
                }
            }

            if (isHtml && request.provider != null)
            {
                if (alreadyAuthenticated)
                    return this.Redirect(referrerUrl.SetParam("s", "0"));
                if (response is not IHttpResult && !string.IsNullOrEmpty(referrerUrl))
                {
                    return new HttpResult(response)
                    {
                        Location = referrerUrl
                    };
                }
            }

            return response;
        }
        catch (Exception ex)
        {
            if (isHtml && Request.GetErrorView() != null)
                return ex;
            if (ex is HttpError)
            {
                var errorReferrerUrl = this.Request.GetReturnUrl() ?? this.Request.GetHeader(HttpHeaders.Referer);
                if (isHtml && errorReferrerUrl != null && Request.GetParam(Keywords.NoRedirect) == null)
                {
                    errorReferrerUrl = errorReferrerUrl.SetParam("f", ex.Message.Localize(Request));
                    return HttpResult.Redirect(errorReferrerUrl);
                }
            }

            throw;
        }
    }

    private async Task<object> HandleLogoutAsync(Authenticate request, IAuthProvider authProvider)
    {
        var feature = AssertPlugin<AuthFeature>();
        foreach (var handler in feature.OnLogoutAsync)
        {
            try
            {
                await handler(Request).ConfigAwait();
            }
            catch (Exception e)
            {
                LogManager.GetLogger(GetType()).Error("Error in OnLogoutAsync: " + e.Message, e);
            }
        }

        return await authProvider.LogoutAsync(this, request).ConfigAwait();
    }

    [Obsolete("Use AuthenticateAsync")]
    public AuthenticateResponse Authenticate(Authenticate request)
    {
        var task = AuthenticateAsync(request);
        var ret = task.GetResult();
        return ret;
    }

    /// <summary>
    /// Public API entry point to authenticate via code
    /// </summary>
    /// <returns>null; if already authenticated otherwise a populated instance of AuthResponse</returns>
    public async Task<AuthenticateResponse> AuthenticateAsync(Authenticate request, CancellationToken token = default)
    {
        //Remove HTML Content-Type to avoid auth providers issuing browser re-directs
        var hold = this.Request.ResponseContentType;
        try
        {
            this.Request.ResponseContentType = MimeTypes.PlainText;
            if (request.RememberMe.HasValue)
            {
                var opt = request.RememberMe.GetValueOrDefault(false) ? SessionOptions.Permanent : SessionOptions.Temporary;
                base.Request.AddSessionOptions(opt);
            }

            var provider = request.provider ?? AuthProviders[0].Provider;
            var oAuthConfig = GetAuthProvider(provider);
            if (oAuthConfig == null)
                throw HttpError.NotFound(ErrorMessages.UnknownAuthProviderFmt.LocalizeFmt(Request, provider.SafeInput()));
            if (LogoutAction.EqualsIgnoreCase(request.provider))
            {
                return await HandleLogoutAsync(request, oAuthConfig).ConfigAwait() as AuthenticateResponse;
            }

            var result = await AuthenticateAsync(request, provider, await this.GetSessionAsync(token: token).ConfigAwait(), oAuthConfig, token).ConfigAwait();
            if (result is HttpError httpError)
                throw httpError;
            return result as AuthenticateResponse;
        }
        finally
        {
            this.Request.ResponseContentType = hold;
        }
    }

    /// <summary>
    /// The specified <paramref name = "session"/> may change as a side-effect of this method. If
    /// subsequent code relies on current <see cref = "IAuthSession"/> data be sure to reload
    /// the session instance via <see cref = "ServiceExtensions.GetSession(IServiceBase, bool)"/>.
    /// </summary>
    private async Task<object> AuthenticateAsync(Authenticate request, string provider, IAuthSession session, IAuthProvider oAuthConfig, CancellationToken token = default)
    {
        if (request.provider == null && request.UserName == null)
            return null; //Just return sessionInfo if no provider or username is given
        var authFeature = GetPlugin<AuthFeature>();
        if (authFeature?.HasSessionFeature == true)
        {
            var generateNewCookies = authFeature.GenerateNewSessionCookiesOnAuthentication //keep existing session during OAuth flow
            && string.IsNullOrEmpty(Request.QueryString["oauth_token"]) && string.IsNullOrEmpty(Request.QueryString["State"]) && string.IsNullOrEmpty(Request.QueryString["state"]);
            if (generateNewCookies)
                await Request.GenerateNewSessionCookiesAsync(session, token).ConfigAwait();
        }

        var response = await oAuthConfig.AuthenticateAsync(this, session, request, token).ConfigAwait();
        return response;
    }
}
--------------------------------------------------------------------------------
ID: 40
ServiceStack Attribute Information ID: 13
Class Name: ConvertSessionToTokenService
Class Example:
[Authenticate]
[DefaultRequest(typeof(ConvertSessionToToken))]
public class ConvertSessionToTokenService(IIdentityJwtAuthProvider jwtAuthProvider) : Service
{
    public async Task<object> Any(ConvertSessionToToken request)
    {
        if (!Request.AllowConnection(jwtAuthProvider.RequireSecureConnection))
            throw HttpError.Forbidden(ErrorMessages.JwtRequiresSecureConnection.Localize(Request));
        if (Request.ResponseContentType.MatchesContentType(MimeTypes.Html))
            Request.ResponseContentType = MimeTypes.Json;
        var httpResult = new HttpResult(new ConvertSessionToTokenResponse());
        var token = Request.GetJwtToken();
        IAuthSession? session = null;
        UserJwtTokens? userTokens = null;
        var createFromSession = string.IsNullOrEmpty(token);
        if (!createFromSession)
        {
            userTokens = new(token, null);
        }
        else
        {
            session = await Request.GetSessionAsync().ConfigAwait();
            if (createFromSession)
                token = await jwtAuthProvider.CreateBearerTokenAsync(session.UserAuthName, Request).ConfigAwait();
            if (!request.PreserveSession)
            {
                if (session.Id != null)
                    await Request.RemoveSessionAsync(session.Id).ConfigAwait();
                jwtAuthProvider.DeleteCookiesOnJwtCookies.ForEach(name => httpResult.DeleteCookie(Request, name));
                if (jwtAuthProvider.EnableRefreshToken)
                {
                    userTokens = await jwtAuthProvider.CreateBearerAndRefreshTokenAsync(session.UserAuthName, Request).ConfigAwait();
                }
            }

            userTokens ??= new(token, null);
        }

        httpResult.AddCookie(Request, new Cookie(Keywords.TokenCookie, token, Cookies.RootPath) { HttpOnly = true, Secure = Request.IsSecureConnection, Expires = DateTime.UtcNow.Add(jwtAuthProvider.ExpireTokensIn), });
        if (userTokens.RefreshToken is { RefreshTokenExpiry: not null })
        {
            httpResult.AddCookie(Request, new Cookie(Keywords.RefreshTokenCookie, token, Cookies.RootPath) { HttpOnly = true, Secure = Request.IsSecureConnection, Expires = userTokens.RefreshToken.RefreshTokenExpiry.Value, });
        }

        return httpResult;
    }
}
--------------------------------------------------------------------------------
ID: 41
ServiceStack Attribute Information ID: 13
Class Name: GetAccessTokenIdentityService
Class Example:
[DefaultRequest(typeof(GetAccessToken))]
public class GetAccessTokenIdentityService(IIdentityJwtAuthProvider jwtAuthProvider) : Service
{
    public async Task<object> Any(GetAccessToken request)
    {
        if (jwtAuthProvider.RequireSecureConnection && !Request.IsSecureConnection)
            throw HttpError.Forbidden(ErrorMessages.JwtRequiresSecureConnection.Localize(Request));
        var refreshTokenCookie = Request.Cookies.TryGetValue(Keywords.RefreshTokenCookie, out var refTok) ? refTok.Value : null;
        var refreshToken = request.RefreshToken ?? refreshTokenCookie;
        if (refreshToken == null)
            throw HttpError.Forbidden(ErrorMessages.RefreshTokenInvalid.Localize(Request));
        var accessToken = await jwtAuthProvider.CreateAccessTokenFromRefreshTokenAsync(refreshToken, Request).ConfigAwait();
        var httpResult = new HttpResult(new GetAccessTokenResponse()).AddCookie(Request, new Cookie(Keywords.TokenCookie, accessToken, Cookies.RootPath) { HttpOnly = true, Secure = Request.IsSecureConnection, Expires = DateTime.UtcNow.Add(jwtAuthProvider.ExpireTokensIn), });
        return httpResult;
    }
}
--------------------------------------------------------------------------------
ID: 42
ServiceStack Attribute Information ID: 13
Class Name: IdentityAssignRolesService
Class Example:
[DefaultRequest(typeof(AssignRoles))]
public class IdentityAssignRolesService<TUser, TKey>(UserManager<TUser> userManager) : Service where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>
{
    public async Task<object> PostAsync(AssignRoles request)
    {
        if (!Request.IsInProcessRequest())
            await RequiredRoleAttribute.AssertRequiredRoleAsync(Request, RoleNames.Admin);
        if (string.IsNullOrEmpty(request.UserName))
            throw new ArgumentNullException(nameof(request.UserName));
        if (request.Roles == null || request.Roles.Count == 0)
            throw new ArgumentNullException(nameof(request.Roles));
        var user = await userManager.FindByEmailAsync(request.UserName).ConfigAwait();
        if (user == null)
            throw HttpError.NotFound(ErrorMessages.UserNotExists.Localize(Request));
        await userManager.AddToRolesAsync(user, request.Roles);
        var roles = await userManager.GetRolesAsync(user).ConfigAwait();
        return new AssignRolesResponse
        {
            AllRoles = roles.ToList(),
        };
    }
}
--------------------------------------------------------------------------------
ID: 43
ServiceStack Attribute Information ID: 13
Class Name: IdentityUnAssignRolesService
Class Example:
[DefaultRequest(typeof(UnAssignRoles))]
public class IdentityUnAssignRolesService<TUser, TKey>(UserManager<TUser> userManager) : Service where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>
{
    public async Task<object> PostAsync(UnAssignRoles request)
    {
        if (!Request.IsInProcessRequest())
            await RequiredRoleAttribute.AssertRequiredRoleAsync(Request, RoleNames.Admin);
        if (string.IsNullOrEmpty(request.UserName))
            throw new ArgumentNullException(nameof(request.UserName));
        if (request.Roles == null || request.Roles.Count == 0)
            throw new ArgumentNullException(nameof(request.Roles));
        var user = await userManager.FindByEmailAsync(request.UserName).ConfigAwait();
        if (user == null)
            throw HttpError.NotFound(ErrorMessages.UserNotExists.Localize(Request));
        await userManager.RemoveFromRolesAsync(user, request.Roles);
        var roles = await userManager.GetRolesAsync(user).ConfigAwait();
        return new AssignRolesResponse
        {
            AllRoles = roles.ToList(),
        };
    }
}
--------------------------------------------------------------------------------
ID: 44
ServiceStack Attribute Information ID: 13
Class Name: TypesProtoService
Class Example:
[DefaultRequest(typeof(TypesProto))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class TypesProtoService(INativeTypesMetadata metadata) : Service
{
    private string GetBaseUrl(string? baseUrl) => baseUrl ?? HostContext.GetPlugin<NativeTypesFeature>().MetadataTypesConfig.BaseUrl ?? Request.GetBaseUrl();
    [AddHeader(ContentType = MimeTypes.PlainText)]
    public object Get(TypesProto request)
    {
        request.BaseUrl = GetBaseUrl(request.BaseUrl);
        var typesConfig = metadata.GetConfig(request);
        var metadataTypes = metadata.GetMetadataTypes(Request, typesConfig);
        var proto = new GrpcProtoGenerator(typesConfig).GetCode(metadataTypes, base.Request);
        return proto;
    }
}
--------------------------------------------------------------------------------
ID: 45
ServiceStack Attribute Information ID: 13
Class Name: OpenApiService
Class Example:
[AddHeader(DefaultContentType = MimeTypes.Json)]
[DefaultRequest(typeof(OpenApiSpecification))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class OpenApiService : Service
{
    internal static bool UseCamelCaseSchemaPropertyNames { get; set; }
    internal static bool UseLowercaseUnderscoreSchemaPropertyNames { get; set; }
    internal static bool DisableAutoDtoInBodyParam { get; set; }

    internal static Regex ResourceFilterRegex;
    internal static Action<OpenApiDeclaration> ApiDeclarationFilter { get; set; }
    internal static Action<string, OpenApiOperation> OperationFilter { get; set; }
    internal static Action<OpenApiSchema> SchemaFilter { get; set; }
    internal static Action<OpenApiProperty> SchemaPropertyFilter { get; set; }
    internal static string[] AnyRouteVerbs { get; set; }
    internal static string[] InlineSchemaTypesInNamespaces { get; set; }
    internal static Func<Type, bool> IgnoreRequest { get; set; }
    public static Dictionary<string, OpenApiSecuritySchema> SecurityDefinitions { get; set; }
    public static Dictionary<string, List<string>> OperationSecurity { get; set; }

    public object Get(OpenApiSpecification request)
    {
        var map = HostContext.ServiceController.RestPathMap;
        var paths = new List<RestPath>();
        var basePath = new Uri(base.Request.GetBaseUrl());
        var meta = HostContext.Metadata;
        foreach (var key in map.Keys)
        {
            var restPaths = map[key];
            var visiblePaths = restPaths.Where(x => meta.IsVisible(Request, Format.Json, x.RequestType.Name));
            paths.AddRange(visiblePaths);
        }

        var definitions = new Dictionary<string, OpenApiSchema>
        {
            {
                "Object",
                new OpenApiSchema
                {
                    Description = "Object",
                    Type = OpenApiType.Object,
                    Properties = new OrderedDictionary<string, OpenApiProperty>()
                }
            },
        };
        foreach (var restPath in paths.SelectMany(x => x.Verbs.Select(y => new { Value = x, Verb = y })))
        {
            ParseDefinitions(definitions, restPath.Value.RequestType, restPath.Value.Path, restPath.Verb);
        }

        var tags = new Dictionary<string, OpenApiTag>();
        var apiPaths = ParseOperations(paths, definitions, tags);
        var result = new OpenApiDeclaration
        {
            Info = new OpenApiInfo
            {
                Title = HostContext.ServiceName,
                Version = HostContext.Config.ApiVersion,
            },
            Paths = apiPaths,
            BasePath = basePath.AbsolutePath,
            Schemes = [basePath.Scheme], //TODO: get https from config
            Host = basePath.Authority,
            Consumes = ["application/json"],
            Produces = ["application/json"],
            Definitions = definitions.Where(x => !SchemaIdToClrType.ContainsKey(x.Key) || !IsInlineSchema(SchemaIdToClrType[x.Key])).ToDictionary(x => x.Key, x => x.Value),
            Tags = tags.Values.OrderBy(x => x.Name).ToList(),
            Parameters = new Dictionary<string, OpenApiParameter>
            {
                {
                    "Accept",
                    GetAcceptHeaderParameter()
                }
            },
            SecurityDefinitions = SecurityDefinitions,
        };
        if (SchemaFilter != null)
        {
            result.Parameters.Each(x =>
            {
                if (x.Value.Schema != null)
                    SchemaFilter(x.Value.Schema);
            });
            result.Definitions.Each(x =>
            {
                if (x.Value.AllOf != null)
                    SchemaFilter(x.Value.AllOf);
                SchemaFilter(x.Value);
            });
            result.Responses.Each(x =>
            {
                if (x.Value.Schema != null)
                    SchemaFilter(x.Value.Schema);
            });
        }

        if (OperationFilter != null)
            apiPaths.Each(x => GetOperations(x.Value).Each(o => OperationFilter(o.Item1, o.Item2)));
        ApiDeclarationFilter?.Invoke(result);
        return new HttpResult(result)
        {
            ResultScope = () => JsConfig.With(new Config { IncludeNullValues = false, IncludeNullValuesInDictionaries = false, IncludeTypeInfo = false, ExcludeTypeInfo = true, })
        };
    }

    private IEnumerable<Tuple<string, OpenApiOperation>> GetOperations(OpenApiPath value)
    {
        if (value.Get != null)
            yield return new Tuple<string, OpenApiOperation>("GET", value.Get);
        if (value.Post != null)
            yield return new Tuple<string, OpenApiOperation>("POST", value.Post);
        if (value.Put != null)
            yield return new Tuple<string, OpenApiOperation>("PUT", value.Put);
        if (value.Patch != null)
            yield return new Tuple<string, OpenApiOperation>("PATCH", value.Patch);
        if (value.Delete != null)
            yield return new Tuple<string, OpenApiOperation>("DELETE", value.Delete);
        if (value.Head != null)
            yield return new Tuple<string, OpenApiOperation>("HEAD", value.Head);
        if (value.Options != null)
            yield return new Tuple<string, OpenApiOperation>("OPTIONS", value.Options);
    }

    private static readonly Dictionary<Type, string> ClrTypesToSwaggerScalarTypes = new()
    {
        {
            typeof(byte[]),
            OpenApiType.String
        },
        {
            typeof(sbyte[]),
            OpenApiType.String
        },
        {
            typeof(byte),
            OpenApiType.Integer
        },
        {
            typeof(sbyte),
            OpenApiType.Integer
        },
        {
            typeof(bool),
            OpenApiType.Boolean
        },
        {
            typeof(short),
            OpenApiType.Integer
        },
        {
            typeof(ushort),
            OpenApiType.Integer
        },
        {
            typeof(int),
            OpenApiType.Integer
        },
        {
            typeof(uint),
            OpenApiType.Integer
        },
        {
            typeof(long),
            OpenApiType.Integer
        },
        {
            typeof(ulong),
            OpenApiType.Integer
        },
        {
            typeof(float),
            OpenApiType.Number
        },
        {
            typeof(double),
            OpenApiType.Number
        },
        {
            typeof(decimal),
            OpenApiType.Number
        },
        {
            typeof(string),
            OpenApiType.String
        },
        {
            typeof(DateTime),
            OpenApiType.String
        },
        {
            typeof(DateTimeOffset),
            OpenApiType.String
        },
    };
    private static readonly Dictionary<Type, string> ClrTypesToSwaggerScalarFormats = new()
    {
        {
            typeof(byte[]),
            OpenApiTypeFormat.Byte
        },
        {
            typeof(sbyte[]),
            OpenApiTypeFormat.Byte
        },
        {
            typeof(byte),
            OpenApiTypeFormat.Int
        },
        {
            typeof(sbyte),
            OpenApiTypeFormat.Int
        },
        {
            typeof(short),
            OpenApiTypeFormat.Int
        },
        {
            typeof(ushort),
            OpenApiTypeFormat.Int
        },
        {
            typeof(int),
            OpenApiTypeFormat.Int
        },
        {
            typeof(uint),
            OpenApiTypeFormat.Int
        },
        {
            typeof(long),
            OpenApiTypeFormat.Long
        },
        {
            typeof(ulong),
            OpenApiTypeFormat.Long
        },
        {
            typeof(float),
            OpenApiTypeFormat.Float
        },
        {
            typeof(double),
            OpenApiTypeFormat.Double
        },
        {
            typeof(decimal),
            OpenApiTypeFormat.Double
        },
        {
            typeof(DateTime),
            OpenApiTypeFormat.DateTime
        },
        {
            typeof(DateTimeOffset),
            OpenApiTypeFormat.DateTime
        },
    };
    private static bool IsSwaggerScalarType(Type type)
    {
        return ClrTypesToSwaggerScalarTypes.ContainsKey(type) || (Nullable.GetUnderlyingType(type) ?? type).IsEnum || (type.IsValueType && !IsKeyValuePairType(type)) || type.IsNullableType();
    }

    private static string GetSwaggerTypeName(Type type)
    {
        var lookupType = Nullable.GetUnderlyingType(type) ?? type;
        return ClrTypesToSwaggerScalarTypes.TryGetValue(lookupType, out var scalarType) ? scalarType : GetSchemaTypeName(lookupType);
    }

    private static string GetSwaggerTypeFormat(Type type, string route = null, string verb = null)
    {
        var lookupType = Nullable.GetUnderlyingType(type) ?? type;
        //special case for response types byte[]. If byte[] is in response
        //then we should use `binary` swagger type, because it's octet-encoded
        //otherwise we use `byte` swagger type for base64-encoded input
        if (route == null && verb == null && type == typeof(byte[]))
            return OpenApiTypeFormat.Binary;
        return ClrTypesToSwaggerScalarFormats.GetValueOrDefault(lookupType);
    }

    private static Type GetListElementType(Type type)
    {
        if (type.IsArray)
            return type.GetElementType();
        if (!type.IsGenericType)
            return null;
        var genericType = type.GetGenericTypeDefinition();
        if (genericType == typeof(List<>) || genericType == typeof(IList<>) || genericType == typeof(IEnumerable<>))
            return type.GetGenericArguments()[0];
        return null;
    }

    private static bool IsListType(Type type)
    {
        //Swagger2 specification has a special data format for type byte[] ('byte', 'binary' or 'file'), so it's not a list
        if (type == typeof(byte[]))
            return false;
        return GetListElementType(type) != null;
    }

    private Dictionary<string, object> GetOpenApiListItems(Type listItemType, string route, string verb, string[] enumValues = null)
    {
        var items = new Dictionary<string, object>();
        if (IsSwaggerScalarType(listItemType))
        {
            items.Add("type", GetSwaggerTypeName(listItemType));
            items.Add("format", GetSwaggerTypeFormat(listItemType, route, verb));
            if (IsRequiredType(listItemType))
            {
                items.Add("x-nullable", false);
            }

            if (enumValues?.Length > 0)
            {
                items.Add("enum", enumValues);
            }
        }
        else
        {
            items.Add("$ref", "#/definitions/" + GetSchemaTypeName(listItemType));
        }

        return items;
    }

    private OpenApiSchema GetListSchema(IDictionary<string, OpenApiSchema> schemas, Type schemaType, string route, string verb)
    {
        if (!IsListType(schemaType))
            return null;
        var listItemType = GetListElementType(schemaType);
        ParseDefinitions(schemas, listItemType, route, verb);
        return new OpenApiSchema
        {
            Title = GetSchemaTypeName(schemaType),
            Type = OpenApiType.Array,
            Items = GetOpenApiListItems(listItemType, route, verb)
        };
    }

    private static bool IsDictionaryType(Type type)
    {
        if (!type.IsGenericType)
            return false;
        var genericType = type.GetGenericTypeDefinition();
        if (genericType == typeof(Dictionary<, >) || genericType == typeof(IDictionary<, >) || genericType == typeof(IReadOnlyDictionary<, >) || genericType == typeof(SortedDictionary<, >))
        {
            return true;
        }

        return false;
    }

    private OpenApiSchema GetDictionarySchema(IDictionary<string, OpenApiSchema> schemas, Type schemaType, string route, string verb)
    {
        if (!IsDictionaryType(schemaType))
            return null;
        var valueType = schemaType.GetGenericArguments()[1];
        ParseDefinitions(schemas, valueType, route, verb);
        return new OpenApiSchema
        {
            Title = GetSchemaTypeName(schemaType),
            Type = OpenApiType.Object,
            Description = schemaType.GetDescription() ?? GetSchemaTypeName(schemaType),
            AdditionalProperties = GetOpenApiProperty(schemas, valueType, route, verb)
        };
    }

    private static bool IsKeyValuePairType(Type type)
    {
        return type.IsGenericType && type.GetGenericTypeDefinition() == typeof(KeyValuePair<, >);
    }

    private OpenApiSchema GetKeyValuePairSchema(IDictionary<string, OpenApiSchema> schemas, Type schemaType, string route, string verb)
    {
        if (!IsKeyValuePairType(schemaType))
            return null;
        var keyType = schemaType.GetGenericArguments()[0];
        var valueType = schemaType.GetGenericArguments()[1];
        return new OpenApiSchema
        {
            Type = OpenApiType.Object,
            Title = GetSchemaTypeName(schemaType),
            Description = schemaType.GetDescription() ?? GetSchemaTypeName(schemaType),
            Properties = new OrderedDictionary<string, OpenApiProperty>
            {
                {
                    "Key",
                    GetOpenApiProperty(schemas, keyType, route, verb)
                },
                {
                    "Value",
                    GetOpenApiProperty(schemas, valueType, route, verb)
                }
            }
        };
    }

    private static bool IsRequiredType(Type type)
    {
        return !type.IsNullableType() && type != typeof(string);
    }

    private static string GetSchemaTypeName(Type schemaType)
    {
        if ((!IsKeyValuePairType(schemaType) && schemaType.IsValueType) || schemaType.IsNullableType())
            return OpenApiType.String;
        if (!schemaType.IsGenericType)
            return schemaType.Name;
        var typeName = schemaType.ToPrettyName();
        return typeName;
    }

    private static string GetSchemaDefinitionRef(Type schemaType) => swaggerRefRegex.Replace(GetSchemaTypeName(schemaType), "_");
    private static readonly Regex swaggerRefRegex = new("[^A-Za-z0-9\\.\\-_]", RegexOptions.Compiled);
    private OpenApiProperty GetOpenApiProperty(IDictionary<string, OpenApiSchema> schemas, PropertyInfo pi, string route, string verb)
    {
        var ret = GetOpenApiProperty(schemas, pi.PropertyType, route, verb);
        ret.PropertyInfo = pi;
        return ret;
    }

    private OpenApiProperty GetOpenApiProperty(IDictionary<string, OpenApiSchema> schemas, Type propertyType, string route, string verb)
    {
        var schemaProp = new OpenApiProperty
        {
            PropertyType = propertyType,
        };
        if (IsKeyValuePairType(propertyType))
        {
            if (IsInlineSchema(propertyType))
            {
                ParseDefinitions(schemas, propertyType, route, verb);
                InlineSchema(schemas[GetSchemaTypeName(propertyType)], schemaProp);
            }
            else
            {
                ParseDefinitions(schemas, propertyType, route, verb);
                schemaProp.Ref = "#/definitions/" + GetSchemaDefinitionRef(propertyType);
            }
        }
        else if (IsListType(propertyType))
        {
            schemaProp.Type = OpenApiType.Array;
            var listItemType = GetListElementType(propertyType);
            if (IsSwaggerScalarType(listItemType))
            {
                schemaProp.Items = new Dictionary<string, object>
                {
                    {
                        "type",
                        GetSwaggerTypeName(listItemType)
                    },
                    {
                        "format",
                        GetSwaggerTypeFormat(listItemType, route, verb)
                    }
                };
                if (IsRequiredType(listItemType))
                {
                    schemaProp.Items.Add("x-nullable", false);
                //schemaProp.Items.Add("required", "true");
                }

                ParseDefinitions(schemas, listItemType, route, verb);
            }
            else if (IsInlineSchema(listItemType))
            {
                ParseDefinitions(schemas, listItemType, route, verb);
                InlineSchema(schemas[GetSchemaTypeName(listItemType)], schemaProp);
            }
            else
            {
                schemaProp.Items = new Dictionary<string, object>
                {
                    {
                        "$ref",
                        "#/definitions/" + GetSchemaDefinitionRef(listItemType)
                    }
                };
                ParseDefinitions(schemas, listItemType, route, verb);
            }
        }
        else if ((Nullable.GetUnderlyingType(propertyType) ?? propertyType).IsEnum)
        {
            var enumType = Nullable.GetUnderlyingType(propertyType) ?? propertyType;
            if (enumType.IsNumericType())
            {
                var underlyingType = Enum.GetUnderlyingType(enumType);
                schemaProp.Type = GetSwaggerTypeName(underlyingType);
                schemaProp.Format = GetSwaggerTypeFormat(underlyingType, route, verb);
                schemaProp.Enum = GetNumericValues(enumType, underlyingType).ToArray();
            }
            else
            {
                schemaProp.Type = OpenApiType.String;
                schemaProp.Enum = Enum.GetNames(enumType).ToArray();
            }
        }
        else if (IsSwaggerScalarType(propertyType))
        {
            schemaProp.Type = GetSwaggerTypeName(propertyType);
            schemaProp.Format = GetSwaggerTypeFormat(propertyType, route, verb);
            schemaProp.Nullable = IsRequiredType(propertyType) ? false : (bool? )null;
        //schemaProp.Required = IsRequiredType(propertyType) ? true : (bool?)null;
        }
        else if (IsInlineSchema(propertyType))
        {
            ParseDefinitions(schemas, propertyType, route, verb);
            InlineSchema(schemas[GetSchemaTypeName(propertyType)], schemaProp);
        }
        else
        {
            ParseDefinitions(schemas, propertyType, route, verb);
            schemaProp.Ref = "#/definitions/" + GetSchemaDefinitionRef(propertyType);
        }

        return schemaProp;
    }

    private static void InlineSchema(OpenApiSchema schema, OpenApiProperty schemaProp)
    {
        schemaProp.Items = new Dictionary<string, object>
        {
            {
                "title",
                schema.Title
            },
            {
                "discriminator",
                schema.Discriminator
            },
            {
                "readOnly",
                schema.ReadOnly
            },
            {
                "xml",
                schema.Xml
            },
            {
                "externalDocs",
                schema.ExternalDocs
            },
            {
                "example",
                schema.Example
            },
            {
                "required",
                schema.Required
            },
            {
                "allOf",
                schema.AllOf
            },
            {
                "properties",
                schema.Properties
            },
            {
                "additionalProperties",
                schema.AdditionalProperties
            },
            {
                "description",
                schema.Description
            },
            {
                "type",
                schema.Type
            },
            {
                "format",
                schema.Format
            },
            {
                "items",
                schema.Items
            },
            {
                "collectionFormat",
                schema.CollectionFormat
            },
            {
                "default",
                schema.Default
            },
            {
                "maximum",
                schema.Maximum
            },
            {
                "exclusiveMaximum",
                schema.ExclusiveMaximum
            },
            {
                "exclusiveMinimum",
                schema.ExclusiveMinimum
            },
            {
                "maxLength",
                schema.MaxLength
            },
            {
                "minLength",
                schema.MinLength
            },
            {
                "pattern",
                schema.Pattern
            },
            {
                "maxItems",
                schema.MaxItems
            },
            {
                "minItems",
                schema.MinItems
            },
            {
                "uniqueItems",
                schema.UniqueItems
            },
            {
                "maxProperties",
                schema.MaxProperties
            },
            {
                "minProperties",
                schema.MinProperties
            },
            {
                "enum",
                schema.Enum
            },
            {
                "multipleOf",
                schema.MultipleOf
            },
            {
                "x-nullable",
                schema.Nullable
            }
        };
    }

    protected bool IsInlineSchema(Type schemaType)
    {
        return InlineSchemaTypesInNamespaces.Contains(schemaType.Namespace);
    }

    public Dictionary<string, Type> SchemaIdToClrType { get; } = new();

    private void ParseDefinitions(IDictionary<string, OpenApiSchema> schemas, Type schemaType, string route, string verb)
    {
        if (IgnoreRequest(schemaType))
            return;
        if (IsSwaggerScalarType(schemaType) || schemaType.ExcludesFeature(Feature.Metadata))
            return;
        var schemaId = GetSchemaDefinitionRef(schemaType);
        if (schemas.ContainsKey(schemaId))
            return;
        var schema = GetDictionarySchema(schemas, schemaType, route, verb) ?? GetKeyValuePairSchema(schemas, schemaType, route, verb) ?? GetListSchema(schemas, schemaType, route, verb);
        bool parseProperties = false;
        if (schema == null)
        {
            schema = new OpenApiSchema
            {
                Type = OpenApiType.Object,
                Title = schemaType.Name,
                Description = schemaType.GetDescription() ?? GetSchemaTypeName(schemaType),
                Properties = new OrderedDictionary<string, OpenApiProperty>()
            };
            parseProperties = schemaType.IsUserType();
        }

        schemas[schemaId] = schema;
        SchemaIdToClrType[schemaId] = schemaType;
        var properties = schemaType.GetProperties();
        // Order schema properties by DataMember.Order if [DataContract] and [DataMember](s) defined
        // Ordering defined by: http://msdn.microsoft.com/en-us/library/ms729813.aspx
        var dataContractAttr = schemaType.FirstAttribute<DataContractAttribute>();
        if (dataContractAttr != null && properties.Any(prop => prop.IsDefined(typeof(DataMemberAttribute), true)))
        {
            var typeOrder = new List<Type>
            {
                schemaType
            };
            var baseType = schemaType.BaseType;
            while (baseType != null)
            {
                typeOrder.Add(baseType);
                baseType = baseType.BaseType;
            }

            var propsWithDataMember = properties.Where(prop => prop.IsDefined(typeof(DataMemberAttribute), true));
            var propDataMemberAttrs = properties.ToDictionary(prop => prop, prop => prop.FirstAttribute<DataMemberAttribute>());
            properties = propsWithDataMember.OrderBy(prop => propDataMemberAttrs[prop].Order) // Order by DataMember.Order
            .ThenByDescending(prop => typeOrder.IndexOf(prop.DeclaringType)) // Then by BaseTypes First
            .ThenBy(prop => // Then by [DataMember].Name / prop.Name
            {
                var name = propDataMemberAttrs[prop].Name;
                return name.IsNullOrEmpty() ? prop.Name : name;
            }).ToArray();
        }

        if (parseProperties)
        {
            foreach (var prop in properties)
            {
                if (prop.HasAttribute<IgnoreDataMemberAttribute>())
                    continue;
                var apiMembers = prop.AllAttributes<ApiMemberAttribute>().OrderByDescending(attr => attr.Route).ToList();
                var apiDoc = apiMembers.Where(attr => string.IsNullOrEmpty(verb) || string.IsNullOrEmpty(attr.Verb) || (verb ?? "").Equals(attr.Verb)).Where(attr => string.IsNullOrEmpty(route) || string.IsNullOrEmpty(attr.Route) || (route ?? "").StartsWith(attr.Route)).FirstOrDefault(attr => attr.ParameterType is "body" or "model");
                if (apiMembers.Any(x => x.ExcludeInSchema))
                    continue;
                var schemaProperty = GetOpenApiProperty(schemas, prop, route, verb);
                var schemaPropertyName = GetSchemaPropertyName(prop);
                schemaProperty.Description = prop.GetDescription() ?? apiDoc?.Description;
                var propAttr = prop.FirstAttribute<ApiMemberAttribute>();
                if (propAttr != null)
                {
                    if (propAttr.DataType != null)
                        schemaProperty.Type = propAttr.DataType;
                    if (propAttr.Format != null)
                        schemaProperty.Format = propAttr.Format;
                    if (propAttr.IsRequired)
                    {
                        schema.Required ??= [];
                        schema.Required.Add(schemaPropertyName);
                    }
                }

                schemaProperty.Enum = GetEnumValues(prop.FirstAttribute<ApiAllowableValuesAttribute>());
                SchemaPropertyFilter?.Invoke(schemaProperty);
                schema.Properties[schemaPropertyName] = schemaProperty;
            }
        }
    }

    private static string GetSchemaPropertyName(PropertyInfo prop)
    {
        var dataMemberAttr = prop.FirstAttribute<DataMemberAttribute>();
        if (dataMemberAttr != null && !dataMemberAttr.Name.IsNullOrEmpty())
            return dataMemberAttr.Name;
        return UseCamelCaseSchemaPropertyNames ? (UseLowercaseUnderscoreSchemaPropertyNames ? prop.Name.ToLowercaseUnderscore() : prop.Name.ToCamelCase()) : prop.Name;
    }

    private static IEnumerable<string> GetNumericValues(Type propertyType, Type underlyingType)
    {
        var values = Enum.GetValues(propertyType).Map(x => $"{Convert.ChangeType(x, underlyingType)} ({x})");
        return values;
    }

    private OpenApiSchema GetResponseSchema(IRestPath restPath, IDictionary<string, OpenApiSchema> schemas, out string schemaDescription)
    {
        schemaDescription = string.Empty;
        // Given: class MyDto : IReturn<X>. Determine the type X.
        foreach (var i in restPath.RequestType.GetInterfaces())
        {
            if (i == typeof(IReturnVoid))
                return GetSchemaForResponseType(typeof(void), schemas, out schemaDescription);
            if (i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IReturn<>))
            {
                var schemaType = i.GetGenericArguments()[0];
                return GetSchemaForResponseType(schemaType, schemas, out schemaDescription);
            }
        }

        return new OpenApiSchema
        {
            Ref = "#/definitions/Object"
        };
    }

    private OpenApiSchema GetSchemaForResponseType(Type schemaType, IDictionary<string, OpenApiSchema> schemas, out string schemaDescription)
    {
        if (schemaType == typeof(IReturnVoid) || schemaType == typeof(void))
        {
            schemaDescription = "No Content";
            return null;
        }

        ParseDefinitions(schemas, schemaType, null, null);
        var schema = GetDictionarySchema(schemas, schemaType, null, null) ?? GetKeyValuePairSchema(schemas, schemaType, null, null) ?? GetListSchema(schemas, schemaType, null, null) ?? (IsSwaggerScalarType(schemaType) ? new OpenApiSchema
        {
            Title = GetSchemaTypeName(schemaType),
            Type = GetSwaggerTypeName(schemaType),
            Format = GetSwaggerTypeFormat(schemaType)
        }

        : IsInlineSchema(schemaType) ? schemas[GetSchemaTypeName(schemaType)] : new OpenApiSchema
        {
            Ref = "#/definitions/" + GetSchemaDefinitionRef(schemaType)
        }

        );
        schemaDescription = schema.Description ?? schemaType.GetDescription() ?? string.Empty;
        return schema;
    }

    private OrderedDictionary<string, OpenApiResponse> GetMethodResponseCodes(IRestPath restPath, IDictionary<string, OpenApiSchema> schemas, Type requestType)
    {
        var responses = new OrderedDictionary<string, OpenApiResponse>();
        var responseSchema = GetResponseSchema(restPath, schemas, out string schemaDescription);
        //schema is null when return type is IReturnVoid
        var statusCode = responseSchema == null && HostConfig.Instance.Return204NoContentForEmptyResponse ? ((int)HttpStatusCode.NoContent).ToString() : ((int)HttpStatusCode.OK).ToString();
        responses.Add(statusCode, new OpenApiResponse { Schema = responseSchema, Description = !string.IsNullOrEmpty(schemaDescription) ? schemaDescription : "Success" });
        foreach (var attr in requestType.AllAttributes<ApiResponseAttribute>())
        {
            string apiSchemaDescription = string.Empty;
            var response = new OpenApiResponse
            {
                Schema = attr.ResponseType != null ? GetSchemaForResponseType(attr.ResponseType, schemas, out apiSchemaDescription) : responseSchema,
                Description = attr.Description ?? apiSchemaDescription
            };
            statusCode = attr.IsDefaultResponse ? "default" : attr.StatusCode.ToString();
            if (!responses.ContainsKey(statusCode))
                responses.Add(statusCode, response);
            else
                responses[statusCode] = response;
        }

        return responses;
    }

    private OrderedDictionary<string, OpenApiPath> ParseOperations(List<RestPath> restPaths, Dictionary<string, OpenApiSchema> schemas, Dictionary<string, OpenApiTag> tags)
    {
        var feature = HostContext.GetPlugin<OpenApiFeature>();
        var apiPaths = new OrderedDictionary<string, OpenApiPath>();
        foreach (var restPath in restPaths)
        {
            var verbs = new List<string>();
            var summary = restPath.Summary ?? restPath.RequestType.GetDescription();
            verbs.AddRange(restPath.AllowsAllVerbs ? AnyRouteVerbs : restPath.Verbs);
            var routePath = restPath.Path.Replace("*", "");
            var requestType = restPath.RequestType;
            if (!apiPaths.TryGetValue(restPath.Path, out var curPath))
            {
                curPath = new OpenApiPath
                {
                    Parameters = [new()
                    {
                        Ref = "#/parameters/Accept"
                    }

                    ]
                };
                apiPaths.Add(restPath.Path, curPath);
            }

            var op = HostContext.Metadata.OperationsMap[requestType];
            var annotatingTagAttributes = requestType.AllAttributes<TagAttribute>();
            foreach (var verb in verbs)
            {
                var needAuth = op.RequiresAuthentication;
                var userTags = annotatingTagAttributes.Select(x => x.Name).ToList();
                var operation = new OpenApiOperation
                {
                    RequestType = requestType.Name,
                    Summary = summary,
                    Description = restPath.Notes ?? summary,
                    OperationId = GetOperationName(requestType.Name, routePath, verb),
                    Parameters = ParseParameters(schemas, requestType, routePath, verb),
                    Responses = GetMethodResponseCodes(restPath, schemas, requestType),
                    Consumes = [MimeTypes.Json],
                    Produces = [MimeTypes.Json],
                    Tags = userTags.Count > 0 ? userTags : GetTags(restPath.Path),
                    Deprecated = requestType.HasAttribute<ObsoleteAttribute>(),
                    Security = needAuth ? [OperationSecurity] : null
                };
                if (HasFormData(verb, operation.Parameters))
                    operation.Consumes = ["application/x-www-form-urlencoded"];
                foreach (var tag in operation.Tags)
                {
                    if (!tags.ContainsKey(tag))
                    {
                        var tagObject = feature.Tags.FirstOrDefault(x => x.Name == tag) ?? new OpenApiTag
                        {
                            Name = tag
                        };
                        tags.Add(tag, tagObject);
                    }
                }

                switch (verb)
                {
                    case HttpMethods.Get:
                        curPath.Get = operation;
                        break;
                    case HttpMethods.Post:
                        curPath.Post = operation;
                        break;
                    case HttpMethods.Put:
                        curPath.Put = operation;
                        break;
                    case HttpMethods.Delete:
                        curPath.Delete = operation;
                        break;
                    case HttpMethods.Patch:
                        curPath.Patch = operation;
                        break;
                    case HttpMethods.Head:
                        curPath.Head = operation;
                        break;
                    case HttpMethods.Options:
                        curPath.Options = operation;
                        break;
                }
            }
        }

        return apiPaths;
    }

    private bool IsFormData(string verb, ApiAttribute apiAttr)
    {
        if (verb != HttpMethods.Post && verb != HttpMethods.Put)
            return false;
        if (apiAttr?.BodyParameter == GenerateBodyParameter.Always || (!DisableAutoDtoInBodyParam && apiAttr?.BodyParameter != GenerateBodyParameter.Never))
            return false;
        return true;
    }

    private bool HasFormData(string verb, List<OpenApiParameter> parameters)
    {
        return (verb == HttpMethods.Post || verb == HttpMethods.Put) && parameters.Any(p => p.In == "formData");
    }

    static readonly Dictionary<string, string> postfixes = new()
    {
        {
            HttpMethods.Get,
            "_Get"
        }, //'Get' or 'List' to pass Autorest validation
        {
            HttpMethods.Put,
            "_Create"
        }, //'Create' to pass Autorest validation
        {
            HttpMethods.Post,
            "_Post"
        },
        {
            HttpMethods.Patch,
            "_Update"
        }, //'Update' to pass Autorest validation
        {
            HttpMethods.Delete,
            "_Delete"
        } //'Delete' to pass Autorest validation
    };
    HashSet<string> operationIds = new();
    /// Returns operation postfix to make operationId unique and swagger json be validatable
    private string GetOperationName(string name, string route, string verb)
    {
        string pathPostfix = string.Empty;
        var entries = route.Replace("{", string.Empty).Replace("}", string.Empty).Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);
        if (entries.Length > 1)
            pathPostfix = string.Join(string.Empty, entries, 1, entries.Length - 1);
        postfixes.TryGetValue(verb, out var verbPostfix);
        verbPostfix ??= string.Empty;
        var operationId = name + pathPostfix + verbPostfix;
        int num = 2;
        while (operationIds.Contains(operationId))
        {
            operationId = name + pathPostfix + num + verbPostfix;
            num++;
        }

        operationIds.Add(operationId);
        return operationId;
    }

    private static string[] GetEnumValues(ApiAllowableValuesAttribute attr)
    {
        return attr?.Values?.ToArray();
    }

    private List<OpenApiParameter> ParseParameters(IDictionary<string, OpenApiSchema> schemas, Type operationType, string route, string verb)
    {
        var hasDataContract = operationType.HasAttribute<DataContractAttribute>();
        var apiAttr = operationType.FirstAttribute<ApiAttribute>();
        var properties = operationType.GetProperties();
        var paramAttrs = new Dictionary<string, ApiMemberAttribute[]>();
        var propertyTypes = new Dictionary<string, Type>();
        var allowableParams = new List<ApiAllowableValuesAttribute>();
        var defaultOperationParameters = new List<OpenApiParameter>();
        var hasApiMembers = false;
        foreach (var property in properties)
        {
            if (property.HasAttribute<IgnoreDataMemberAttribute>())
                continue;
            var attr = hasDataContract ? property.FirstAttribute<DataMemberAttribute>() : null;
            var propertyName = attr?.Name ?? property.Name;
            var apiMembers = property.AllAttributes<ApiMemberAttribute>();
            if (apiMembers.Length > 0)
                hasApiMembers = true;
            paramAttrs[propertyName] = apiMembers;
            propertyTypes[propertyName] = property.PropertyType;
            var allowableValuesAttrs = property.AllAttributes<ApiAllowableValuesAttribute>();
            var allowableValuesAttr = allowableValuesAttrs.FirstOrDefault();
            allowableParams.AddRange(allowableValuesAttrs);
            if (hasDataContract && attr == null)
                continue;
            var inPath = (route ?? "").ToLowerInvariant().Contains("{" + propertyName.ToLowerInvariant() + "}");
            var paramType = inPath ? "path" : IsFormData(verb, apiAttr) ? "formData" : "query";
            var parameter = GetParameter(schemas, property.PropertyType, route, verb, propertyName, paramType, enumValues: allowableValuesAttr != null ? GetEnumValues(allowableValuesAttr) : Html.Input.GetEnumValues(property.PropertyType));
            defaultOperationParameters.Add(parameter);
        }

        var methodOperationParameters = defaultOperationParameters;
        if (hasApiMembers)
        {
            methodOperationParameters = new List<OpenApiParameter>();
            foreach (var key in paramAttrs.Keys)
            {
                var apiMembers = paramAttrs[key];
                foreach (var member in apiMembers)
                {
                    if ((member.Verb == null || string.Compare(member.Verb, verb, StringComparison.OrdinalIgnoreCase) == 0) && (member.Route == null || (route ?? "").StartsWith(member.Route)) && !string.Equals(member.ParameterType, "model") && methodOperationParameters.All(x => x.Name != (member.Name ?? key)))
                    {
                        var allowableValuesAttr = allowableParams.FirstOrDefault(attr => attr.Name == (member.Name ?? key));
                        var p = GetParameter(schemas, propertyTypes[key], route, verb, member.Name ?? key, member.GetParamType(operationType, member.Verb ?? verb), enumValues: allowableValuesAttr != null ? GetEnumValues(allowableValuesAttr) : Html.Input.GetEnumValues(propertyTypes[key]), true);
                        p.Type = member.DataType ?? p.Type;
                        p.Format = member.Format ?? p.Format;
                        p.Required = p.In == "path" || member.IsRequired;
                        p.Description = member.Description ?? p.Description;
                        //Fix old Swagger 1.2 parameter type
                        if (p.In == "form")
                            p.In = "formData";
                        methodOperationParameters.Add(p);
                    }
                }
            }
        }

        if (apiAttr?.BodyParameter == GenerateBodyParameter.Always || (!DisableAutoDtoInBodyParam && apiAttr?.BodyParameter != GenerateBodyParameter.Never))
        {
            if (!HttpMethods.Get.EqualsIgnoreCase(verb) && !HttpMethods.Delete.EqualsIgnoreCase(verb) && !methodOperationParameters.Any(p => "body".EqualsIgnoreCase(p.In)))
            {
                ParseDefinitions(schemas, operationType, route, verb);
                var parameter = GetParameter(schemas, operationType, route, verb, "body", "body");
                if (apiAttr?.IsRequired == true)
                    parameter.Required = true;
                methodOperationParameters.Add(parameter);
            }
        }

        return methodOperationParameters;
    }

    private OpenApiParameter GetParameter(IDictionary<string, OpenApiSchema> schemas, Type schemaType, string route, string verb, string paramName, string paramIn, string[] enumValues = null, bool isApiMember = false)
    {
        //Compatibility: replace old Swagger ParamType to new Open API 
        if (paramIn == "form")
            paramIn = "formData";
        if (IsSwaggerScalarType(schemaType))
        {
            return new OpenApiParameter
            {
                In = paramIn,
                Name = paramName,
                Type = GetSwaggerTypeName(schemaType),
                Format = GetSwaggerTypeFormat(schemaType, route, verb),
                Enum = enumValues,
                Nullable = IsRequiredType(schemaType) ? false : (bool? )null,
                Required = paramIn == "path" ? true : (bool? )null
            };
        }

        if (paramIn != "body" && !isApiMember)
        {
            return new OpenApiParameter
            {
                In = paramIn,
                Name = paramName,
                Type = OpenApiType.String,
                Required = paramIn == "path" ? true : (bool? )null
            };
        }

        if (IsDictionaryType(schemaType))
        {
            return new OpenApiParameter
            {
                In = paramIn,
                Name = paramName,
                Schema = GetDictionarySchema(schemas, schemaType, route, verb)
            };
        }

        if (IsListType(schemaType))
        {
            return GetListParameter(schemas, schemaType, route, verb, paramName, paramIn, enumValues: enumValues);
        }

        OpenApiSchema openApiSchema;
        if (IsInlineSchema(schemaType))
        {
            openApiSchema = schemas[GetSchemaTypeName(schemaType)];
        }
        else
        {
            openApiSchema = new OpenApiSchema
            {
                Ref = "#/definitions/" + GetSchemaTypeName(schemaType)
            };
        }

        return new OpenApiParameter
        {
            In = paramIn,
            Name = paramName,
            Schema = openApiSchema
        };
    }

    private List<string> GetTags(string path)
    {
        var tagName = GetTagName(path);
        return tagName != null ? new List<string>
        {
            tagName
        }

        : null;
    }

    private string GetTagName(string path)
    {
        var tags = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);
        return tags.Length > 0 ? tags[0] : null;
    }

    private OpenApiParameter GetListParameter(IDictionary<string, OpenApiSchema> schemas, Type listType, string route, string verb, string paramName, string paramIn, string[] enumValues = null)
    {
        if (!IsListType(listType))
            return null;
        var parameter = new OpenApiParameter
        {
            Type = OpenApiType.Array,
            CollectionFormat = "multi",
            Description = listType.GetDescription(),
            Name = paramName,
            In = paramIn,
            Required = paramIn == "path"
        };
        var listItemType = GetListElementType(listType);
        ParseDefinitions(schemas, listItemType, route, verb);
        parameter.Items = GetOpenApiListItems(listItemType, route, verb, enumValues: enumValues);
        return parameter;
    }

    private OpenApiParameter GetAcceptHeaderParameter()
    {
        return new OpenApiParameter
        {
            Type = OpenApiType.String,
            Name = "Accept",
            Description = "Accept Header",
            Enum = new[]
            {
                "application/json"
            },
            In = "header",
            Required = true,
        };
    }
}
--------------------------------------------------------------------------------
ID: 46
ServiceStack Attribute Information ID: 13
Class Name: IdentityRegisterService
Class Example:
[DefaultRequest(typeof(Register))]
public class IdentityRegisterService<TUser, TKey>(UserManager<TUser> userManager) : IdentityRegisterServiceBase<TUser, TKey>(userManager)
    where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>, new()
{
    public async Task<object> PostAsync(Register request)
    {
        var session = await GetSessionAsync();
        if (await UserExistsAsync(session))
            throw new NotSupportedException(ErrorMessages.AlreadyRegistered);
        await ValidateAndThrowAsync(request);
        var newUser = ToUser(request);
        var result = await userManager.CreateAsync(newUser, request.Password);
        if (result.Succeeded)
        {
            session = AuthContext.UserToSessionConverter(newUser);
            await RegisterNewUserAsync(session, newUser);
            var response = await CreateRegisterResponse(session, request.UserName ?? request.Email, request.Password, request.AutoLogin);
            return response;
        }

        var errorCode = HttpStatusCode.BadRequest.ToString();
        var errorResponse = new RegisterResponse
        {
            ResponseStatus = new ResponseStatus
            {
                ErrorCode = errorCode,
                Message = errorCode,
                Errors = result.Errors.Map(x => new ResponseError { ErrorCode = x.Code, Message = x.Description, FieldName = x.Code.StartsWith(nameof(Register.Password)) ? nameof(Register.Password) : null, })
            }
        };
        var status = errorResponse.ResponseStatus;
        var firstError = status.Errors.FirstOrDefault();
        if (firstError != null)
        {
            status.ErrorCode = firstError.ErrorCode;
            status.Message = firstError.Message;
        }

        return new HttpError(errorResponse, HttpStatusCode.BadRequest);
    }
}
--------------------------------------------------------------------------------
ID: 47
ServiceStack Attribute Information ID: 13
Class Name: SpaFallbackService
Class Example:
[DefaultRequest(typeof(SpaFallback))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class SpaFallbackService : Service
{
    //Return index.html for unmatched requests so routing is handled on client
    public object Any(SpaFallback request) => Request.GetPageResult("/");
}
--------------------------------------------------------------------------------
ID: 48
ServiceStack Attribute Information ID: 13
Class Name: HotReloadPageService
Class Example:
[DefaultRequest(typeof(HotReloadPage))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class HotReloadPageService(ISharpPages pages) : Service
{
    public static TimeSpan LongPollDuration = TimeSpan.FromSeconds(60);
    public static TimeSpan CheckDelay = TimeSpan.FromMilliseconds(50);
    public static TimeSpan ModifiedDelay = TimeSpan.FromMilliseconds(50);
    public async Task<HotReloadPageResponse> Any(HotReloadPage request)
    {
        var pathInfo = request.Path ?? "/";
        var page = pages.GetPage(pathInfo);
        if (page == null)
        {
            var matchingRoute = RestHandler.FindMatchingRestPath(HttpMethods.Get, pathInfo, out var contentType);
            var feature = HostContext.AppHost.AssertPlugin<SharpPagesFeature>();
            if (matchingRoute != null)
            {
                page = feature.GetViewPage(matchingRoute.RequestType.Name);
                if (page == null)
                {
                    var responseType = HostContext.AppHost.Metadata.GetResponseTypeByRequest(matchingRoute.RequestType);
                    page = feature.GetViewPage(responseType.Name);
                }
            }

            page ??= feature.GetRoutingPage(pathInfo, out var args);
        }

        if (page == null)
            throw HttpError.NotFound("Page not found: " + request.Path);
        if (!page.HasInit)
            await page.Init();
        var startedAt = DateTime.UtcNow;
        var eTagTicks = string.IsNullOrEmpty(request.ETag) ? (long? )null : long.Parse(request.ETag);
        var maxLastModified = DateTime.MinValue;
        var shouldReload = false;
        while (DateTime.UtcNow - startedAt < LongPollDuration)
        {
            maxLastModified = pages.GetLastModified(page);
            if (eTagTicks == null)
                return new HotReloadPageResponse
                {
                    ETag = maxLastModified.Ticks.ToString()
                };
            shouldReload = maxLastModified.Ticks > eTagTicks;
            if (shouldReload)
            {
                await Task.Delay(ModifiedDelay);
                break;
            }

            await Task.Delay(CheckDelay);
        }

        return new HotReloadPageResponse
        {
            Reload = shouldReload,
            ETag = maxLastModified.Ticks.ToString()
        };
    }
}
--------------------------------------------------------------------------------
ID: 49
ServiceStack Attribute Information ID: 13
Class Name: SharpApiService
Class Example:
[DefaultRequest(typeof(ApiPages))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class SharpApiService : Service
{
    public async Task<object> Any(ApiPages request)
    {
        if (string.IsNullOrEmpty(request.PageName))
            throw new ArgumentNullException(nameof(request.PageName));
        var parts = string.IsNullOrEmpty(request.PathInfo) ? TypeConstants.EmptyStringArray : request.PathInfo.SplitOnLast('.');
        var hasPathContentType = parts.Length > 1 && ContentTypes.KnownFormats.Contains(parts[1]);
        var pathInfo = hasPathContentType ? parts[0] : request.PathInfo;
        var pathArgs = string.IsNullOrEmpty(pathInfo) ? TypeConstants.EmptyStringArray : pathInfo.Split('/');
        parts = request.PageName.SplitOnLast('.');
        var hasPageContentType = pathArgs.Length == 0 && parts.Length > 1 && ContentTypes.KnownFormats.Contains(parts[1]);
        var pageName = hasPageContentType ? parts[0] : request.PageName;
        // Change .csv download file name
        base.Request.OperationName = pageName + (pathArgs.Length > 0 ? "_" + string.Join("_", pathArgs) : "");
        var feature = HostContext.GetPlugin<SharpPagesFeature>();
        if (feature.ApiDefaultContentType != null && !hasPathContentType && !hasPageContentType && base.Request.QueryString[ScriptConstants.Format] == null && base.Request.ResponseContentType == MimeTypes.Html)
        {
            base.Request.ResponseContentType = feature.ApiDefaultContentType;
        }

        var pagePath = feature.ApiPath.CombineWith(pageName).TrimStart('/');
        var page = base.Request.GetPage(pagePath);
        if (page == null)
            throw HttpError.NotFound($"No Sharp API was found at '{pagePath}'");
        var requestArgs = base.Request.GetScriptRequestParams(importRequestParams: feature.ImportRequestParams);
        requestArgs[ScriptConstants.PathInfo] = request.PathInfo;
        requestArgs[ScriptConstants.PathArgs] = pathArgs;
        var pageResult = new PageResult(page)
        {
            NoLayout = true,
            RethrowExceptions = true,
            Args = requestArgs
        };
        var discardedOutput = await pageResult.RenderToStringAsync();
        if (pageResult.ReturnValue == null)
            throw HttpError.NotFound($"The Sharp API did not specify a response. Use the 'return' filter to set a return value for the page.");
        var response = pageResult.ReturnValue.Result;
        if (response is Task<object> responseTask)
            response = await responseTask;
        if (response is IRawString raw)
            response = raw.ToRawString();
        var httpResult = ToHttpResult(pageResult, response);
        return httpResult;
    }

    internal static IHttpResult ToHttpResult(PageResult pageResult, object response)
    {
        if (response is not IHttpResult httpResult)
        {
            if (pageResult.ReturnValue?.Args != null)
            {
                httpResult = ServiceStackScripts.ToHttpResult(pageResult.ReturnValue.Args);
                httpResult.Response = response;
            }
            else
            {
                httpResult = new HttpResult(response);
            }
        }

        return httpResult;
    }
}
--------------------------------------------------------------------------------
ID: 50
ServiceStack Attribute Information ID: 13
Class Name: MetadataDebugService
Class Example:
[ReturnExceptionsInJson]
[DefaultRequest(typeof(MetadataDebug))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class MetadataDebugService : Service
{
    public static string Route = "/metadata/debug";
    public static string DefaultTemplate = @"<table><tr><td style='width:50%'><pre>
Service Name              {{ appHost.ServiceName }}
Handler Path              {{ appConfig.HandlerFactoryPath }}
VirtualFiles Path         {{ appVirtualFilesPath }}
VirtualFileSources Path   {{ appVirtualFileSourcesPath }}
OS Environment Variable   {{ 'OS' |> envVariable }}
ServiceStack Version      {{ envServiceStackVersion }}

Request: 
  - RemoteIp              {{ request.RemoteIp }}
  - UserHostAddress       {{ request.UserHostAddress }}
  - PathInfo              {{ request.PathInfo }}
  - UserAgent             {{ request.UserAgent }}

Session:
  - ss-id                 {{ userSessionId }}
  - IsAuthenticated       {{ userSession.IsAuthenticated }}
  - UserAuthId            {{ userAuthId }}
  - Username              {{ userAuthName }}
  - LastName              {{ userSession.LastName }}
  - Is Admin              {{ 'Admin'         |> userHasRole }}
  - Has Permission        {{ 'ThePermission' |> userHasPermission }}

Plugins:
{{ plugins |> map => `  - ${it.typeName()}` |> joinln }}
</pre></td><td style='width:50%'> 
{{ meta.Operations |> take(10) |> map => {Request:it.Name,Response:it.ResponseType.Name??'', Service:it.ServiceType.Name} |> htmlDump({ caption:'First 10 Services'}) }}
<table><caption>Network Information</caption>
<tr><th>    IPv4 Addresses                            </th><th>              IPv6 Addresses                            </th></tr>
<td>{{#each ip in networkIpv4Addresses}}<div>{{ip}}</div>{{/each}}</td><td>{{#each ip in networkIpv6Addresses}}<div>{{ip}}</div>{{/each}}<td></tr></pre></td>
</tr></table>";
    public async Task<object> Any(MetadataDebug request)
    {
        if (string.IsNullOrEmpty(request.Script))
            return null;
        var feature = HostContext.AssertPlugin<SharpPagesFeature>();
        await RequestUtils.AssertAccessRoleOrDebugModeAsync(Request, accessRole: feature.MetadataDebugAdminRole, authSecret: request.AuthSecret);
        var appHost = HostContext.AppHost;
        var context = new ScriptContext
        {
            ScriptMethods =
            {
                new InfoScripts()
            },
            Args =
            {
                {
                    ScriptConstants.Request,
                    base.Request
                },
                {
                    "request",
                    base.Request
                },
                {
                    "appHost",
                    appHost
                },
                {
                    "appConfig",
                    appHost.Config
                },
                {
                    "appVirtualFilesPath",
                    appHost.ContentRootDirectory.RealPath
                },
                {
                    "appVirtualFileSourcesPath",
                    appHost.RootDirectory.RealPath
                },
                {
                    "meta",
                    HostContext.Metadata
                },
            }
        }.Init();
        feature.Args.Each(x => context.Args[x.Key] = x.Value);
        var result = await context.EvaluateScriptAsync(request.Script);
        return new HttpResult(result)
        {
            ContentType = MimeTypes.PlainText
        };
    }

    public async Task<object> GetHtml(MetadataDebug request)
    {
        var feature = HostContext.GetPlugin<SharpPagesFeature>();
        if (!HostContext.DebugMode)
        {
            await RequiredRoleAttribute.AssertRequiredRoleAsync(Request, feature.MetadataDebugAdminRole);
        }

        if (request.Script != null)
            return Any(request);
        var defaultTemplate = feature.DebugDefaultTemplate ?? DefaultTemplate;
        var html = Templates.HtmlTemplates.GetMetadataDebugTemplate();
        html = html.Replace("{0}", defaultTemplate);
        var authSecret = Request.GetAuthSecret();
        if (HostContext.Config.AdminAuthSecret != null && HostContext.Config.AdminAuthSecret == authSecret)
        {
            html = html.Replace("{ template: template }", "{ template: template, authsecret:" + feature.DefaultMethods.jsQuotedString(authSecret).ToRawString() + " }");
        }

        return html;
    }
}
--------------------------------------------------------------------------------
ID: 51
ServiceStack Attribute Information ID: 13
Class Name: ScriptAdminService
Class Example:
[DefaultRequest(typeof(ScriptAdmin))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class ScriptAdminService : Service
{
    public static string[] Routes { get; set; } = ["/script/admin", "/script/admin/{Actions}"];

    public static string[] Actions = [nameof(ProtectedScripts.invalidateAllCaches), nameof(SharpPagesFeature.RunInitPage)];
    public async Task<object> Any(ScriptAdmin request)
    {
        var feature = HostContext.AssertPlugin<SharpPagesFeature>();
        await RequiredRoleAttribute.AssertRequiredRoleAsync(Request, feature.ScriptAdminRole);
        if (string.IsNullOrEmpty(request.Actions))
            return new ScriptAdminResponse
            {
                Results = ["Available actions: " + string.Join(",", Actions)]
            };
        var actions = request.Actions.Split(',');
        var results = new List<string>();
        using var ms = MemoryStreamFactory.GetStream();
        var scope = new ScriptScopeContext(new PageResult(feature.EmptyPage), ms, new Dictionary<string, object>());
        if (actions.Any(x => x.EqualsIgnoreCase(nameof(ProtectedScripts.invalidateAllCaches))))
            results.Add(nameof(ProtectedScripts.invalidateAllCaches) + ": " + feature.ProtectedMethods.invalidateAllCaches(scope).ToJsv());
        if (actions.Any(x => x.EqualsIgnoreCase(nameof(SharpPagesFeature.RunInitPage))))
            results.Add(nameof(SharpPagesFeature.RunInitPage) + ": " + feature.RunInitPage());
        if (results.Count > 0)
            return new ScriptAdminResponse
            {
                Results = results.ToArray()
            };
        throw new NotSupportedException("Unknown Action. Available actions: " + string.Join(",", Actions));
    }
}
--------------------------------------------------------------------------------
ID: 52
ServiceStack Attribute Information ID: 13
Class Name: ServerEventsSubscribersService
Class Example:
[DefaultRequest(typeof(GetEventSubscribers))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class ServerEventsSubscribersService(IServerEvents serverEvents) : Service
{
    public object Any(GetEventSubscribers request)
    {
        var channels = new List<string>();
        var deprecatedChannels = Request.QueryString["channel"];
        if (!string.IsNullOrEmpty(deprecatedChannels))
            channels.AddRange(deprecatedChannels.Split(','));
        if (request.Channels != null)
            channels.AddRange(request.Channels);
        return channels.Count > 0 ? serverEvents.GetSubscriptionsDetails(channels.ToArray()) : serverEvents.GetAllSubscriptionsDetails();
    }
}
--------------------------------------------------------------------------------
ID: 53
ServiceStack Attribute Information ID: 13
Class Name: ServerEventsUnRegisterService
Class Example:
[DefaultRequest(typeof(UnRegisterEventSubscriber))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class ServerEventsUnRegisterService(IServerEvents serverEvents) : Service
{
    public const string UnRegisterSubNotExists = nameof(UnRegisterSubNotExists);
    private const string UnRegisterInvalidAccess = nameof(UnRegisterInvalidAccess);
    private const string UnRegisterApi = nameof(UnRegisterApi);
    [AddHeader(ContentType = MimeTypes.Json)]
    public async Task<object> Any(UnRegisterEventSubscriber request)
    {
        var subscription = serverEvents.GetSubscriptionInfo(request.Id);
        var feature = HostContext.GetPlugin<ServerEventsFeature>();
        if (subscription == null)
        {
            feature.IncrementCounter(UnRegisterSubNotExists);
            throw HttpError.NotFound(ErrorMessages.SubscriptionNotExistsFmt.LocalizeFmt(Request, request.Id).SafeInput());
        }

        if (!feature.CanAccessSubscription(base.Request, subscription))
        {
            feature.IncrementCounter(UnRegisterInvalidAccess);
            throw HttpError.Forbidden(ErrorMessages.SubscriptionForbiddenFmt.LocalizeFmt(Request, request.Id.SafeInput()));
        }

        feature.IncrementCounter(UnRegisterApi);
        await serverEvents.UnRegisterAsync(subscription.SubscriptionId).ConfigAwait();
        return subscription.Meta;
    }
}
--------------------------------------------------------------------------------
ID: 54
ServiceStack Attribute Information ID: 13
Class Name: UpdateEventSubscriberService
Class Example:
[DefaultRequest(typeof(UpdateEventSubscriber))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class UpdateEventSubscriberService(IServerEvents serverEvents) : Service
{
    public const string UpdateEventSubNotExists = nameof(UpdateEventSubNotExists);
    private const string UpdateEventInvalidAccess = nameof(UpdateEventInvalidAccess);
    public async Task<object> Any(UpdateEventSubscriber request)
    {
        var subscription = serverEvents.GetSubscriptionInfo(request.Id);
        var feature = HostContext.GetPlugin<ServerEventsFeature>();
        if (subscription == null)
        {
            feature.IncrementCounter(UpdateEventSubNotExists);
            throw HttpError.NotFound(ErrorMessages.SubscriptionNotExistsFmt.LocalizeFmt(Request, request.Id).SafeInput());
        }

        if (!feature.CanAccessSubscription(base.Request, subscription))
        {
            feature.IncrementCounter(UpdateEventInvalidAccess);
            throw HttpError.Forbidden(ErrorMessages.SubscriptionForbiddenFmt.LocalizeFmt(Request, request.Id.SafeInput()));
        }

        if (request.UnsubscribeChannels != null)
            await serverEvents.UnsubscribeFromChannelsAsync(subscription.SubscriptionId, request.UnsubscribeChannels).ConfigAwait();
        if (request.SubscribeChannels != null)
            await serverEvents.SubscribeToChannelsAsync(subscription.SubscriptionId, request.SubscribeChannels).ConfigAwait();
        return new UpdateEventSubscriberResponse();
    }
}
--------------------------------------------------------------------------------
ID: 55
ServiceStack Attribute Information ID: 13
Class Name: CrudCodeGenTypesService
Class Example:
[Restrict(VisibilityTo = RequestAttributes.None)]
[DefaultRequest(typeof(CrudCodeGenTypes))]
public class CrudCodeGenTypesService : Service
{
    [AddHeader(ContentType = MimeTypes.PlainText)]
    public async Task<object> Any(CrudCodeGenTypes request)
    {
        try
        {
            var genServices = HostContext.AssertPlugin<AutoQueryFeature>().GenerateCrudServices;
            await RequestUtils.AssertAccessRoleOrDebugModeAsync(base.Request, accessRole: genServices.AccessRole, authSecret: request.AuthSecret);
            var src = GenerateCrudServices.GenerateSource(Request, request, genServices.GenerateOperationsFilter, [nameof(CrudCodeGenTypes.IncludeCrudOperations), nameof(CrudCodeGenTypes.Schema), nameof(CrudCodeGenTypes.NamedConnection), nameof(CrudCodeGenTypes.IncludeTables), nameof(CrudCodeGenTypes.ExcludeTables)]);
            return src;
        }
        catch (Exception e)
        {
            base.Response.StatusCode = e.ToStatusCode();
            base.Response.StatusDescription = e.GetType().Name;
            return e.ToString();
        }
    }
}
--------------------------------------------------------------------------------
ID: 56
ServiceStack Attribute Information ID: 13
Class Name: CrudTablesService
Class Example:
[Restrict(VisibilityTo = RequestAttributes.None)]
[DefaultRequest(typeof(CrudTables))]
public class CrudTablesService : Service
{
    public async Task<object> Any(CrudTables request)
    {
        var genServices = HostContext.AssertPlugin<AutoQueryFeature>().GenerateCrudServices;
        await RequestUtils.AssertAccessRoleOrDebugModeAsync(Request, accessRole: genServices.AccessRole, authSecret: request.AuthSecret);
        var dbFactory = TryResolve<IDbConnectionFactory>();
        var results = request.NoCache == true ? GenerateCrudServices.GetTableSchemas(dbFactory, request.Schema, request.NamedConnection, request.IncludeTables, request.ExcludeTables) : genServices.GetCachedDbSchema(dbFactory, request.Schema, request.NamedConnection, request.IncludeTables, request.ExcludeTables).Tables;
        return new AutoCodeSchemaResponse
        {
            Results = results,
        };
    }
#if DEBUG
    public class GetMissingTypesToCreate {}

    public object Any(GetMissingTypesToCreate request) => ((GenerateCrudServices) HostContext
        .AssertPlugin<AutoQueryFeature>()
        .GenerateCrudServices).GetMissingTypesToCreate(out _);
#endif
}
--------------------------------------------------------------------------------
ID: 57
ServiceStack Attribute Information ID: 13
Class Name: AdminProfilingService
Class Example:
[DefaultRequest(typeof(AdminProfiling))]
public class AdminProfilingService : Service
{
    public async Task<object> Any(AdminProfiling request)
    {
        var feature = HostContext.AppHost.AssertPlugin<ProfilingFeature>();
        if (!HostContext.DebugMode)
            await RequiredRoleAttribute.AssertRequiredRoleAsync(Request, feature.AccessRole);
        var snapshot = request.Pending != true ? feature.Observer.GetLatestEntries(null) : feature.Observer.GetPendingEntries(null);
        var logs = snapshot.AsQueryable();
        if (!request.Source.IsNullOrEmpty())
            logs = logs.Where(x => x.Source == request.Source);
        if (!request.EventType.IsNullOrEmpty())
            logs = logs.Where(x => x.EventType == request.EventType);
        if (!request.TraceId.IsNullOrEmpty())
            logs = logs.Where(x => x.TraceId == request.TraceId);
        if (request.ThreadId != null)
            logs = logs.Where(x => x.ThreadId == request.ThreadId.Value);
        if (!request.UserAuthId.IsNullOrEmpty())
            logs = logs.Where(x => x.UserAuthId == request.UserAuthId);
        if (!request.SessionId.IsNullOrEmpty())
            logs = logs.Where(x => x.SessionId == request.SessionId);
        if (!request.Tag.IsNullOrEmpty())
            logs = logs.Where(x => x.Tag == request.Tag);
        if (request.WithErrors.HasValue)
            logs = request.WithErrors.Value ? logs.Where(x => x.Error != null) : logs.Where(x => x.Error == null);
        var query = string.IsNullOrEmpty(request.OrderBy) ? logs.OrderByDescending(x => x.Id) : logs.OrderBy(request.OrderBy);
        var results = query.Skip(request.Skip);
        results = results.Take(request.Take.GetValueOrDefault(feature.DefaultLimit));
        return new AdminProfilingResponse
        {
            Results = results.ToList(),
            Total = snapshot.Count,
        };
    }
}
--------------------------------------------------------------------------------
ID: 58
ServiceStack Attribute Information ID: 13
Class Name: GetCrudEventsService
Class Example:
[DefaultRequest(typeof(GetCrudEvents))]
public partial class GetCrudEventsService(IAutoQueryDb autoQuery, IDbConnectionFactory dbFactory) : Service
{
    public async Task<object> Any(GetCrudEvents request)
    {
        var appHost = HostContext.AppHost;
        await RequestUtils.AssertAccessRoleAsync(base.Request, accessRole: autoQuery.AccessRole, authSecret: request.AuthSecret);
        if (string.IsNullOrEmpty(request.Model))
            throw new ArgumentNullException(nameof(request.Model));
        var dto = appHost.Metadata.FindDtoType(request.Model);
        var namedConnection = dto?.FirstAttribute<NamedConnectionAttribute>()?.Name;
        using var useDb = namedConnection != null ? await dbFactory.OpenDbConnectionAsync(namedConnection).ConfigAwait() : await dbFactory.OpenDbConnectionAsync().ConfigAwait();
        var q = autoQuery.CreateQuery(request, Request, useDb);
        var response = await autoQuery.ExecuteAsync(request, q, Request, useDb).ConfigAwait();
        // EventDate is populated in UTC but in some RDBMS (SQLite) it doesn't preserve UTC Kind, so we set it here
        foreach (var result in response.Results)
        {
            if (result.EventDate.Kind == DateTimeKind.Unspecified)
                result.EventDate = DateTime.SpecifyKind(result.EventDate, DateTimeKind.Utc);
        }

        return response;
    }
}
--------------------------------------------------------------------------------
ID: 59
ServiceStack Attribute Information ID: 13
Class Name: CheckCrudEventService
Class Example:
[DefaultRequest(typeof(CheckCrudEvents))]
public partial class CheckCrudEventService(IAutoQueryDb autoQuery, IDbConnectionFactory dbFactory) : Service
{
    public async Task<object> Any(CheckCrudEvents request)
    {
        var appHost = HostContext.AppHost;
        await RequestUtils.AssertAccessRoleAsync(base.Request, accessRole: autoQuery.AccessRole, authSecret: request.AuthSecret);
        if (string.IsNullOrEmpty(request.Model))
            throw new ArgumentNullException(nameof(request.Model));
        var ids = request.Ids?.Count > 0 ? request.Ids : throw new ArgumentNullException(nameof(request.Ids));
        var dto = appHost.Metadata.FindDtoType(request.Model);
        var namedConnection = dto?.FirstAttribute<NamedConnectionAttribute>()?.Name;
        using var useDb = namedConnection != null ? await dbFactory.OpenDbConnectionAsync(namedConnection).ConfigAwait() : await dbFactory.OpenDbConnectionAsync().ConfigAwait();
        var q = useDb.From<CrudEvent>().Where(x => x.Model == request.Model).And(x => ids.Contains(x.ModelId)).SelectDistinct(x => x.ModelId);
        var results = await useDb.ColumnAsync<string>(q).ConfigAwait();
        return new CheckCrudEventsResponse
        {
            Results = results.ToList(),
        };
    }
}
--------------------------------------------------------------------------------
ID: 60
ServiceStack Attribute Information ID: 13
Class Name: GetAccessTokenService
Class Example:
[DefaultRequest(typeof(GetAccessToken))]
public class GetAccessTokenService : Service
{
    public async Task<object> Any(GetAccessToken request)
    {
        var jwtAuthProvider = (JwtAuthProvider)AuthenticateService.GetRequiredJwtAuthProvider();
        if (jwtAuthProvider.RequireSecureConnection && !Request.IsSecureConnection)
            throw HttpError.Forbidden(ErrorMessages.JwtRequiresSecureConnection.Localize(Request));
        var refreshTokenCookie = Request.Cookies.TryGetValue(Keywords.RefreshTokenCookie, out var refTok) ? refTok.Value : null;
        var refreshToken = request.RefreshToken ?? refreshTokenCookie;
        var accessToken = await jwtAuthProvider.CreateAccessTokenFromRefreshToken(refreshToken, Request).ConfigAwait();
        var response = new GetAccessTokenResponse
        {
            AccessToken = accessToken
        };
        // Don't return JWT in Response Body if Refresh Token Cookie was used
        if (refreshTokenCookie == null && jwtAuthProvider.UseTokenCookie != true)
            return response;
        var httpResult = new HttpResult(new GetAccessTokenResponse()).AddCookie(Request, new Cookie(Keywords.TokenCookie, accessToken, Cookies.RootPath) { HttpOnly = true, Secure = Request.IsSecureConnection, Expires = DateTime.UtcNow.Add(jwtAuthProvider.ExpireTokensIn), });
        return httpResult;
    }
}
--------------------------------------------------------------------------------
ID: 61
ServiceStack Attribute Information ID: 13
Class Name: UnAssignRolesService
Class Example:
[DefaultRequest(typeof(UnAssignRoles))]
public class UnAssignRolesService : Service
{
    public async Task<object> Post(UnAssignRoles request)
    {
        if (!Request.IsInProcessRequest())
            await RequiredRoleAttribute.AssertRequiredRoleAsync(Request, RoleNames.Admin);
        if (string.IsNullOrEmpty(request.UserName))
            throw new ArgumentNullException(nameof(request.UserName));
        var userAuth = await AuthRepositoryAsync.GetUserAuthByUserNameAsync(request.UserName).ConfigAwait();
        if (userAuth == null)
            throw HttpError.NotFound(request.UserName);
        await AuthRepositoryAsync.UnAssignRolesAsync(userAuth, request.Roles, request.Permissions).ConfigAwait();
        return new UnAssignRolesResponse
        {
            AllRoles = (await AuthRepositoryAsync.GetRolesAsync(userAuth).ConfigAwait()).ToList(),
            AllPermissions = (await AuthRepositoryAsync.GetPermissionsAsync(userAuth).ConfigAwait()).ToList(),
        };
    }
}
--------------------------------------------------------------------------------
ID: 62
ServiceStack Attribute Information ID: 13
Class Name: RegisterService
Class Example:
[ErrorView(nameof(Register.ErrorView))]
[DefaultRequest(typeof(Register))]
public class RegisterService : RegisterUserAuthServiceBase
{
    public static ValidateFn ValidateFn { get; set; }
    public static bool AllowUpdates { get; set; }

    /// <summary>
    /// Update an existing registration
    /// </summary>
    [Obsolete("Use PostAsync")]
    public Task<object> PutAsync(Register request)
    {
        return PostAsync(request);
    }

    /// <summary>
    /// Create new Registration
    /// </summary>
    [Obsolete("Use PostAsync")]
    public object Post(Register request)
    {
        try
        {
            var task = PostAsync(request);
            var response = task.GetResult();
            return response;
        }
        catch (Exception e)
        {
            throw e.UnwrapIfSingleException();
        }
    }

    /// <summary>
    /// Create new Registration
    /// </summary>
    public async Task<object> PostAsync(Register request)
    {
        var authFeature = GetPlugin<AuthFeature>();
        if (authFeature != null)
        {
            if (authFeature.SaveUserNamesInLowerCase)
            {
                if (request.UserName != null)
                    request.UserName = request.UserName.ToLower();
                if (request.Email != null)
                    request.Email = request.Email.ToLower();
            }
        }

        var validateResponse = ValidateFn?.Invoke(this, HttpMethods.Post, request);
        if (validateResponse != null)
            return validateResponse;
        var session = await this.GetSessionAsync().ConfigAwait();
        var newUserAuth = ToUser(request);
        var existingUser = session.IsAuthenticated ? await AuthRepositoryAsync.GetUserAuthAsync(session, null).ConfigAwait() : null;
        var registerNewUser = existingUser == null;
        if (!registerNewUser && !AllowUpdates)
            throw new NotSupportedException(ErrorMessages.RegisterUpdatesDisabled.Localize(Request));
        var runValidation = !HostContext.AppHost.GlobalRequestFiltersAsync.Contains(ValidationFilters.RequestFilterAsync) //Already gets run
 && RegistrationValidator != null;
        if (registerNewUser)
        {
            if (runValidation)
                await ValidateAndThrowAsync(request);
            var user = await AuthRepositoryAsync.CreateUserAuthAsync(newUserAuth, request.Password).ConfigAwait();
            await RegisterNewUserAsync(session, user).ConfigAwait();
        }
        else
        {
            if (runValidation)
                await RegistrationValidator.ValidateAndThrowAsync(request, ApplyTo.Put).ConfigAwait();
            var user = await AuthRepositoryAsync.UpdateUserAuthAsync(existingUser, newUserAuth, request.Password).ConfigAwait();
        }

        var response = await CreateRegisterResponse(session, request.UserName ?? request.Email, request.Password, request.AutoLogin);
        return response;
    }

    /// <summary>
    /// Logic to update UserAuth from Registration info, not enabled on PUT because of security.
    /// </summary>
    public object UpdateUserAuth(Register request)
    {
        if (!HostContext.AppHost.GlobalRequestFiltersAsyncArray.Contains(ValidationFilters.RequestFilterAsync)) //Already gets run
        {
            RegistrationValidator?.ValidateAndThrow(request, ApplyTo.Put);
        }

        var response = ValidateFn?.Invoke(this, HttpMethods.Put, request);
        if (response != null)
            return response;
        var session = this.GetSession();
        var authRepo = HostContext.AppHost.GetAuthRepository(base.Request);
        using (authRepo as IDisposable)
        {
            var existingUser = authRepo.GetUserAuth(session, null);
            if (existingUser == null)
                throw HttpError.NotFound(ErrorMessages.UserNotExists.Localize(Request));
            var newUserAuth = ToUser(request);
            authRepo.UpdateUserAuth(existingUser, newUserAuth, request.Password);
            return new RegisterResponse
            {
                UserId = existingUser.Id.ToString(CultureInfo.InvariantCulture),
            };
        }
    }

    /// <summary>
    /// Logic to update UserAuth from Registration info, not enabled on PUT because of security.
    /// </summary>
    public async Task<object> UpdateUserAuthAsync(Register request)
    {
        if (!HostContext.AppHost.GlobalRequestFiltersAsyncArray.Contains(ValidationFilters.RequestFilterAsync)) //Already gets run
        {
            await RegistrationValidator.ValidateAndThrowAsync(request, ApplyTo.Put).ConfigAwait();
        }

        var response = ValidateFn?.Invoke(this, HttpMethods.Put, request);
        if (response != null)
            return response;
        var session = await this.GetSessionAsync().ConfigAwait();
        var authRepo = HostContext.AppHost.GetAuthRepositoryAsync(base.Request);
        await using (authRepo as IAsyncDisposable)
        {
            var existingUser = await authRepo.GetUserAuthAsync(session, null).ConfigAwait();
            if (existingUser == null)
                throw HttpError.NotFound(ErrorMessages.UserNotExists.Localize(Request));
            var newUserAuth = ToUser(request);
            await authRepo.UpdateUserAuthAsync(existingUser, newUserAuth, request.Password).ConfigAwait();
            return new RegisterResponse
            {
                UserId = existingUser.Id.ToString(CultureInfo.InvariantCulture),
            };
        }
    }
}
--------------------------------------------------------------------------------
ID: 63
ServiceStack Attribute Information ID: 13
Class Name: EncryptedMessagesService
Class Example:
[DefaultRequest(typeof(GetPublicKey))]
[Restrict(VisibilityTo = RequestAttributes.None)]
public class EncryptedMessagesService : Service
{
    public object Any(EncryptedMessage request)
    {
        throw new NotImplementedException("EncryptedMessages Service cannot be called directly");
    }

    public object Any(GetPublicKey request)
    {
        var rsaParameters = HostContext.AssertPlugin<EncryptedMessagesFeature>()!.PrivateKey!.Value;
        var publicKeyXml = rsaParameters.ToPublicKeyXml();
        Request.Response.ContentType = MimeTypes.Xml;
        Request.Response.AddHeader("X-PublicKey-Hash", publicKeyXml.ToSha256Hash());
        return publicKeyXml;
    }
}
--------------------------------------------------------------------------------
ID: 64
ServiceStack Attribute Information ID: 13
Class Name: GetValidationRulesService
Class Example:
[DefaultRequest(typeof(GetValidationRules))]
[Restrict(VisibilityTo = RequestAttributes.Localhost)]
public class GetValidationRulesService(IValidationSource validationSource) : Service
{
    public async Task<object> Any(GetValidationRules request)
    {
        var feature = HostContext.AssertPlugin<ValidationFeature>();
        await RequestUtils.AssertAccessRoleAsync(base.Request, accessRole: feature.AccessRole, authSecret: request.AuthSecret).ConfigAwait();
        var type = HostContext.Metadata.FindDtoType(request.Type);
        if (type == null)
            throw HttpError.NotFound(request.Type);
        return new GetValidationRulesResponse
        {
            Results = await validationSource.GetAllValidateRulesAsync(request.Type).ConfigAwait(),
        };
    }
}
--------------------------------------------------------------------------------
ID: 65
ServiceStack Attribute Information ID: 13
Class Name: ModifyValidationRulesService
Class Example:
[DefaultRequest(typeof(ModifyValidationRules))]
[Restrict(VisibilityTo = RequestAttributes.Localhost)]
public class ModifyValidationRulesService(IValidationSource validationSource) : Service
{
    public async Task Any(ModifyValidationRules request)
    {
        var appHost = HostContext.AssertAppHost();
        var feature = appHost.AssertPlugin<ValidationFeature>();
        await RequestUtils.AssertAccessRoleAsync(base.Request, accessRole: feature.AccessRole, authSecret: request.AuthSecret).ConfigAwait();
        var utcNow = DateTime.UtcNow;
        var userName = (await base.GetSessionAsync().ConfigAwait()).GetUserAuthName();
        var rules = request.SaveRules;
        if (!rules.IsEmpty())
        {
            foreach (var rule in rules)
            {
                if (rule.Type == null)
                    throw new ArgumentNullException(nameof(rule.Type));
                var existingType = appHost.Metadata.FindDtoType(rule.Type);
                if (existingType == null)
                    throw new ArgumentException(@$"{rule.Type} does not exist", nameof(rule.Type));
                if (rule.Validator == "")
                    rule.Validator = null;
                if (rule.Condition == "")
                    rule.Condition = null;
                if (rule.Field == "")
                    rule.Field = null;
                if (rule.ErrorCode == "")
                    rule.ErrorCode = null;
                if (rule.Message == "")
                    rule.Message = null;
                if (rule.Notes == "")
                    rule.Notes = null;
                if (rule.Field != null && TypeProperties.Get(existingType).GetAccessor(rule.Field) == null)
                    throw new ArgumentException(@$"{rule.Field} does not exist on {rule.Type}", nameof(rule.Field));
                if (rule.Validator != null)
                {
                    object validator;
                    try
                    {
                        validator = appHost.EvalExpression(rule.Validator);
                        if (validator == null)
                            throw new ArgumentException(@$"Validator does not exist", nameof(rule.Validator));
                    }
                    catch (Exception e)
                    {
                        throw new ArgumentException(@$"Invalid Validator: " + e.Message, nameof(rule.Validator));
                    }

                    var validators = (validator as List<object>) ?? TypeConstants.EmptyObjectList;
                    var firstValidator = validator is IPropertyValidator pv ? pv : validator is ITypeValidator tv ? tv : validators?.FirstOrDefault() ?? validator;
                    if (rule.Field != null && !(firstValidator is IPropertyValidator && validators.All(v => v is IPropertyValidator)))
                        throw new ArgumentException(@$"{nameof(IPropertyValidator)} is expected but was {(validators?.FirstOrDefault(v => !(v is IPropertyValidator)) ?? firstValidator).GetType().Name}", nameof(rule.Validator));
                    if (rule.Field == null && !(firstValidator is ITypeValidator && validators.All(v => v is ITypeValidator)))
                        throw new ArgumentException(@$"{nameof(ITypeValidator)} is expected but was {(validators?.FirstOrDefault(v => !(v is IPropertyValidator)) ?? firstValidator).GetType().Name}", nameof(rule.Validator));
                    if (rule.Condition != null)
                        throw new ArgumentException(@$"Only {nameof(rule.Validator)} or {nameof(rule.Condition)} can be specified, not both", nameof(rule.Condition));
                }
                else
                {
                    if (rule.Condition == null)
                        throw new ArgumentNullException(nameof(rule.Validator), @$"{nameof(rule.Validator)} or {nameof(rule.Condition)} is required");
                    try
                    {
                        var ast = Validators.ParseCondition(appHost.ScriptContext, rule.Condition);
                        await ast.Init().ConfigAwait();
                    }
                    catch (Exception e)
                    {
                        var useEx = e is ScriptException se ? se.InnerException ?? e : e;
                        throw new ArgumentException(useEx.Message, nameof(rule.Condition));
                    }
                }

                if (rule.CreatedBy == null)
                {
                    rule.CreatedBy = userName;
                    rule.CreatedDate = utcNow;
                }

                rule.ModifiedBy = userName;
                rule.ModifiedDate = utcNow;
            }

            await validationSource.SaveValidationRulesAsync(rules).ConfigAwait();
        }

        if (!request.SuspendRuleIds.IsEmpty())
        {
            var suspendRules = await validationSource.GetValidateRulesByIdsAsync(request.SuspendRuleIds).ConfigAwait();
            foreach (var suspendRule in suspendRules)
            {
                suspendRule.SuspendedBy = userName;
                suspendRule.SuspendedDate = utcNow;
            }

            await validationSource.SaveValidationRulesAsync(suspendRules).ConfigAwait();
        }

        if (!request.UnsuspendRuleIds.IsEmpty())
        {
            var unsuspendRules = await validationSource.GetValidateRulesByIdsAsync(request.UnsuspendRuleIds).ConfigAwait();
            foreach (var unsuspendRule in unsuspendRules)
            {
                unsuspendRule.SuspendedBy = null;
                unsuspendRule.SuspendedDate = null;
            }

            await validationSource.SaveValidationRulesAsync(unsuspendRules).ConfigAwait();
        }

        if (!request.DeleteRuleIds.IsEmpty())
        {
            await validationSource.DeleteValidationRulesAsync(request.DeleteRuleIds.ToArray()).ConfigAwait();
        }

        if (request.ClearCache.GetValueOrDefault())
        {
            await validationSource.ClearCacheAsync().ConfigAwait();
        }
    }
}
--------------------------------------------------------------------------------
ID: 66
ServiceStack Attribute Information ID: 13
Class Name: ViewTests
Class Example:
[DefaultView("TheView")]
public class ViewTests : Service
{
    public object Get(DefaultViewAttr request) => request;
}
--------------------------------------------------------------------------------
ID: 67
ServiceStack Attribute Information ID: 13
Class Name: ValidationService
Class Example:
[DefaultView("Validation")]
public class ValidationService : Service
{
    public object Get(Validation request)
    {
        return request;
    }

    public object Post(AutoValidation request)
    {
        return request.ConvertTo<Validation>();
    }

    public object Post(ManualValidation request)
    {
        if (request.Name == null)
            throw new ArgumentNullException("Name");
        if (request.Id < 0)
            throw new ArgumentException("Id must be a positive number", "Id");
        return request.ConvertTo<Validation>();
    }
}
--------------------------------------------------------------------------------
ID: 68
ServiceStack Attribute Information ID: 13
Class Name: ContactServices
Class Example:
[Authenticate]
[ErrorView(nameof(CreateContact.ErrorView))] // Display ErrorView if HTML request results in an Exception
[DefaultView("/validation/server/contacts")]
public class ContactServices : Service
{
    private static int Counter = 0;
    internal static readonly ConcurrentDictionary<int, Data.Contact> Contacts = new ConcurrentDictionary<int, Data.Contact>();
    public object Any(GetContacts request)
    {
        var userId = this.GetUserId();
        return new GetContactsResponse
        {
            Results = Contacts.Values.Where(x => x.UserAuthId == userId).OrderByDescending(x => x.Id).Map(x => x.ConvertTo<Contact>())
        };
    }

    public object Any(GetContact request) => Contacts.TryGetValue(request.Id, out var contact) && contact.UserAuthId == this.GetUserId() ? (object)new GetContactResponse
    {
        Result = contact.ConvertTo<Contact>()
    }

    : HttpError.NotFound($"Contact was not found");
    public object Any(CreateContact request)
    {
        var newContact = request.ConvertTo<Data.Contact>();
        newContact.Id = Interlocked.Increment(ref Counter);
        newContact.UserAuthId = this.GetUserId();
        newContact.CreatedDate = newContact.ModifiedDate = DateTime.UtcNow;
        var contacts = Contacts.Values.ToList();
        var alreadyExists = contacts.Any(x => x.UserAuthId == newContact.UserAuthId && x.Name == request.Name);
        if (alreadyExists)
            throw new ArgumentException($"You already have a contact named '{request.Name}'", nameof(request.Name));
        Contacts[newContact.Id] = newContact;
        return new CreateContactResponse
        {
            Result = newContact.ConvertTo<Contact>()
        };
    }

    public object AnyHtml(CreateContact request)
    {
        Any(request);
        return HttpResult.Redirect(request.Continue ?? Request.GetView());
    }

    public void Any(DeleteContact request)
    {
        if (Contacts.TryGetValue(request.Id, out var contact) && contact.UserAuthId == this.GetUserId())
        {
            Contacts.TryRemove(request.Id, out _);
        }
    }

    public object PostHtml(DeleteContact request) // only called by html POST requests where it takes precedence
    {
        Any(request);
        return HttpResult.Redirect(request.Continue ?? Request.GetView()); //added by [DefaultView]
    }
}
--------------------------------------------------------------------------------
ID: 69
ServiceStack Attribute Information ID: 13
Class Name: RockstarsService
Class Example:
[DefaultRequest(typeof(Rockstars))]
public class RockstarsService : Service
{
    public IDbConnectionFactory DbFactory { get; set; }

    public object Get(Rockstars request)
    {
        if (request.Delete == "reset")
        {
            Db.DeleteAll<Rockstar>();
            Db.Insert(Rockstar.SeedData);
        }
        else if (request.Delete.IsInt())
        {
            Db.DeleteById<Rockstar>(request.Delete.ToInt());
        }

        return new RockstarsResponse
        {
            Aged = request.Age,
            Total = Db.Scalar<int>("select count(*) from Rockstar"),
            Results = request.Id != default(int) ? Db.Select<Rockstar>(q => q.Id == request.Id) : request.Age.HasValue ? Db.Select<Rockstar>(q => q.Age == request.Age.Value) : Db.Select<Rockstar>()
        };
    }

    public object Post(Rockstars request)
    {
        Db.Insert(request.ConvertTo<Rockstar>());
        return Get(new Rockstars());
    }
}
--------------------------------------------------------------------------------
ID: 70
ServiceStack Attribute Information ID: 13
Class Name: TodoListService
Class Example:
[DefaultRequest(typeof(TodoList))]
public class TodoListService : Service
{
    public object Get(TodoList request)
    {
        return new TodoListResponse
        {
            Results = request
        };
    }

    public object Post(TodoList request)
    {
        return new TodoListResponse
        {
            Results = request
        };
    }

    public object Put(TodoList request)
    {
        return new TodoListResponse
        {
            Results = request
        };
    }

    public object Delete(TodoList request)
    {
        return new TodoListResponse
        {
            Results = request
        };
    }
}
--------------------------------------------------------------------------------
ID: 71
ServiceStack Attribute Information ID: 13
Class Name: GetMarkerService
Class Example:
[DefaultRequest(typeof(GetRequest))]
public class GetMarkerService : Service
{
    public object Get(GetRequest request)
    {
        return new GetRequestResponse();
    }
}
--------------------------------------------------------------------------------
ID: 72
ServiceStack Attribute Information ID: 13
Class Name: CustomerService
Class Example:
[DefaultRequest(typeof(ValidCustomers))]
public class CustomerService : Service
{
    public object Get(ValidCustomers request)
    {
        return new ValidCustomersResponse
        {
            Result = request
        };
    }

    public object Post(ValidCustomers request)
    {
        return new ValidCustomersResponse
        {
            Result = request
        };
    }

    public object Put(ValidCustomers request)
    {
        return new ValidCustomersResponse
        {
            Result = request
        };
    }

    public object Delete(ValidCustomers request)
    {
        return new ValidCustomersResponse
        {
            Result = request
        };
    }
}
--------------------------------------------------------------------------------
ID: 73
ServiceStack Attribute Information ID: 17
Class Name: SqlServerMemoryOptimizedCacheEntry
Class Example:
[SqlServerMemoryOptimized(SqlServerDurability.SchemaOnly)]
public class SqlServerMemoryOptimizedCacheEntry : ICacheEntry
{
    [PrimaryKey]
    //[StringLength(StringLengthAttribute.MaxText)] // https://stackoverflow.com/a/2864109/85785
    [SqlServerBucketCount(1000000)]
    public string Id { get; set; }

    [StringLength(StringLengthAttribute.MaxText)]
    public string Data { get; set; }
    public DateTime CreatedDate { get; set; }

    [Index]
    public DateTime? ExpiryDate { get; set; }
    public DateTime ModifiedDate { get; set; }
}
--------------------------------------------------------------------------------
ID: 74
ServiceStack Attribute Information ID: 17
Class Name: SqlServer2014MemoryOptimizedCacheEntry
Class Example:
[SqlServerMemoryOptimized(SqlServerDurability.SchemaOnly)]
public class SqlServer2014MemoryOptimizedCacheEntry : ICacheEntry
{
    [PrimaryKey]
    [SqlServerCollate("Latin1_General_100_BIN2")]
    [StringLength(512)]
    [SqlServerBucketCount(10000000)]
    public string Id { get; set; }

    [StringLength(4000)]
    public string Data { get; set; }
    public DateTime CreatedDate { get; set; }
    public DateTime? ExpiryDate { get; set; }
    public DateTime ModifiedDate { get; set; }
}
--------------------------------------------------------------------------------
ID: 75
ServiceStack Attribute Information ID: 17
Class Name: SqlServer2016MemoryOptimizedCacheEntry
Class Example:
[SqlServerMemoryOptimized(SqlServerDurability.SchemaOnly)]
public class SqlServer2016MemoryOptimizedCacheEntry : ICacheEntry
{
    [PrimaryKey]
    [StringLength(StringLengthAttribute.MaxText)]
    [SqlServerBucketCount(10000000)]
    public string Id { get; set; }

    [StringLength(StringLengthAttribute.MaxText)]
    public string Data { get; set; }
    public DateTime CreatedDate { get; set; }
    public DateTime? ExpiryDate { get; set; }
    public DateTime ModifiedDate { get; set; }
}
--------------------------------------------------------------------------------
ID: 76
ServiceStack Attribute Information ID: 17
Class Name: TypeWithMemTableNoDurability
Class Example:
[SqlServerMemoryOptimized]
public class TypeWithMemTableNoDurability : TypeWithNoMemOptimization
{
}
--------------------------------------------------------------------------------
ID: 77
ServiceStack Attribute Information ID: 17
Class Name: TypeWithMemTableSchemaOnlyDurability
Class Example:
[SqlServerMemoryOptimized(SqlServerDurability.SchemaOnly)]
public class TypeWithMemTableSchemaOnlyDurability : TypeWithNoMemOptimization
{
}
--------------------------------------------------------------------------------
ID: 78
ServiceStack Attribute Information ID: 17
Class Name: TypeWithMemTableSchemaAndDataDurability
Class Example:
[SqlServerMemoryOptimized(SqlServerDurability.SchemaAndData)]
public class TypeWithMemTableSchemaAndDataDurability : TypeWithNoMemOptimization
{
}
--------------------------------------------------------------------------------
ID: 79
ServiceStack Attribute Information ID: 17
Class Name: TypeWithMemTableWithoutBIN2HashIndex
Class Example:
[SqlServerMemoryOptimized]
public class TypeWithMemTableWithoutBIN2HashIndex : TypeWithNoMemOptimization
{
    [StringLength(25)]
    [SqlServerBucketCount(1000)]
    public string Index { get; set; }
}
--------------------------------------------------------------------------------
ID: 80
ServiceStack Attribute Information ID: 17
Class Name: TypeWithMemTableWithCollatedHashIndex
Class Example:
[SqlServerMemoryOptimized]
public class TypeWithMemTableWithCollatedHashIndex : TypeWithNoMemOptimization
{
    [StringLength(25)]
    [SqlServerCollate("Latin1_General_100_BIN2")]
    [SqlServerBucketCount(1000)]
    public string Index { get; set; }
}
--------------------------------------------------------------------------------
ID: 81
ServiceStack Attribute Information ID: 18
Class Name: SendEmailCommand
Class Example:
[Worker("smtp")]
public class SendEmailCommand(ILogger<SendEmailCommand> logger, IBackgroundJobs jobs, SmtpConfig config) : SyncCommand<SendEmail>
{
    private static long count = 0;
    protected override void Run(SendEmail request)
    {
        Interlocked.Increment(ref count);
        var log = Request.CreateJobLogger(jobs, logger);
        log.LogInformation("Sending {Count} email to {Email} with subject {Subject}", count, request.To, request.Subject);
        using var client = new SmtpClient(config.Host, config.Port);
        client.Credentials = new System.Net.NetworkCredential(config.Username, config.Password);
        client.EnableSsl = true;
        // If DevToEmail is set, send all emails to that address instead
        var emailTo = config.DevToEmail != null ? new MailAddress(config.DevToEmail) : new MailAddress(request.To, request.ToName);
        var emailFrom = new MailAddress(config.FromEmail, config.FromName);
        var msg = new MailMessage(emailFrom, emailTo)
        {
            Subject = request.Subject,
            Body = request.BodyHtml ?? request.BodyText,
            IsBodyHtml = request.BodyHtml != null,
        };
        if (config.Bcc != null)
        {
            msg.Bcc.Add(new MailAddress(config.Bcc));
        }

        client.Send(msg);
    }
}
--------------------------------------------------------------------------------
ID: 82
ServiceStack Attribute Information ID: 21
Class Name: OrderTypedIndex
Class Example:
[References(typeof(OrderCostLocalIndex))]
[References(typeof(OrderCostGlobalIndex))]
[References(typeof(OrderProductGlobalIndex))]
public class OrderTypedIndex
{
    [AutoIncrement]
    public int Id { get; set; }

    [References(typeof(Customer))]
    public int CustomerId { get; set; }
    public string Product { get; set; }
    public int Qty { get; set; }
    public virtual decimal Cost { get; set; }
}
--------------------------------------------------------------------------------
ID: 83
ServiceStack Attribute Information ID: 21
Class Name: RockstarAlbum
Class Example:
[References(typeof(RockstarAlbumGenreGlobalIndex))]
public class RockstarAlbum
{
    [AutoIncrement]
    public int Id { get; set; }

    [References(typeof(Rockstar))]
    public int RockstarId { get; set; }
    public string Name { get; set; }

    [Index]
    public string Genre { get; set; }
}
--------------------------------------------------------------------------------
ID: 84
ServiceStack Attribute Information ID: 21
Class Name: Movie
Class Example:
[References(typeof(MovieTitleIndex))]
public class Movie
{
    [AutoIncrement]
    public int Id { get; set; }
    public string ImdbId { get; set; }
    public string Title { get; set; }
    public string Rating { get; set; }
    public decimal Score { get; set; }
    public string Director { get; set; }
    public DateTime ReleaseDate { get; set; }
    public string TagLine { get; set; }
    public List<string> Genres { get; set; }
}
--------------------------------------------------------------------------------
ID: 85
ServiceStack Attribute Information ID: 21
Class Name: ACSProfile
Class Example:
[Route("/api/acsprofiles", "POST,PUT,PATCH,DELETE")]
[Route("/api/acsprofiles/{profileId}")]
[References(typeof(Check.ServiceInterface.acsprofileResponse))]
[Serializable]
public partial class ACSProfile : IReturn<acsprofileResponse>, IHasVersion, IHasSessionId
{
    public virtual string profileId { get; set; }

    [StringLength(20)]
    public virtual string shortName { get; set; }

    [StringLength(60)]
    public virtual string longName { get; set; }

    [StringLength(20)]
    public virtual string regionId { get; set; }

    [StringLength(20)]
    public virtual string groupId { get; set; }

    [StringLength(12)]
    public virtual string deviceID { get; set; }
    public virtual DateTime lastUpdated { get; set; }
    public virtual bool enabled { get; set; }
    public virtual int Version { get; set; }
    public virtual string SessionId { get; set; }
}
--------------------------------------------------------------------------------
ID: 86
ServiceStack Attribute Information ID: 21
Class Name: File
Class Example:
[References(typeof(FilePathIndex))]
[CompositeKey("Account", "S3Location")]
public class File
{
    public Guid Account { get; set; }
    public string S3Location { get; set; }
    public string Path { get; set; }
    public DateTime ModifiedUtc { get; set; }
}
--------------------------------------------------------------------------------
ID: 87
ServiceStack Attribute Information ID: 21
Class Name: OrderWithLocalTypedIndex
Class Example:
[References(typeof(OrderCostIndex))]
public class OrderWithLocalTypedIndex : Order
{
}
--------------------------------------------------------------------------------
ID: 88
ServiceStack Attribute Information ID: 21
Class Name: OrderWithGlobalTypedIndex
Class Example:
[References(typeof(OrderGlobalCostIndex))]
public class OrderWithGlobalTypedIndex : Order
{
    public int ProductId { get; set; }
}
--------------------------------------------------------------------------------
ID: 89
ServiceStack Attribute Information ID: 21
Class Name: TableWithTypedGlobalIndex
Class Example:
[References(typeof(GlobalIndexWithInterfaceAttrs))]
public class TableWithTypedGlobalIndex
{
    public string A { get; set; }
    public string B { get; set; }

    [RangeKey]
    public string C { get; set; }

    [HashKey]
    public string D { get; set; }
    public string E { get; set; }
}
--------------------------------------------------------------------------------
ID: 90
ServiceStack Attribute Information ID: 21
Class Name: TableWithGlobalIndexProvision
Class Example:
[References(typeof(GlobalIndexProvision))]
public class TableWithGlobalIndexProvision
{
    public string Id { get; set; }
    public string A { get; set; }
}
--------------------------------------------------------------------------------
ID: 91
ServiceStack Attribute Information ID: 21
Class Name: Rockstar
Class Example:
//Poco Data Model for OrmLite + SeedData 
[Route("/rockstars", "POST")]
[References(typeof(RockstarAgeIndex))]
[References(typeof(RockstarAgeAllIndex))]
public class Rockstar
{
    [AutoIncrement]
    public int Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public int? Age { get; set; }
    public bool Alive { get; set; }
    public string Url => $"/stars/{(Alive ? "alive" : "dead")}/{LastName.ToLower()}/";

    public Rockstar()
    {
    }

    public Rockstar(int id, string firstName, string lastName, int age, bool alive)
    {
        Id = id;
        FirstName = firstName;
        LastName = lastName;
        Age = age;
        Alive = alive;
    }
}
--------------------------------------------------------------------------------
ID: 92
ServiceStack Attribute Information ID: 22
Class Name: FileTable
Class Example:
[SqlServerFileTable(directory: "FILESTREAM_DIR")]
public class FileTable
{
    [PrimaryKey]
    [CustomField("uniqueidentifier ROWGUIDCOL NOT NULL")]
    [Default("newuid()")]
    [Alias("stream_id")]
    public Guid Id { get; set; }

    [CustomField("varbinary(max) FILESTREAM")]
    [Alias("file_stream")]
    //[DataAnnotations.Ignore]
    public byte[] FileContent { get; set; }

    [Alias("name")]
    [StringLength(255)]
    public string Name { get; set; }

    [Alias("path_locator")]
    public SqlHierarchyId Path { get; set; }

    //[ForeignKey(typeof(FileStream))]
    [Alias("parent_path_locator")]
    [Compute]
    public SqlHierarchyId? ParentPath { get; set; }

    [Alias("file_type")]
    [Compute]
    [StringLength(255)]
    public string FileType { get; set; }

    [Alias("cached_file_size")]
    [Compute]
    public long? FileSize { get; set; }

    [Alias("creation_time")]
    public DateTimeOffset CreationDateTime { get; set; }

    [Alias("last_write_time")]
    public DateTimeOffset LastWriteDateTime { get; set; }

    [Alias("last_access_time")]
    public DateTimeOffset? LastAccessDateTime { get; set; }

    [Alias("is_directory")]
    public bool IsDirectory { get; set; }

    [Alias("is_offline")]
    public bool IsOffline { get; set; }

    [Alias("is_hidden")]
    public bool IsHidden { get; set; }

    [Alias("is_readonly")]
    public bool IsReadOnly { get; set; }

    [Alias("is_archive")]
    public bool IsArchive { get; set; }

    [Alias("is_system")]
    public bool IsSystem { get; set; }

    [Alias("is_temporary")]
    public bool IsTemporary { get; set; }
}
--------------------------------------------------------------------------------
ID: 93
ServiceStack Attribute Information ID: 27
Class Name: ModelWithPreCreateSql
Class Example:
[PreCreateTable("CREATE INDEX udxNoTable on NonExistingTable (Name);")]
public class ModelWithPreCreateSql
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 94
ServiceStack Attribute Information ID: 27
Class Name: ModelWithPreAndPostDrop
Class Example:
[PreDropTable("-- PreDropTable")]
[PostDropTable("-- PostDropTable")]
[PreCreateTable("-- PreCreateTable")]
[PostCreateTable("-- PostCreateTable")]
public class ModelWithPreAndPostDrop
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 95
ServiceStack Attribute Information ID: 28
Class Name: MetadataTypesConfig
Class Example:
[Exclude(Feature.Soap | Feature.ApiExplorer)]
public class MetadataTypesConfig
{
    public MetadataTypesConfig(string baseUrl = null, bool makePartial = true, bool makeVirtual = true, bool addReturnMarker = true, bool convertDescriptionToComments = true, bool addDocAnnotations = true, bool addDataContractAttributes = false, bool addIndexesToDataMembers = false, bool addGeneratedCodeAttributes = false, string addDefaultXmlNamespace = null, string baseClass = null, string package = null, bool addResponseStatus = false, bool addServiceStackTypes = true, bool addModelExtensions = true, bool addPropertyAccessors = true, bool excludeGenericBaseTypes = false, bool settersReturnThis = true, bool addNullableAnnotations = false, bool makePropertiesOptional = false, bool makeDataContractsExtensible = false, bool initializeCollections = true, int? addImplicitVersion = null)
    {
        BaseUrl = baseUrl;
        MakePartial = makePartial;
        MakeVirtual = makeVirtual;
        AddReturnMarker = addReturnMarker;
        AddDescriptionAsComments = convertDescriptionToComments;
        AddDocAnnotations = addDocAnnotations;
        AddDataContractAttributes = addDataContractAttributes;
        AddDefaultXmlNamespace = addDefaultXmlNamespace;
        BaseClass = baseClass;
        Package = package;
        MakeDataContractsExtensible = makeDataContractsExtensible;
        AddIndexesToDataMembers = addIndexesToDataMembers;
        AddGeneratedCodeAttributes = addGeneratedCodeAttributes;
        InitializeCollections = initializeCollections;
        AddResponseStatus = addResponseStatus;
        AddServiceStackTypes = addServiceStackTypes;
        AddModelExtensions = addModelExtensions;
        AddPropertyAccessors = addPropertyAccessors;
        ExcludeGenericBaseTypes = excludeGenericBaseTypes;
        SettersReturnThis = settersReturnThis;
        AddNullableAnnotations = addNullableAnnotations;
        MakePropertiesOptional = makePropertiesOptional;
        AddImplicitVersion = addImplicitVersion;
    }

    public string BaseUrl { get; set; }
    public string UsePath { get; set; }
    public bool MakePartial { get; set; }
    public bool MakeVirtual { get; set; }
    public bool MakeInternal { get; set; }
    public string BaseClass { get; set; }
    public string Package { get; set; }
    public bool AddReturnMarker { get; set; }
    public bool AddDescriptionAsComments { get; set; }
    public bool AddDocAnnotations { get; set; }
    public bool AddDataContractAttributes { get; set; }
    public bool AddIndexesToDataMembers { get; set; }
    public bool AddGeneratedCodeAttributes { get; set; }
    public int? AddImplicitVersion { get; set; }
    public bool AddResponseStatus { get; set; }
    public bool AddServiceStackTypes { get; set; }
    public bool AddModelExtensions { get; set; }
    public bool AddPropertyAccessors { get; set; }
    public bool ExcludeGenericBaseTypes { get; set; }
    public bool SettersReturnThis { get; set; }
    public bool AddNullableAnnotations { get; set; }
    public bool MakePropertiesOptional { get; set; }
    public bool ExportAsTypes { get; set; }
    public bool ExcludeImplementedInterfaces { get; set; }
    public string AddDefaultXmlNamespace { get; set; }
    public bool MakeDataContractsExtensible { get; set; }
    public bool InitializeCollections { get; set; }
    public List<string> AddNamespaces { get; set; }
    public List<string> DefaultNamespaces { get; set; }
    public List<string> DefaultImports { get; set; }
    public List<string> IncludeTypes { get; set; }
    public List<string> ExcludeTypes { get; set; }
    public List<string> ExportTags { get; set; }
    public List<string> TreatTypesAsStrings { get; set; }
    public bool ExportValueTypes { get; set; }
    public string GlobalNamespace { get; set; }
    public bool ExcludeNamespace { get; set; }
    public string DataClass { get; set; }
    public string DataClassJson { get; set; }
    public HashSet<Type> IgnoreTypes { get; set; }
    public HashSet<Type> ExportTypes { get; set; }
    public HashSet<Type> ExportAttributes { get; set; }
    public List<string> IgnoreTypesInNamespaces { get; set; }
}
--------------------------------------------------------------------------------
ID: 96
ServiceStack Attribute Information ID: 28
Class Name: MetadataTypes
Class Example:
[Exclude(Feature.Soap | Feature.ApiExplorer)]
public class MetadataTypes
{
    public MetadataTypesConfig Config { get; set; }
    public List<string> Namespaces { get; set; } = [];
    public List<MetadataType> Types { get; set; } = [];
    public List<MetadataOperationType> Operations { get; set; } = [];
}
--------------------------------------------------------------------------------
ID: 97
ServiceStack Attribute Information ID: 28
Class Name: AppMetadata
Class Example:
[Exclude(Feature.Soap | Feature.ApiExplorer)]
public class AppMetadata : IMeta
{
    public DateTime Date { get; set; }
    public AppInfo App { get; set; }
    public UiInfo Ui { get; set; }
    public ConfigInfo Config { get; set; }
    public Dictionary<string, string> ContentTypeFormats { get; set; }
    public Dictionary<string, string> HttpHandlers { get; set; }
    public PluginInfo Plugins { get; set; }
    public Dictionary<string, CustomPluginInfo> CustomPlugins { get; set; }
    public MetadataTypes Api { get; set; }
    public Dictionary<string, string> Meta { get; set; }

    [IgnoreDataMember]
    public AppMetadataCache Cache { get; set; }
}
--------------------------------------------------------------------------------
ID: 98
ServiceStack Attribute Information ID: 28
Class Name: ConfigInfo
Class Example:
[Exclude(Feature.Soap | Feature.ApiExplorer)]
public class ConfigInfo : IMeta
{
    public bool? DebugMode { get; set; }
    public Dictionary<string, string> Meta { get; set; }
}
--------------------------------------------------------------------------------
ID: 99
ServiceStack Attribute Information ID: 28
Class Name: PluginInfo
Class Example:
[Exclude(Feature.Soap | Feature.ApiExplorer)]
public class PluginInfo : IMeta
{
    public List<string> Loaded { get; set; }
    public AuthInfo Auth { get; set; }
    public ApiKeyInfo ApiKey { get; set; }
    public CommandsInfo Commands { get; set; }
    public AutoQueryInfo AutoQuery { get; set; }
    public ValidationInfo Validation { get; set; }
    public SharpPagesInfo SharpPages { get; set; }
    public RequestLogsInfo RequestLogs { get; set; }
    public ProfilingInfo Profiling { get; set; }
    public FilesUploadInfo FilesUpload { get; set; }
    public AdminUsersInfo AdminUsers { get; set; }
    public AdminIdentityUsersInfo AdminIdentityUsers { get; set; }
    public AdminRedisInfo AdminRedis { get; set; }
    public AdminDatabaseInfo AdminDatabase { get; set; }
    public Dictionary<string, string> Meta { get; set; }
}
--------------------------------------------------------------------------------
ID: 100
ServiceStack Attribute Information ID: 28
Class Name: LinkInfo
Class Example:
[Exclude(Feature.Soap | Feature.ApiExplorer)]
public class LinkInfo
{
    public string Id { get; set; }
    public string Href { get; set; }
    public string Label { get; set; }
    public ImageInfo Icon { get; set; }
    /// <summary>
    /// Only show if authAttributes.contains(Show) E.g. limit to role:TheRole 
    /// </summary>
    public string Show { get; set; }
    /// <summary>
    /// Do not show if authAttributes.contains(Hide) E.g. hide from role:TheRole 
    /// </summary>
    public string Hide { get; set; }
}
--------------------------------------------------------------------------------
ID: 1001
ServiceStack Attribute Information ID: 69
Class Name: HelloSecureRestricted
Class Example:
[Restrict(RequestAttributes.Secure)]
public class HelloSecureRestricted : IReturn<HelloSecureRestrictedResponse>
{
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 1002
ServiceStack Attribute Information ID: 69
Class Name: HttpPostXmlOrSecureLocalSubnetRestriction
Class Example:
[Restrict(RequestAttributes.LocalSubnet | RequestAttributes.Secure, RequestAttributes.HttpPost | RequestAttributes.Xml)]
[DataContract]
public class HttpPostXmlOrSecureLocalSubnetRestriction
{
}
--------------------------------------------------------------------------------
ID: 1003
ServiceStack Attribute Information ID: 69
Class Name: HttpPostXmlAndSecureLocalSubnetRestriction
Class Example:
[Restrict(RequestAttributes.LocalSubnet | RequestAttributes.Secure | RequestAttributes.HttpPost | RequestAttributes.Xml)]
[DataContract]
public class HttpPostXmlAndSecureLocalSubnetRestriction
{
}
--------------------------------------------------------------------------------
ID: 1004
ServiceStack Attribute Information ID: 69
Class Name: MqRestriction
Class Example:
[Restrict(RequestAttributes.MessageQueue)]
public class MqRestriction : IReturn<MqRestrictionResponse>
{
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 1005
ServiceStack Attribute Information ID: 69
Class Name: VisibleLocalhost
Class Example:
[Restrict(VisibleLocalhostOnly = true)]
public class VisibleLocalhost
{
}
--------------------------------------------------------------------------------
ID: 1006
ServiceStack Attribute Information ID: 69
Class Name: VisibleInternal
Class Example:
[Restrict(VisibleInternalOnly = true)]
public class VisibleInternal
{
}
--------------------------------------------------------------------------------
ID: 1007
ServiceStack Attribute Information ID: 69
Class Name: LocalhostOnly
Class Example:
[Restrict(LocalhostOnly = true)]
public class LocalhostOnly
{
}
--------------------------------------------------------------------------------
ID: 1008
ServiceStack Attribute Information ID: 69
Class Name: InternalOnly
Class Example:
[Restrict(InternalOnly = true)]
public class InternalOnly
{
}
--------------------------------------------------------------------------------
ID: 1009
ServiceStack Attribute Information ID: 71
Class Name: GrpcFeature
Class Example:
[Priority(10)]
public class GrpcFeature : IPlugin, IConfigureServices, IPreInitPlugin, IPostInitPlugin, Model.IHasStringId
{
    public string Id { get; set; } = Plugins.Grpc;
    public string ServicesName { get; set; } = "GrpcServices";
    public Type GrpcServicesBaseType { get; set; } = typeof(GrpcServiceBase);
    public Type GrpcServicesType { get; private set; }
    public Action<TypeBuilder, MethodBuilder, Type> GenerateServiceFilter { get; set; }
    public Func<Type, string, bool> CreateDynamicService { get; set; } = GrpcConfig.HasDynamicAttribute;
    public Func<IResponse, Status?> ToGrpcStatus { get; set; }
    /// <summary>
    /// Only generate specified Verb entries for "ANY" routes
    /// </summary>
    public List<string> DefaultMethodsForAny { get; set; } = [HttpMethods.Get, HttpMethods.Post, HttpMethods.Put, HttpMethods.Delete];
    public List<string> AutoQueryMethodsForAny { get; set; } = [HttpMethods.Get];
    public Func<Type, List<string>> GenerateMethodsForAny { get; }

    public List<string> DefaultGenerateMethodsForAny(Type requestType) => typeof(IQuery).IsAssignableFrom(requestType) ? AutoQueryMethodsForAny : DefaultMethodsForAny;
    public HashSet<string>? IgnoreResponseHeaders { get; set; } = [HttpHeaders.Vary, HttpHeaders.XPoweredBy];
    public List<Type> RegisterServices { get; set; } = [typeof(StreamFileService), typeof(SubscribeServerEventsService)];
    public List<Type> IncludeRequestTypes { get; } = [typeof(GetFile), typeof(GetFileUpload), typeof(StoreFileUpload), typeof(ReplaceFileUpload), typeof(DeleteFileUpload), typeof(ConvertSessionToToken), ];
    internal Dictionary<Type, Type> RequestServiceTypeMap { get; } = new();
    public bool DisableResponseHeaders { get => IgnoreResponseHeaders == null; set => IgnoreResponseHeaders = null; }
    public bool DisableRequestParamsInHeaders { get; set; }
    public List<ProtoOptionDelegate> ProtoOptions { get; set; } = [ProtoOption.CSharpNamespace, ProtoOption.PhpNamespace];

    private readonly IApplicationBuilder app;
    public GrpcFeature(IApplicationBuilder app)
    {
        this.app = app;
        GenerateMethodsForAny = DefaultGenerateMethodsForAny;
    }

    public void BeforePluginsLoaded(IAppHost appHost)
    {
        appHost.ConfigurePlugin<MetadataFeature>(feature => feature.AddPluginLink("types/proto", "gRPC .proto APIs"));
    }

    public void Configure(IServiceCollection services)
    {
        services.RegisterService(typeof(TypesProtoService));
        foreach (var serviceType in RegisterServices)
        {
            if (!typeof(IStreamService).IsAssignableFrom(serviceType))
            {
                services.RegisterService(serviceType);
            }
            else
            {
                services.AddSingleton(serviceType);
            }
        }
    }

    public void Register(IAppHost appHost)
    {
        var cors = appHost.GetPlugin<CorsFeature>();
        if (cors != null && IgnoreResponseHeaders != null)
        {
            IgnoreResponseHeaders.AddDistinctRange([HttpHeaders.AllowOrigin, HttpHeaders.AllowMethods, HttpHeaders.AllowHeaders, HttpHeaders.AllowCredentials, HttpHeaders.ExposeHeaders, HttpHeaders.AccessControlMaxAge, ]);
        }

        NativeTypesService.TypeLinksFilters.Add((req, links) =>
        {
            links["Proto"] = new TypesProto().ToAbsoluteUri(req);
        });
    }

    public void AfterPluginsLoaded(IAppHost appHost)
    {
        var streamServices = RegisterServices.Where(x => typeof(IStreamService).IsAssignableFrom(x)).ToList();
        var ops = new List<Operation>();
        var allDtos = new HashSet<Type>();
        foreach (var op in appHost.Metadata.Operations)
        {
            if (!ShouldRegisterService(op))
                continue;
            ops.Add(op);
            ServiceMetadata.AddReferencedTypes(allDtos, op.RequestType);
            ServiceMetadata.AddReferencedTypes(allDtos, op.ResponseType);
        }

        GrpcServicesType = GenerateGrpcServices(ops, streamServices);
        var genericMi = GetType().GetMethod(nameof(MapGrpcService), BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
        var mi = genericMi.MakeGenericMethod(GrpcServicesType);
        mi.Invoke(this, TypeConstants.EmptyObjectArray);
        foreach (var serviceType in streamServices)
        {
            var genericDef = serviceType.GetTypeWithGenericTypeDefinitionOf(typeof(IStreamService<, >));
            foreach (var argType in genericDef.GenericTypeArguments)
            {
                ServiceMetadata.AddReferencedTypes(allDtos, argType);
            }

            var requestType = genericDef.GenericTypeArguments[0];
            RequestServiceTypeMap[requestType] = serviceType;
        }

        RegisterDtoTypes(allDtos);
    }

    public Func<Operation, bool?> RegisterService { get; set; }

    private bool ShouldRegisterService(Operation op)
    {
        var ret = RegisterService?.Invoke(op);
        if (ret != null)
            return ret.Value;
        // don't register hidden services unless IncludeRequestTypes
        if (!IncludeRequestTypes.Contains(op.RequestType))
        {
            if (op.RequestType.FirstAttribute<RestrictAttribute>()?.VisibilityTo == RequestAttributes.None)
                return false;
            if (op.ServiceType.FirstAttribute<RestrictAttribute>()?.VisibilityTo == RequestAttributes.None)
                return false;
            if (op.RequestType.FirstAttribute<ExcludeAttribute>()?.Feature.HasFlag(Feature.Metadata) == true)
                return false;
            if (op.ServiceType.FirstAttribute<ExcludeAttribute>()?.Feature.HasFlag(Feature.Metadata) == true)
                return false;
        }

        // Only enable Services via Grpc with known Response Types 
        var responseType = op.ResponseType ?? typeof(EmptyResponse); //void responses can return empty ErrorResponse 
        if (responseType == typeof(object) || responseType == typeof(Task<object>))
            return false;
        // Only enable Services that are annotated with [DataContract] or [ProtoContract] attributes. ProtoBuf requires index per prop
        var isDataContract = op.RequestType.HasAttribute<DataContractAttribute>();
        var isProtoContract = op.RequestType.HasAttribute<ProtoContractAttribute>();
        if (!(isDataContract || isProtoContract))
            return false;
        if (isDataContract)
        {
            var log = LogManager.GetLogger(GetType());
            var missingMemberOrders = new List<string>();
            missingMemberOrders.Clear();
            foreach (var prop in op.RequestType.GetPublicProperties())
            {
                var dataMember = prop.FirstAttribute<DataMemberAttribute>();
                if (dataMember is { Order: 0 })
                    missingMemberOrders.Add(prop.Name);
            }

            if (missingMemberOrders.Count > 0)
            {
                if (log.IsDebugEnabled)
                    log.Debug($"{op.RequestType.Name} properties: '{string.Join(", ", missingMemberOrders)}' are missing '[DataMember(Order=N)]' annotations required by GRPC.");
                return false;
            }

            missingMemberOrders.Clear();
            foreach (var prop in responseType.GetPublicProperties())
            {
                var dataMember = prop.FirstAttribute<DataMemberAttribute>();
                if (dataMember is { Order: 0 })
                    missingMemberOrders.Add(prop.Name);
            }

            if (missingMemberOrders.Count > 0)
            {
                if (log.IsDebugEnabled)
                    log.Debug($"{responseType.Name} properties: '{string.Join(", ", missingMemberOrders)}' are missing '[DataMember(Order=N)]' annotations required by GRPC.");
                return false;
            }
        }

        return true;
    }

    private static void RegisterDtoTypes(IEnumerable<Type> allDtos)
    {
        // All DTO Types with inheritance need to be registered in GrpcMarshaller<T> / GrpcUtils.TypeModel
        foreach (var dto in allDtos)
        {
            GrpcConfig.Register(dto);
        }
    }

    internal void MapGrpcService<TService>()
        where TService : class
    {
        app.UseEndpoints(endpoints => endpoints.MapGrpcService<TService>());
    }

    public Type GenerateGrpcServices(IEnumerable<Operation> metadataOperations, IEnumerable<Type> streamServices)
    {
        var assemblyName = new AssemblyName
        {
            Name = "tmpAssemblyGrpc"
        };
        var typeBuilder = AssemblyBuilder.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run).DefineDynamicModule("tmpModuleGrpc").DefineType(ServicesName, TypeAttributes.Public | TypeAttributes.Class, GrpcServicesBaseType);
        var log = LogManager.GetLogger(GetType());
        var methods = new List<string>();
        foreach (var op in metadataOperations)
        {
            var responseType = op.ResponseType ?? typeof(EmptyResponse); //void responses can return empty ErrorResponse 
            methods.Clear();
            foreach (var action in op.Actions)
            {
                if (action == ActionContext.AnyAction)
                {
                    if (typeof(IVerb).IsAssignableFrom(op.RequestType))
                    {
                        if (typeof(IGet).IsAssignableFrom(op.RequestType))
                            methods.Add(HttpMethods.Get);
                        if (typeof(IPost).IsAssignableFrom(op.RequestType))
                            methods.Add(HttpMethods.Post);
                        if (typeof(IPut).IsAssignableFrom(op.RequestType))
                            methods.Add(HttpMethods.Put);
                        if (typeof(IDelete).IsAssignableFrom(op.RequestType))
                            methods.Add(HttpMethods.Delete);
                        if (typeof(IPatch).IsAssignableFrom(op.RequestType))
                            methods.Add(HttpMethods.Patch);
                        if (typeof(IOptions).IsAssignableFrom(op.RequestType))
                            methods.Add(HttpMethods.Options);
                    }
                    else
                    {
                        var crudMethod = AutoCrudOperation.ToHttpMethod(op.RequestType);
                        if (crudMethod != null)
                        {
                            methods.Add(crudMethod);
                        }
                        else
                        {
                            var anyMethods = GenerateMethodsForAny(op.RequestType);
                            if (!anyMethods.IsEmpty())
                            {
                                methods.AddRange(anyMethods);
                            }
                        }
                    }
                }
                else
                {
                    methods.Add(action);
                }
            }

            var genMethods = methods.Distinct();
            foreach (var action in genMethods)
            {
                var requestType = op.RequestType;
                var methodName = GrpcConfig.GetServiceName(action, requestType.Name);
                if (log.IsDebugEnabled)
                    log.DebugFormat("grpc {0}({1})", methodName, requestType.Name);
                var method = typeBuilder.DefineMethod(methodName, MethodAttributes.Public | MethodAttributes.Virtual, CallingConventions.Standard, returnType: typeof(Task<>).MakeGenericType(responseType), parameterTypes: [requestType, typeof(CallContext)]);
                GenerateServiceFilter?.Invoke(typeBuilder, method, requestType);
                var il = method.GetILGenerator();
                var mi = GrpcServicesBaseType.GetMethod("Execute", BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                var genericMi = mi.MakeGenericMethod(responseType);
                il.Emit(OpCodes.Nop);
                il.Emit(OpCodes.Ldarg_0);
                il.Emit(OpCodes.Ldstr, action);
                il.Emit(OpCodes.Ldarg_1);
                il.Emit(OpCodes.Ldarg_2);
                il.Emit(OpCodes.Callvirt, genericMi);
                il.Emit(OpCodes.Ret);
                if (CreateDynamicService(requestType, action))
                {
                    var dynamicMethodName = GrpcConfig.GetServiceName(action + Keywords.Dynamic, requestType.Name);
                    if (log.IsDebugEnabled)
                        log.DebugFormat("grpc dynamic {0}(DynamicRequest)", dynamicMethodName);
                    method = typeBuilder.DefineMethod(dynamicMethodName, MethodAttributes.Public | MethodAttributes.Virtual, CallingConventions.Standard, returnType: typeof(Task<>).MakeGenericType(responseType), parameterTypes: [typeof(DynamicRequest), typeof(CallContext)]);
                    GenerateServiceFilter?.Invoke(typeBuilder, method, requestType);
                    il = method.GetILGenerator();
                    mi = GrpcServicesBaseType.GetMethod("ExecuteDynamic", BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    genericMi = mi.MakeGenericMethod(requestType, responseType);
                    il.Emit(OpCodes.Nop);
                    il.Emit(OpCodes.Ldarg_0);
                    il.Emit(OpCodes.Ldstr, action);
                    il.Emit(OpCodes.Ldarg_1);
                    il.Emit(OpCodes.Ldarg_2);
                    il.Emit(OpCodes.Callvirt, genericMi);
                    il.Emit(OpCodes.Ret);
                }
            }
        }

        foreach (var streamService in streamServices)
        {
            var genericDef = streamService.GetTypeWithGenericTypeDefinitionOf(typeof(IStreamService<, >));
            var requestType = genericDef.GenericTypeArguments[0];
            var responseType = genericDef.GenericTypeArguments[1];
            var methodName = GrpcConfig.GetServerStreamServiceName(requestType.Name);
            if (log.IsDebugEnabled)
                log.DebugFormat("grpc stream {0}({1})", methodName, requestType.Name);
            var method = typeBuilder.DefineMethod(methodName, MethodAttributes.Public | MethodAttributes.Virtual, CallingConventions.Standard, returnType: typeof(IAsyncEnumerable<>).MakeGenericType(responseType), parameterTypes: [requestType, typeof(CallContext)]);
            GenerateServiceFilter?.Invoke(typeBuilder, method, requestType);
            var il = method.GetILGenerator();
            var mi = GrpcServicesBaseType.GetMethod("Stream", BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
            var genericMi = mi.MakeGenericMethod(requestType, responseType);
            il.Emit(OpCodes.Nop);
            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldarg_1);
            il.Emit(OpCodes.Ldarg_2);
            il.Emit(OpCodes.Callvirt, genericMi);
            il.Emit(OpCodes.Ret);
        }

        var servicesType = typeBuilder.CreateTypeInfo().AsType();
        return servicesType;
    }
}
--------------------------------------------------------------------------------
ID: 1010
ServiceStack Attribute Information ID: 71
Class Name: ConfigureOpenApi
Class Example:
/// <summary>
/// Run after AppHost.Configure()
/// </summary>
[Priority(1)]
public class ConfigureOpenApi : IConfigureAppHost
{
    public void Configure(IAppHost appHost)
    {
        appHost.Plugins.Add(new OpenApiFeature { UseBearerSecurity = true, });
    }
}
--------------------------------------------------------------------------------
ID: 1011
ServiceStack Attribute Information ID: 71
Class Name: MyPreConfigureServices
Class Example:
[Priority(-1)]
public class MyPreConfigureServices : IConfigureServices
{
    public void Configure(IServiceCollection services) => "#1".Print(); // #1
}
--------------------------------------------------------------------------------
ID: 1012
ServiceStack Attribute Information ID: 71
Class Name: MyStartup
Class Example:
[Priority(-1)]
public class MyStartup : IStartup
{
    public IServiceProvider ConfigureServices(IServiceCollection services)
    {
        "#2".Print(); // #2
        return null;
    }

    public void Configure(IApplicationBuilder app) => "#6".Print(); // #6
}
--------------------------------------------------------------------------------
ID: 1013
ServiceStack Attribute Information ID: 71
Class Name: MyPostConfigureServices
Class Example:
[Priority(1)]
public class MyPostConfigureServices : IConfigureServices
{
    public void Configure(IServiceCollection services) => "#5".Print(); // #5
}
--------------------------------------------------------------------------------
ID: 1014
ServiceStack Attribute Information ID: 71
Class Name: MyPreConfigureApp
Class Example:
[Priority(-1)]
public class MyPreConfigureApp : IConfigureApp
{
    public void Configure(IApplicationBuilder app) => "#7".Print(); // #7
}
--------------------------------------------------------------------------------
ID: 1015
ServiceStack Attribute Information ID: 72
Class Name: ModelWithPreDropSql
Class Example:
[PreDropTable("CREATE INDEX udxNoTable on NonExistingTable (Name);")]
public class ModelWithPreDropSql
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 1016
ServiceStack Attribute Information ID: 72
Class Name: ModelWithPreAndPostDrop
Class Example:
[PreDropTable("-- PreDropTable")]
[PostDropTable("-- PostDropTable")]
[PreCreateTable("-- PreCreateTable")]
[PostCreateTable("-- PostCreateTable")]
public class ModelWithPreAndPostDrop
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 1017
ServiceStack Attribute Information ID: 73
Class Name: FullRegistrationValidator
Class Example:
[IgnoreServices]
public class FullRegistrationValidator : RegistrationValidator
{
    public FullRegistrationValidator()
    {
        RuleSet(ApplyTo.Post, () => RuleFor(x => x.DisplayName).NotEmpty());
    }
}
--------------------------------------------------------------------------------
ID: 1018
ServiceStack Attribute Information ID: 73
Class Name: RegistrationValidator
Class Example:
[IgnoreServices]
public class RegistrationValidator : AbstractValidator<Register>
{
    public RegistrationValidator()
    {
        RuleSet(ApplyTo.Post, () =>
        {
            RuleFor(x => x.Password).NotEmpty();
            RuleFor(x => x.ConfirmPassword).Equal(x => x.Password).When(x => x.ConfirmPassword != null).WithErrorCode(nameof(ErrorMessages.PasswordsShouldMatch)).WithMessage(ErrorMessages.PasswordsShouldMatch.Localize(base.Request));
            RuleFor(x => x.UserName).NotEmpty().When(x => x.Email.IsNullOrEmpty());
            RuleFor(x => x.Email).NotEmpty().EmailAddress().When(x => x.UserName.IsNullOrEmpty());
            RuleFor(x => x.UserName).MustAsync(async (x, token) =>
            {
                var authRepo = HostContext.AppHost.GetAuthRepositoryAsync(base.Request);
                await using (authRepo as IAsyncDisposable)
                {
                    return await authRepo.GetUserAuthByUserNameAsync(x).ConfigAwait() == null;
                }
            }).WithErrorCode("AlreadyExists").WithMessage(ErrorMessages.UsernameAlreadyExists.Localize(base.Request)).When(x => !x.UserName.IsNullOrEmpty());
            RuleFor(x => x.Email).MustAsync(async (x, token) =>
            {
                var authRepo = HostContext.AppHost.GetAuthRepositoryAsync(base.Request);
                await using (authRepo as IAsyncDisposable)
                {
                    return x.IsNullOrEmpty() || await authRepo.GetUserAuthByUserNameAsync(x).ConfigAwait() == null;
                }
            }).WithErrorCode("AlreadyExists").WithMessage(ErrorMessages.EmailAlreadyExists.Localize(base.Request)).When(x => !x.Email.IsNullOrEmpty());
        });
        RuleSet(ApplyTo.Put, () =>
        {
            RuleFor(x => x.UserName).NotEmpty().When(x => x.Email.IsNullOrEmpty());
            RuleFor(x => x.Email).NotEmpty().EmailAddress().When(x => x.UserName.IsNullOrEmpty());
        });
    }
}
--------------------------------------------------------------------------------
ID: 1019
ServiceStack Attribute Information ID: 73
Class Name: IdentityRegistrationValidator
Class Example:
[IgnoreServices]
public class IdentityRegistrationValidator<TUser, TKey> : AbstractValidator<Register> where TKey : IEquatable<TKey> where TUser : IdentityUser<TKey>
{
    public IdentityRegistrationValidator()
    {
        RuleSet(ApplyTo.Post, () =>
        {
            RuleFor(x => x.Password).NotEmpty();
            RuleFor(x => x.ConfirmPassword).Equal(x => x.Password).When(x => x.ConfirmPassword != null).WithErrorCode(nameof(ErrorMessages.PasswordsShouldMatch)).WithMessage(ErrorMessages.PasswordsShouldMatch.Localize(base.Request));
            RuleFor(x => x.UserName).NotEmpty().When(x => x.Email.IsNullOrEmpty());
            RuleFor(x => x.Email).NotEmpty().EmailAddress().When(x => x.UserName.IsNullOrEmpty());
            RuleFor(x => x.UserName).MustAsync(async (x, token) =>
            {
                var userManager = Request.TryResolve<UserManager<TUser>>();
                return await userManager.FindByEmailAsync(x).ConfigAwait() == null;
            }).WithErrorCode("AlreadyExists").WithMessage(ErrorMessages.UsernameAlreadyExists.Localize(base.Request)).When(x => !x.UserName.IsNullOrEmpty());
            RuleFor(x => x.Email).MustAsync(async (x, token) =>
            {
                var userManager = Request.TryResolve<UserManager<TUser>>();
                return await userManager.FindByEmailAsync(x).ConfigAwait() == null;
            }).WithErrorCode("AlreadyExists").WithMessage(ErrorMessages.EmailAlreadyExists.Localize(base.Request)).When(x => !x.Email.IsNullOrEmpty());
        });
    }
}
--------------------------------------------------------------------------------
ID: 1020
ServiceStack Attribute Information ID: 73
Class Name: SqlDbFeatures1
Class Example:
[TestFixtureOrmLite()]
[IgnoreDialect(Dialects.AnyMySql | Dialects.PostgreSql9, "Not supported by database")]
public class SqlDbFeatures1 : OrmLiteProvidersTestBase
{
} ` ` `


--------------------------------------------------------------------------------
ID: 1021
ServiceStack Attribute Information ID: 73
Class Name: RazorAppHostTests
Class Example:
[Ignore("Debug Test")]
[TestFixture]
public class RazorAppHostTests
{
    [Test]
    public void Run_for_10Mins()
    {
        using (var appHost = new AppHost())
        {
            appHost.Init();
            appHost.Start("http://localhost:11001/");
            Process.Start("http://localhost:11001/");
            Thread.Sleep(TimeSpan.FromMinutes(10));
        }
    }
}
--------------------------------------------------------------------------------
ID: 1022
ServiceStack Attribute Information ID: 73
Class Name: CheckWebTests
Class Example:
[Ignore("Integration Test")]
public class CheckWebTests
{
    private const string BaseUri = "http://localhost:55799/";
    [Test]
    public void Can_send_echoes_POST()
    {
        var client = new JsonServiceClient(BaseUri);
        var response = client.Post(new Echoes { Sentence = "Foo" });
    }
}
--------------------------------------------------------------------------------
ID: 1023
ServiceStack Attribute Information ID: 73
Class Name: DiagnosticTests
Class Example:
[Ignore("Diagnostic only Integration Test")]
[TestFixture]
public class DiagnosticTests
{
    const string RedisServer = "or-redis02";
    const int MessageSizeBytes = 1024 * 1024;
    private const int Count = 10;
    private byte[] RandomBytes(int Length)
    {
        var rnd = new Random();
        var bytes = new byte[Length];
        for (Int64 i = 0; i < Length; i++)
        {
            bytes[i] = (byte)rnd.Next(254);
        }

        return bytes;
    }

    [Test]
    public void Test_Throughput()
    {
        var bytes = RandomBytes(MessageSizeBytes);
        var swTotal = Stopwatch.StartNew();
        var key = "test:bandwidth:" + bytes.Length;
        int bytesSent = 0;
        int bytesRecv = 0;
        using (var redisClient = new RedisNativeClient(RedisServer))
        {
            Count.Times(x =>
            {
                var sw = Stopwatch.StartNew();
                redisClient.Set(key, bytes);
                bytesSent += bytes.Length;
                "SEND {0} bytes in {1}ms".Print(bytes.Length, sw.ElapsedMilliseconds);
                sw.Reset();
                sw.Start();
                var receivedBytes = redisClient.Get(key);
                bytesRecv += receivedBytes.Length;
                "RECV {0} bytes in {1}ms".Print(receivedBytes.Length, sw.ElapsedMilliseconds);
                "TOTAL {0} bytes SENT {0} RECV {1} in {2}ms\n".Print(bytesSent, bytesRecv, swTotal.ElapsedMilliseconds);
            });
        }
    }
}
--------------------------------------------------------------------------------
ID: 1024
ServiceStack Attribute Information ID: 73
Class Name: IdUtilsPerf
Class Example:
[Ignore("Benchmarks for measuring Id access")]
[TestFixture]
public class IdUtilsPerf : PerfTestBase
{
    public IdUtilsPerf()
    {
        this.MultipleIterations = new List<int>
        {
            100000
        };
    }

    public static object OldGetId<T>(T entity)
    {
        const string idField = "Id";
        var guidEntity = entity as IHasGuidId;
        if (guidEntity != null)
        {
            return guidEntity.Id;
        }

        var intEntity = entity as IHasIntId;
        if (intEntity != null)
        {
            return intEntity.Id;
        }

        var longEntity = entity as IHasLongId;
        if (longEntity != null)
        {
            return longEntity.Id;
        }

        var stringEntity = entity as IHasStringId;
        if (stringEntity != null)
        {
            return stringEntity.Id;
        }

        var propertyInfo = typeof(T).GetProperty(idField);
        if (propertyInfo != null)
        {
            return propertyInfo.GetGetMethod().Invoke(entity, new object[0]);
        }

        if (typeof(T).IsValueType || typeof(T) == typeof(string))
        {
            return entity.GetHashCode();
        }

        throw new NotSupportedException("Cannot retrieve value of Id field, use IHasId<>");
    }

    private void CompareForInstance<T>(T obj)
    {
        CompareMultipleRuns("OldGetId", () => OldGetId(obj), "obj.GetId()", () => obj.GetId());
    }

    [Test]
    public void Compare_HasIntId()
    {
        CompareForInstance(new IdUtilsTests.HasIntId());
    }

    [Test]
    public void Compare_HasGenericIdInt()
    {
        CompareForInstance(new IdUtilsTests.HasGenericIdInt());
    }

    [Test]
    public void Compare_HasGenericIdString()
    {
        CompareForInstance(new IdUtilsTests.HasGenericIdString());
    }

    [Test]
    public void Compare_HasIdStringProperty()
    {
        CompareForInstance(new IdUtilsTests.HasIdStringProperty());
    }

    [Test]
    public void Compare_HasIdProperty()
    {
        CompareForInstance(new IdUtilsTests.HasIdProperty());
    }
}
--------------------------------------------------------------------------------
ID: 1025
ServiceStack Attribute Information ID: 73
Class Name: AdoNetDataAccessTests
Class Example:
[TestFixtureOrmLiteDialects(Dialect.AnySqlServer)]
[Ignore("Required DB with MigrateSqlServerTypes table")]
public class AdoNetDataAccessTests(DialectContext context) : OrmLiteProvidersTestBase(context)
{
    /*
    CREATE TABLE [dbo].[MigrateSqlServerTypes](
        [Id] [int] IDENTITY(1,1) NOT NULL,
        [SqlServerTime] [time](7) NULL,
        [OrmLiteTimeSpan] [bigint] NULL,
    )
    */
    public class MigrateSqlServerTypes
    {
        public int Id { get; set; }
        public TimeSpan OrmLiteTimeSpan { get; set; }
    }

    [Test]
    [Ignore("Needs review - MONOREPO")]
    public void Can_read_from_existing_database()
    {
        using var db = OpenDbConnection();
        var map = new Dictionary<int, TimeSpan>();
        using (var dbCmd = db.CreateCommand())
        {
            dbCmd.CommandText = "SELECT * FROM MigrateSqlServerTypes";
            using (var reader = dbCmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    var id = reader.GetInt32(0);
                    var sqlTime = (TimeSpan)reader.GetValue(1);
                    map[id] = sqlTime;
                }
            }
        }

        foreach (var entry in map)
        {
            db.Update(new MigrateSqlServerTypes { Id = entry.Key, OrmLiteTimeSpan = entry.Value });
        }

        db.Select<MigrateSqlServerTypes>().PrintDump();
    }
}
--------------------------------------------------------------------------------
ID: 1026
ServiceStack Attribute Information ID: 73
Class Name: ServerEventIntegrationTests
Class Example:
[Ignore("Requires SSE AppHost on"), TestFixture] //requires SSE AppHost on 
public class ServerEventIntegrationTests
{
    [Test]
    public async Task Does_reconnect_when_remote_AppServer_restarts()
    {
        var client = new ServerEventsClient("http://localhost:11001", "home")
        {
            OnConnect = ctx => "OnConnect: {0}".Print(ctx.Channel),
            OnCommand = msg => "OnCommand: {0}".Print(msg.Data),
            OnException = ex => "OnException: {0}".Print(ex.Message),
            OnMessage = msg => "OnMessage: {0}".Print(msg.Data),
            OnHeartbeat = () => "OnHeartbeat".Print()
        };
        client.Handlers["chat"] = (source, msg) =>
        {
            "Received Chat: {0}".Print(msg.Data);
        };
        await client.Connect();
        await Task.Delay(TimeSpan.FromMinutes(10));
    }
}
--------------------------------------------------------------------------------
ID: 1027
ServiceStack Attribute Information ID: 73
Class Name: ShardingUseCase
Class Example:
[Ignore("Robots Shard Use Case")]
[TestFixture]
public class ShardingUseCase
{
    public class MasterRecord
    {
        public Guid Id { get; set; }
        public int RobotId { get; set; }
        public string RobotName { get; set; }
        public DateTime? LastActivated { get; set; }
    }

    public class Robot
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool IsActivated { get; set; }
        public long CellCount { get; set; }
        public DateTime CreatedDate { get; set; }
    }

    [Test]
    public void Shard_1000_Robots_over_10_shards()
    {
        const int NoOfShards = 10;
        const int NoOfRobots = 1000;
        var dbFactory = new OrmLiteConnectionFactory("~/App_Data/robots-master.sqlite".MapAbsolutePath(), SqliteDialect.Provider);
        //var dbFactory = new OrmLiteConnectionFactory(
        //    "Data Source=localhost;Initial Catalog=RobotsMaster;Integrated Security=SSPI", 
        //    SqlServerDialect.Provider);
        //Create Master Table in Master DB
        using (var db = dbFactory.Open())
            db.CreateTable<MasterRecord>();
        NoOfShards.Times(i =>
        {
            var shardId = "robots-shard" + i;
            dbFactory.RegisterConnection(shardId, "~/App_Data/{0}.sqlite".Fmt(shardId).MapAbsolutePath(), SqliteDialect.Provider);
            //Create Robot table in Shard
            using (var db = dbFactory.Open(shardId))
                db.CreateTable<Robot>();
        });
        var newRobots = NoOfRobots.Times(i => //Create 1000 Robots
 new Robot { Id = i, Name = "R2D" + i, CreatedDate = DateTime.UtcNow, CellCount = DateTime.UtcNow.ToUnixTimeMs() % 100000 });
        foreach (var newRobot in newRobots)
        {
            using (IDbConnection db = dbFactory.Open()) //Open Connection to Master DB
            {
                db.Insert(new MasterRecord { Id = Guid.NewGuid(), RobotId = newRobot.Id, RobotName = newRobot.Name });
                using (IDbConnection robotShard = dbFactory.OpenDbConnection("robots-shard" + newRobot.Id % NoOfShards)) //Shard DB
                {
                    robotShard.Insert(newRobot);
                }
            }
        }
    }
}
--------------------------------------------------------------------------------
ID: 1028
ServiceStack Attribute Information ID: 73
Class Name: GithubScriptTests
Class Example:
[Ignore("Integration Tests")]
public class GithubScriptTests
{
    public ScriptContext CreateScriptContext()
    {
        return new ScriptContext
        {
            Plugins =
            {
                new GitHubPlugin()
            },
            ScriptMethods =
            {
                new InfoScripts(),
                new ProtectedScripts(),
            },
        };
    }

    [Test]
    public void Can_write_and_read_gist_files()
    {
        var context = CreateScriptContext().Init();
        var output = context.EvaluateScript(@"
```code
githubGateway('GITHUB_GIST_TOKEN'.envVariable()) |> to => gateway

{{ gateway.githubCreateGist('Hello World Examples', {
     'hello_world_ruby.txt':   'Run `ruby hello_world.rb` to print Hello World',
     'hello_world_python.txt': 'Run `python hello_world.py` to print Hello World',
   })
   |> to => newGist }}

{ ...newGist, Files: null, Owner: null } |> textDump({ caption: 'new gist' })
newGist.Owner |> textDump({ caption: 'new gist owner' })
newGist.Files |> toList |> map(x => x.Value.textDump({ caption: x.Key })) |> join('\n')

gateway.githubGist(newGist.Id) |> to => gist
{ ...gist, Files: null, Owner: null } |> textDump({ caption: 'gist' })
gist.Files |> toList |> map(x => x.Value.textDump({ caption: x.Key })) |> join('\n')
```");
        output.Print();
    }

    [Test]
    public void Display_Gist()
    {
        var context = CreateScriptContext().Init();
        context.Args["gistId"] = "4c5d95ec4b2594b4cdd238987fe7a15a";
        var output = context.EvaluateScript(@"
```code
githubGateway('GITHUB_GIST_TOKEN'.envVariable()) |> to => gateway

gateway.githubGist(gistId) |> to => gist

{ ...gist, Files: null, Owner: null } |> textDump({ caption: 'gist' })

`### Gist Files`
#each file in gist.Files.Keys
    gist.Files[file] |> textDump({ caption: file })
/each
```");
        output.Print();
    }
}
--------------------------------------------------------------------------------
ID: 1029
ServiceStack Attribute Information ID: 73
Class Name: PooledRedisClientManagerIssues
Class Example:
[Ignore("Can't be included in Unit tests since it shutsdown redis server")]
[TestFixture]
public class PooledRedisClientManagerIssues : RedisClientTestsBase
{
    private static PooledRedisClientManager pool;
    public static void Stuff()
    {
        while (true)
        {
            RedisClient redisClient = null;
            try
            {
                using (redisClient = (RedisClient)pool.GetClient())
                {
                    redisClient.Set("test", DateTime.Now);
                }
            }
            catch (NotSupportedException nse)
            {
                Debug.WriteLine(redisClient.ToString());
                Assert.Fail(nse.Message);
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
            }

            Thread.Sleep(10);
        }
    }

    [Test]
    public void Issue37_Cannot_add_unknown_client_back_to_pool_exception()
    {
        pool = new PooledRedisClientManager();
        try
        {
            var threads = new Thread[100];
            for (var i = 0; i < threads.Length; i++)
            {
                threads[i] = new Thread(Stuff);
                threads[i].Start();
            }

            Debug.WriteLine("running, waiting 10secs..");
            Thread.Sleep(10000);
            using (var redisClient = (RedisClient)pool.GetClient())
            {
                Debug.WriteLine("shutdown Redis!");
                redisClient.Shutdown();
            }
        }
        catch (NotSupportedException nse)
        {
            Assert.Fail(nse.Message);
        }
        catch (Exception e)
        {
            Debug.WriteLine(e.Message);
        }

        Thread.Sleep(5000);
    }
}
--------------------------------------------------------------------------------
ID: 1030
ServiceStack Attribute Information ID: 73
Class Name: ConcurrencyTest
Class Example:
[Ignore("Comment out to run load test")]
public class ConcurrencyTest
{
    private static ILog log;
    private readonly ServiceStackHost appHost;
    public ConcurrencyTest()
    {
        LogManager.LogFactory = new ConsoleLogFactory();
        log = LogManager.GetLogger(typeof(ConcurrencyTest));
        appHost = new AppHost().Init().Start(Config.AbsoluteBaseUri);
    }

    [OneTimeTearDown]
    public void OneTimeTearDown() => appHost.Dispose();
    public class AppHost : AppHostHttpListenerPoolBase
    {
        public AppHost() : base("Server", 500, typeof(TestConcurrencyService).Assembly)
        {
        }

        public override void Configure(Container container)
        {
        }
    }

    [Test]
    public void Does_handle_concurrent_requests()
    {
        var rand = new Random();
        var client = new JsonHttpClient(Config.AbsoluteBaseUri);
        client.GetHttpClient().Timeout = TimeSpan.FromMinutes(5);
        long responsesReceived = 0;
        long totalSecondsWaited = 0;
        var sw = Stopwatch.StartNew();
        const int ConcurrentRequests = 50;
        ConcurrentRequests.Times(i =>
        {
            Interlocked.Increment(ref responsesReceived);
            ThreadPool.QueueUserWorkItem(async _ =>
            {
                var request = new SleepTest
                {
                    Name = $"Request {i + 1}",
                    WaitingSecs = rand.Next(30, 60),
                };
                Interlocked.Add(ref totalSecondsWaited, request.WaitingSecs);
                log.Info($"[{DateTime.Now.TimeOfDay}] Sending {request.Name} to sleep for {request.WaitingSecs} seconds...");
                try
                {
                    var response = await client.GetAsync(request);
                    log.Info($"[{DateTime.Now.TimeOfDay}] Received {request.Name}: {response.Message}");
                }
                catch (Exception ex)
                {
                    log.Error($"[{DateTime.Now.TimeOfDay}] Error Response: {ex.UnwrapIfSingleException().Message}", ex);
                }
                finally
                {
                    Interlocked.Decrement(ref responsesReceived);
                }
            });
        });
        while (Interlocked.Read(ref responsesReceived) > 0)
        {
            Thread.Sleep(10);
        }

        log.Info($"Took {sw.Elapsed.TotalSeconds} to execute {ConcurrentRequests} Concurrent Requests waiting a total of {totalSecondsWaited} seconds.");
    }
}
--------------------------------------------------------------------------------
ID: 1031
ServiceStack Attribute Information ID: 73
Class Name: RabbitMqRequestReplyTests
Class Example:
[Ignore("Integration Tests")]
public class RabbitMqRequestReplyTests : MqRequestReplyTests
{
    public override IMessageService CreateMqServer(int retryCount = 1)
    {
        return new RabbitMqServer(connectionString: Config.RabbitMQConnString)
        {
            RetryCount = retryCount
        };
    }
}
--------------------------------------------------------------------------------
ID: 1032
ServiceStack Attribute Information ID: 73
Class Name: RedisMqRequestReplyTests
Class Example:
[Ignore("Integration Tests")]
public class RedisMqRequestReplyTests : MqRequestReplyTests
{
    public override IMessageService CreateMqServer(int retryCount = 1)
    {
        return new RedisMqServer(new BasicRedisClientManager())
        {
            RetryCount = retryCount
        };
    }

    [Test]
    public void Can_expire_temp_queues()
    {
        using (var mqServer = (RedisMqServer)CreateMqServer())
        using (var client = mqServer.ClientsManager.GetClient())
        {
            client.FlushAll();
            100.Times(i => client.AddItemToList(QueueNames.GetTempQueueName(), i.ToString()));
            var itemsToExpire = mqServer.ExpireTemporaryQueues(afterMs: 100);
            var tmpWildCard = QueueNames.TempMqPrefix + "*";
            Assert.That(itemsToExpire, Is.EqualTo(100));
            Assert.That(client.SearchKeys(tmpWildCard).Count, Is.EqualTo(100));
            Thread.Sleep(200);
            Assert.That(client.SearchKeys(tmpWildCard).Count, Is.EqualTo(0));
        }
    }
}
--------------------------------------------------------------------------------
ID: 1033
ServiceStack Attribute Information ID: 73
Class Name: AutoMappingPerfTests
Class Example:
[Ignore("Perf test"), TestFixture]
public class AutoMappingPerfTests : PerfTestBase
{
    [Test]
    public void Compare_handwritten_vs_AutoMapping()
    {
        CompareMultipleRuns("Handwritten", () => HandwrittenMapper.ToBenchDestination(new BenchSource()), "Auto Mapping", () => new BenchSource().ConvertTo<BenchDestination>());
    }

    [Test]
    public void Does_Convert_BenchSource()
    {
        var from = new BenchSource();
        var to = from.ConvertTo<BenchDestination>(); //warmup
        to = from.ConvertTo<BenchDestination>();
        using (JsConfig.With(new Config { IncludePublicFields = true }))
        {
            to.PrintDump();
            from.PrintDump();
        }
    }
}
--------------------------------------------------------------------------------
ID: 1034
ServiceStack Attribute Information ID: 73
Class Name: RedisPubSubServerTests
Class Example:
[Ignore("Ignore long running tests")]
[TestFixture]
public class RedisPubSubServerTests
{
    RedisManagerPool clientsManager = new RedisManagerPool(TestConfig.MasterHosts);
    [OneTimeTearDown]
    public void OneTimeTearDown()
    {
        clientsManager.Dispose();
    }

    private RedisPubSubServer CreatePubSubServer(int intervalSecs = 1, int timeoutSecs = 3, params string[] channels)
    {
        using (var redis = clientsManager.GetClient())
            redis.FlushAll();
        if (channels.Length == 0)
            channels = new[]
            {
                "topic:test"
            };
        var pubSub = new RedisPubSubServer(clientsManager, channels)
        {
            HeartbeatInterval = TimeSpan.FromSeconds(intervalSecs),
            HeartbeatTimeout = TimeSpan.FromSeconds(timeoutSecs)
        };
        return pubSub;
    }

    [Test]
    public void Does_send_heartbeat_pulses()
    {
        int pulseCount = 0;
        using (var pubSub = CreatePubSubServer(intervalSecs: 1, timeoutSecs: 3))
        {
            pubSub.OnHeartbeatReceived = () => "pulse #{0}".Print(++pulseCount);
            pubSub.Start();
            Thread.Sleep(3100);
            Assert.That(pulseCount, Is.GreaterThan(2));
        }
    }

    [Test]
    public void Does_restart_when_Heartbeat_Timeout_exceeded()
    {
        //This auto restarts 2 times before letting connection to stay alive
        int pulseCount = 0;
        int startCount = 0;
        int stopCount = 0;
        using (var pubSub = CreatePubSubServer(intervalSecs: 1, timeoutSecs: 3))
        {
            pubSub.OnStart = () => "start #{0}".Print(++startCount);
            pubSub.OnStop = () => "stop #{0}".Print(++stopCount);
            pubSub.OnHeartbeatReceived = () => "pulse #{0}".Print(++pulseCount);
            //pause longer than heartbeat timeout so autoreconnects
            pubSub.OnControlCommand = op =>
            {
                if (op == "PULSE" && stopCount < 2)
                    Thread.Sleep(4000);
            };
            pubSub.Start();
            Thread.Sleep(30 * 1000);
            Assert.That(pulseCount, Is.GreaterThan(3));
            Assert.That(startCount, Is.EqualTo(3));
            Assert.That(stopCount, Is.EqualTo(2));
        }
    }

    [Test]
    public void Does_send_heartbeat_pulses_to_multiple_PubSubServers()
    {
        var count = 15;
        int pulseCount = 0;
        var pubSubs = count.Times(i =>
        {
            var pubSub = CreatePubSubServer(intervalSecs: 20, timeoutSecs: 30);
            pubSub.OnHeartbeatReceived = () => "{0}: pulse #{1}".Print(i, ++pulseCount);
            pubSub.Start();
            return pubSub;
        });
        Thread.Sleep(32000);
        "pulseCount = {0}".Print(pulseCount);
        Assert.That(pulseCount, Is.GreaterThan(2 * count));
        Assert.That(pulseCount, Is.LessThan(8 * count));
        pubSubs.Each(x => x.Dispose());
    }

    [Test]
    public void Can_restart_and_subscribe_to_more_channels()
    {
        var a = new List<string>();
        var b = new List<string>();
        var pubSub = CreatePubSubServer(intervalSecs: 20, timeoutSecs: 30, "topic:a");
        pubSub.OnMessage = (channel, msg) =>
        {
            if (channel == "topic:a")
                a.Add(msg);
            else if (channel == "topic:b")
                b.Add(msg);
        };
        pubSub.Start();
        Thread.Sleep(100);
        var client = clientsManager.GetClient();
        var i = 0;
        client.PublishMessage("topic:a", $"msg: ${++i}");
        client.PublishMessage("topic:b", $"msg: ${++i}");
        Thread.Sleep(100);
        Assert.That(a.Count, Is.EqualTo(1));
        Assert.That(b.Count, Is.EqualTo(0));
        pubSub.Channels = new[]
        {
            "topic:a",
            "topic:b"
        };
        pubSub.Restart();
        Thread.Sleep(100);
        client.PublishMessage("topic:a", $"msg: ${++i}");
        client.PublishMessage("topic:b", $"msg: ${++i}");
        Thread.Sleep(100);
        Assert.That(a.Count, Is.EqualTo(2));
        Assert.That(b.Count, Is.EqualTo(1));
    }
}
--------------------------------------------------------------------------------
ID: 1035
ServiceStack Attribute Information ID: 73
Class Name: ToStringPerf
Class Example:
[Ignore("Bencharks for serializing basic .NET types")]
[TestFixture]
public class ToStringPerf : PerfTestBase
{
    public ToStringPerf()
    {
        this.MultipleIterations = new List<int>
        {
            10000
        };
    }

    [Test]
    public void Compare_string()
    {
        CompareMultipleRuns("'test'.ToCsvField()", () => "test".ToCsvField(), "SCU.ToString('test')", () => TypeSerializer.SerializeToString("test"));
    }

    [Test]
    public void Compare_escaped_string()
    {
        CompareMultipleRuns("'t,e:st'.ToCsvField()", () => "t,e:st".ToCsvField(), "SCU.ToString('t,e:st')", () => TypeSerializer.SerializeToString("t,e:st"));
    }

    [Test]
    public void Compare_ints()
    {
        CompareMultipleRuns("1.ToString()", () => 1.ToString(), "SCU.ToString(1)", () => TypeSerializer.SerializeToString(1));
    }

    [Test]
    public void Compare_longs()
    {
        CompareMultipleRuns("1L.ToString()", () => 1L.ToString(), "SCU.ToString(1L)", () => TypeSerializer.SerializeToString(1L));
    }

    [Test]
    public void Compare_Guids()
    {
        var guid = new Guid("AC800C9C-B8BE-4829-868A-B43CFF7B2AFD");
        CompareMultipleRuns("guid.ToString()", () => guid.ToString(), "SCU.ToString(guid)", () => TypeSerializer.SerializeToString(guid));
    }

    [Test]
    public void Compare_DateTime()
    {
        var now = DateTime.Now;
        CompareMultipleRuns("now.ToString()", () => now.ToString(), "SCU.ToString(now)", () => TypeSerializer.SerializeToString(now));
    }

    [Test]
    public void Compare_IntList()
    {
        var intList = new List<int>
        {
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
        };
        CompareMultipleRuns("intList.ForEach(x => sb.Append(x.ToString()))", () =>
        {
            var sb = new StringBuilder();
            intList.ForEach(x =>
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(x.ToString());
            });
            sb.ToString();
        }, "SCU.ToString(intList)", () => TypeSerializer.SerializeToString(intList));
    }

    [Test]
    public void Compare_LongList()
    {
        var longList = new List<long>
        {
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
        };
        CompareMultipleRuns("longList.ForEach(x => sb.Append(x.ToString()))", () =>
        {
            var sb = new StringBuilder();
            longList.ForEach(x =>
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(x.ToString());
            });
            sb.ToString();
        }, "SCU.ToString(longList)", () => TypeSerializer.SerializeToString(longList));
    }

    [Test]
    public void Compare_StringArray()
    {
        var stringArray = new[]
        {
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j"
        };
        CompareMultipleRuns("sb.Append(s.ToCsvField());", () =>
        {
            var sb = new StringBuilder();
            foreach (var s in stringArray)
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(s.ToCsvField());
            }

            sb.ToString();
        }, "SCU.ToString(stringArray)", () => TypeSerializer.SerializeToString(stringArray));
    }

    [Test]
    public void Compare_StringList()
    {
        var stringList = new List<string>
        {
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j"
        };
        CompareMultipleRuns("sb.Append(s.ToCsvField());", () =>
        {
            var sb = new StringBuilder();
            stringList.ForEach(x =>
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(x.ToString());
            });
            sb.ToString();
        }, "SCU.ToString(stringList)", () => TypeSerializer.SerializeToString(stringList));
    }

    [Test]
    public void Compare_DoubleList()
    {
        var doubleList = new List<double>
        {
            1.1,
            2.2,
            3.3,
            4.4,
            5.5,
            6.6,
            7.7,
            8.8,
            9.9,
            0.1
        };
        CompareMultipleRuns("doubleList.ForEach(x => sb.Append(x.ToString()))", () =>
        {
            var sb = new StringBuilder();
            doubleList.ForEach(x =>
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(x.ToString());
            });
            sb.ToString();
        }, "SCU.ToString(doubleList)", () => TypeSerializer.SerializeToString(doubleList));
    }

    [Test]
    public void Compare_GuidList()
    {
        var guidList = new List<Guid>
        {
            new Guid("8F403A5E-CDFC-4C6F-B0EB-C055C1C8BA60"),
            new Guid("5673BAC7-BAC5-4B3F-9B69-4180E6227508"),
            new Guid("B0CA730F-14C9-4D00-AC7F-07E7DE8D566E"),
            new Guid("4E26AF94-6B13-4F89-B192-36C6ABE73DAE"),
            new Guid("08491B16-2270-4DF9-8AEE-A8861A791C50"),
        };
        CompareMultipleRuns("guidList.ForEach(x => sb.Append(x.ToString()))", () =>
        {
            var sb = new StringBuilder();
            guidList.ForEach(x =>
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(x.ToString());
            });
            sb.ToString();
        }, "SCU.ToString(guidList)", () => TypeSerializer.SerializeToString(guidList));
    }

    [Test]
    public void Compare_StringHashSet()
    {
        var stringHashSet = new HashSet<string>
        {
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j"
        };
        CompareMultipleRuns("sb.Append(s.ToCsvField());", () =>
        {
            var sb = new StringBuilder();
            foreach (var s in stringHashSet)
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(s.ToCsvField());
            }

            sb.ToString();
        }, "SCU.ToString(stringHashSet)", () => TypeSerializer.SerializeToString(stringHashSet));
    }

    [Test]
    public void Compare_IntHashSet()
    {
        var intHashSet = new HashSet<int>
        {
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9
        };
        CompareMultipleRuns("intList.ForEach(x => sb.Append(x.ToString()))", () =>
        {
            var sb = new StringBuilder();
            foreach (var s in intHashSet)
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(s.ToString());
            }

            sb.ToString();
        }, "SCU.ToString(intHashSet)", () => TypeSerializer.SerializeToString(intHashSet));
    }

    [Test]
    public void Compare_DoubleHashSet()
    {
        var doubleHashSet = new HashSet<double>
        {
            1.1,
            2.2,
            3.3,
            4.4,
            5.5,
            6.6,
            7.7,
            8.8,
            9.9,
            0.1
        };
        CompareMultipleRuns("doubleList.ForEach(x => sb.Append(x.ToString()))", () =>
        {
            var sb = new StringBuilder();
            foreach (var s in doubleHashSet)
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(s.ToString());
            }

            sb.ToString();
        }, "SCU.ToString(doubleHashSet)", () => TypeSerializer.SerializeToString(doubleHashSet));
    }

    [Test]
    public void Compare_StringStringMap()
    {
        var map = new Dictionary<string, string>
        {
            {
                "A",
                "1"
            },
            {
                "B",
                "2"
            },
            {
                "C",
                "3"
            },
            {
                "D",
                "4"
            },
            {
                "E",
                "5"
            },
            {
                "F",
                "6"
            },
            {
                "G",
                "7"
            },
            {
                "H",
                "8"
            },
            {
                "I",
                "9"
            },
            {
                "j",
                "10"
            },
        };
        CompareMultipleRuns("sb.Append(kv.Key.ToCsvField()).Append(ParseStringMethods.KeyValueSeperator).", () =>
        {
            var sb = new StringBuilder();
            foreach (var kv in map)
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(kv.Key.ToCsvField()).Append(JsWriter.MapKeySeperator).Append(kv.Value.ToCsvField());
            }

            sb.ToString();
        }, "SCU.ToString(map)", () => TypeSerializer.SerializeToString(map));
    }

    [Test]
    public void Compare_StringIntMap()
    {
        var map = new Dictionary<string, int>
        {
            {
                "A",
                1
            },
            {
                "B",
                2
            },
            {
                "C",
                3
            },
            {
                "D",
                4
            },
            {
                "E",
                5
            },
            {
                "F",
                6
            },
            {
                "G",
                7
            },
            {
                "H",
                8
            },
            {
                "I",
                9
            },
            {
                "j",
                10
            },
        };
        CompareMultipleRuns(".Append(ParseStringMethods.KeyValueSeperator).Append(kv.Value.ToString())", () =>
        {
            var sb = new StringBuilder();
            foreach (var kv in map)
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(kv.Key.ToCsvField()).Append(JsWriter.MapKeySeperator).Append(kv.Value.ToString());
            }

            sb.ToString();
        }, "SCU.ToString(map)", () => TypeSerializer.SerializeToString(map));
    }

    [Test]
    public void Compare_StringInt_SortedDictionary()
    {
        var map = new SortedDictionary<string, int>
        {
            {
                "A",
                1
            },
            {
                "B",
                2
            },
            {
                "C",
                3
            },
            {
                "D",
                4
            },
            {
                "E",
                5
            },
            {
                "F",
                6
            },
            {
                "G",
                7
            },
            {
                "H",
                8
            },
            {
                "I",
                9
            },
            {
                "j",
                10
            },
        };
        CompareMultipleRuns(".Append(ParseStringMethods.KeyValueSeperator).Append(kv.Value.ToString())", () =>
        {
            var sb = new StringBuilder();
            foreach (var kv in map)
            {
                if (sb.Length > 0)
                    sb.Append(",");
                sb.Append(kv.Key.ToCsvField()).Append(JsWriter.MapKeySeperator).Append(kv.Value.ToString());
            }

            sb.ToString();
        }, "SCU.ToString(map)", () => TypeSerializer.SerializeToString(map));
    }

    [Test]
    public void Compare_ByteArray()
    {
        var byteArrayValue = new byte[]
        {
            0,
            65,
            97,
            255,
            0,
            65,
            97,
            255,
            0,
            65,
            97,
            255,
            0,
            65,
            97,
            255,
            0,
            65,
            97,
            255,
            0,
            65,
            97,
            255,
            0,
            65,
            97,
            255,
            0,
            65,
            97,
            255,
        };
        CompareMultipleRuns("Encoding.Default.GetString(byteArrayValue)", () => Encoding.GetEncoding(0).GetString(byteArrayValue), "SCU.ToString(byteArrayValue)", () => TypeSerializer.SerializeToString(byteArrayValue));
    }
}
--------------------------------------------------------------------------------
ID: 1036
ServiceStack Attribute Information ID: 73
Class Name: CustomerUseCase
Class Example:
[Ignore("Performance tests")]
[TestFixture]
public class CustomerUseCase
{
    private const int Times = 100000;
    [OneTimeSetUp]
    public void TestFixtureSetUp()
    {
        OrmLite.OrmLiteConfig.DialectProvider = new SqliteOrmLiteDialectProvider();
    }

    public const bool UseCache = false;
    private ServiceController serviceController;
    [SetUp]
    public void OnBeforeEachTest()
    {
        serviceController = new ServiceController(null);
    }

    [Test]
    public void Perf_All_IOC()
    {
        AutoWiredFunq_Perf();
        NativeFunq_Perf();
    }

    [Test]
    public void NativeFunq_Perf()
    {
        RegisterServices(serviceController, GetNativeFunqTypeFactory());
        StoreAndGetCustomers(serviceController);
        var request = new GetCustomer
        {
            CustomerId = 2
        };
        Console.WriteLine("NativeFunq_Perf(): {0}", Measure(() => serviceController.Execute(request), Times));
    }

    [Test]
    public void AutoWiredFunq_Perf()
    {
        RegisterServices(serviceController, GetAutoWiredFunqTypeFactory());
        StoreAndGetCustomers(serviceController);
        var request = new GetCustomer
        {
            CustomerId = 2
        };
        Console.WriteLine("AutoWiredFunq_Perf(): {0}", Measure(() => serviceController.Execute(request), Times));
    }

    private static long Measure(Action action, int iterations)
    {
        GC.Collect();
        var watch = Stopwatch.StartNew();
        for (int i = 0; i < iterations; i++)
        {
            action();
        }

        return watch.ElapsedTicks;
    }

    [Test]
    public void Using_NativeFunq()
    {
        RegisterServices(serviceController, GetNativeFunqTypeFactory());
        StoreAndGetCustomers(serviceController);
    }

    [Test]
    public void Using_AutoWiredFunq()
    {
        RegisterServices(serviceController, GetAutoWiredFunqTypeFactory());
        StoreAndGetCustomers(serviceController);
    }

    private static void StoreAndGetCustomers(ServiceController serviceController)
    {
        var storeCustomers = new StoreCustomers
        {
            Customers =
            {
                new Customer
                {
                    Id = 1,
                    FirstName = "First",
                    LastName = "Customer"
                },
                new Customer
                {
                    Id = 2,
                    FirstName = "Second",
                    LastName = "Customer"
                },
            }
        };
        serviceController.Execute(storeCustomers);
        storeCustomers = new StoreCustomers
        {
            Customers =
            {
                new Customer
                {
                    Id = 3,
                    FirstName = "Third",
                    LastName = "Customer"
                },
            }
        };
        serviceController.Execute(storeCustomers);
        var response = serviceController.Execute(new GetCustomer { CustomerId = 2 });
        Assert.That(response as GetCustomerResponse, Is.Not.Null);
        var customer = ((GetCustomerResponse)response).Customer;
        Assert.That(customer.FirstName, Is.EqualTo("Second"));
    }

    private static void RegisterServices(ServiceController serviceController, ITypeFactory typeFactory)
    {
        serviceController.RegisterServiceExecutor(typeof(StoreCustomers), typeof(StoreCustomersService), typeFactory);
        serviceController.RegisterServiceExecutor(typeof(GetCustomer), typeof(GetCustomerService), typeFactory);
    }

    public static ITypeFactory GetNativeFunqTypeFactory()
    {
        var container = GetContainerWithDependencies();
        container.Register(c => new StoreCustomersService(c.Resolve<IDbConnection>())).ReusedWithin(ReuseScope.None);
        container.Register(c => new GetCustomerService(c.Resolve<IDbConnection>(), c.Resolve<CustomerUseCaseConfig>()) { CacheClient = c.TryResolve<ICacheClient>() }).ReusedWithin(ReuseScope.None);
        return new FuncTypeFactory(container);
    }

    public static ITypeFactory GetAutoWiredFunqTypeFactory()
    {
        var container = GetContainerWithDependencies();
        container.RegisterAutoWiredType(typeof(StoreCustomersService), typeof(GetCustomerService));
        return new ContainerResolveCache();
    }

    private static Container GetContainerWithDependencies()
    {
        var container = new Container();
        container.Register(c => ":memory:".OpenDbConnection()).ReusedWithin(ReuseScope.Container);
        container.Register<ICacheClient>(c => new MemoryCacheClient()).ReusedWithin(ReuseScope.Container);
        container.Register(c => new CustomerUseCaseConfig()).ReusedWithin(ReuseScope.Container);
        return container;
    }
}
--------------------------------------------------------------------------------
ID: 1037
ServiceStack Attribute Information ID: 73
Class Name: GithubGatewayTests
Class Example:
[Ignore("Integration Tests")]
public class GithubGatewayTests
{
    public static readonly string GistId = "67bc8f75273a29a1ba0609675b8ed1ae";
    public static readonly string AccessToken = Environment.GetEnvironmentVariable("GITHUB_GIST_TOKEN");
    [Test]
    public void Can_create_gist()
    {
        var gateway = new GitHubGateway(AccessToken);
        var gist = gateway.CreateGithubGist(description: "Hello World Examples", isPublic: true, textFiles: new Dictionary<string, string> { ["hello_world_ruby.txt"] = "Run `ruby hello_world.rb` to print Hello World", ["hello_world_python.txt"] = "Run `python hello_world.py` to print Hello World", });
        gist.PrintDump();
        Assert.That(gist.Owner.Login, Is.EqualTo("gistlyn"));
        Assert.That(gist.Owner.Url, Is.EqualTo("https://api.github.com/users/gistlyn"));
        Assert.That(gist.Owner.Html_Url, Is.EqualTo("https://github.com/gistlyn"));
        var file = gist.Files["hello_world_ruby.txt"];
        Assert.That(file.Filename, Is.EqualTo("hello_world_ruby.txt"));
        Assert.That(file.Type, Is.EqualTo("text/plain"));
        Assert.That(file.Language, Is.EqualTo("Text"));
        Assert.That(file.Raw_Url, Does.EndWith("/hello_world_ruby.txt"));
        Assert.That(file.Size, Is.GreaterThan(0));
        Assert.That(file.Content, Does.Contain("Run `ruby hello_world.rb` to print Hello World"));
        file = gist.Files["hello_world_python.txt"];
        Assert.That(file.Filename, Is.EqualTo("hello_world_python.txt"));
        Assert.That(file.Type, Is.EqualTo("text/plain"));
        Assert.That(file.Language, Is.EqualTo("Text"));
        Assert.That(file.Raw_Url, Does.EndWith("/hello_world_python.txt"));
        Assert.That(file.Size, Is.GreaterThan(0));
        Assert.That(file.Content, Does.Contain("Run `python hello_world.py` to print Hello World"));
    }

    [Test]
    public void Can_download_public_gist()
    {
        var gateway = new GitHubGateway();
        var result = gateway.GetGist(GistId);
        var gist = (GithubGist)result;
        Assert.That(gist.Owner.Login, Is.EqualTo("gistlyn"));
        Assert.That(gist.Owner.Url, Is.EqualTo("https://api.github.com/users/gistlyn"));
        Assert.That(gist.Owner.Html_Url, Is.EqualTo("https://github.com/gistlyn"));
        var file = gist.Files["main.cs"];
        Assert.That(file.Filename, Is.EqualTo("main.cs"));
        Assert.That(file.Type, Is.EqualTo("text/plain"));
        Assert.That(file.Language, Is.EqualTo("C#"));
        Assert.That(file.Raw_Url, Does.EndWith("/main.cs"));
        Assert.That(file.Size, Is.GreaterThan(0));
        Assert.That(file.Content, Does.Contain("Hello, {name}!"));
    }

    [Test]
    public async Task Can_download_public_gist_Async()
    {
        var gateway = new GitHubGateway();
        var result = await gateway.GetGistAsync(GistId);
        var gist = (GithubGist)result;
        Assert.That(gist.Owner.Login, Is.EqualTo("gistlyn"));
        Assert.That(gist.Owner.Url, Is.EqualTo("https://api.github.com/users/gistlyn"));
        Assert.That(gist.Owner.Html_Url, Is.EqualTo("https://github.com/gistlyn"));
        var file = gist.Files["main.cs"];
        Assert.That(file.Filename, Is.EqualTo("main.cs"));
        Assert.That(file.Type, Is.EqualTo("text/plain"));
        Assert.That(file.Language, Is.EqualTo("C#"));
        Assert.That(file.Raw_Url, Does.EndWith("/main.cs"));
        Assert.That(file.Size, Is.GreaterThan(0));
        Assert.That(file.Content, Does.Contain("Hello, {name}!"));
    }

    [Test]
    public void Can_add_and_delete_gist_file()
    {
        var gateway = new GitHubGateway(AccessToken);
        var newFile = "new.txt";
        gateway.WriteGistFile(GistId, newFile, "this is a new file");
        var gist = gateway.GetGist(GistId);
        var file = gist.Files[newFile];
        Assert.That(file.Filename, Is.EqualTo(newFile));
        Assert.That(file.Type, Is.EqualTo("text/plain"));
        Assert.That(file.Content, Is.EqualTo("this is a new file"));
        gateway.DeleteGistFiles(GistId, newFile);
        gist = gateway.GetGist(GistId);
        Assert.That(gist.Files.TryGetValue(newFile, out file), Is.False);
    }

    [Test]
    public async Task Does_FetchAllTruncatedFilesAsync()
    {
        var gistWithTruncatedFiles = "6f3484ef287c85b118ee6ca3262c1534";
        var vfs = new GistVirtualFiles(gistWithTruncatedFiles);
        var gist = await vfs.GetGistAsync();
        Assert.That(gist.Files.Values.Any(x => x.Truncated && string.IsNullOrEmpty(x.Content)));
        await vfs.LoadAllTruncatedFilesAsync();
        Assert.That(!gist.Files.Values.Any(x => x.Truncated && string.IsNullOrEmpty(x.Content)));
    }

    [Test]
    public void Can_GetSourceTagZipUrl()
    {
        var user = "NetCoreTemplates";
        var repo = "web";
        var tag = "v28";
        var gateway = new GitHubGateway(AccessToken);
        var zipUrlForTag = gateway.GetSourceZipUrl(user, repo, tag);
        Assert.That(zipUrlForTag, Is.EqualTo("https://github.com/NetCoreTemplates/web/archive/refs/tags/v28.zip"));
    }

    [Test]
    public void Can_GetSourceTagZipUrl_InvalidTag()
    {
        var user = "NetCoreTemplates";
        var repo = "web";
        var tag = "invalid-tag";
        var gateway = new GitHubGateway(AccessToken);
        var exception = Assert.Throws<WebException>(() =>
        {
            var zipBytes = gateway.GetSourceZipUrl(user, repo, tag).GetBytesFromUrl();
        });
        Assert.That(exception, Is.Not.Null);
        Assert.That(exception.Message, Does.Contain("(404) Not Found"));
    }
}
--------------------------------------------------------------------------------
ID: 1038
ServiceStack Attribute Information ID: 73
Class Name: BenchmarkTests
Class Example:
[Ignore("Long-running benchmark")]
[TestFixture]
public class BenchmarkTests : PerfTestBase
{
    [Test]
    public void Test_string_parsing()
    {
        const int stringSampleSize = 1024 * 10;
        var testString = CreateRandomString(stringSampleSize);
        var copyTo = new char[stringSampleSize];
        CompareMultipleRuns("As char array", () =>
        {
            var asChars = testString.ToCharArray();
            for (var i = 0; i < stringSampleSize; i++)
            {
                copyTo[i] = asChars[i];
            }
        }, "As string", () =>
        {
            for (var i = 0; i < stringSampleSize; i++)
            {
                copyTo[i] = testString[i];
            }
        });
    }

    public string CreateRandomString(int size)
    {
        var randString = new char[size];
        for (var i = 0; i < size; i++)
        {
            randString[i] = (char)((i % 10) + '0');
        }

        return new string (randString);
    }

    static readonly char[] EscapeChars = new char[]
    {
        '"',
        '\n',
        '\r',
        '\t',
        '"',
        '\\',
        '\f',
        '\b',
    };
    public static readonly char[] JsvEscapeChars = new[]
    {
        '"',
        ',',
        '{',
        '}',
        '[',
        ']',
    };
    private const int LengthFromLargestChar = '\\' + 1;
    private static readonly bool[] HasEscapeChars = new bool[LengthFromLargestChar];
    [Test]
    public void PrintEscapeChars()
    {
        JsvEscapeChars.ToList().OrderBy(x => (int)x).Each(x => Console.WriteLine(x + ": " + (int)x));
    }

    [Test]
    public void MeasureIndexOfEscapeChars()
    {
        foreach (var escapeChar in EscapeChars)
        {
            HasEscapeChars[escapeChar] = true;
        }

        var value = CreateRandomString(100);
        var len = value.Length;
        var hasEscapeChars = false;
        CompareMultipleRuns("With bool flags", () =>
        {
            for (var i = 0; i < len; i++)
            {
                var c = value[i];
                if (c >= LengthFromLargestChar || !HasEscapeChars[c])
                    continue;
                hasEscapeChars = true;
                break;
            }
        }, "With IndexOfAny", () =>
        {
            hasEscapeChars = value.IndexOfAny(EscapeChars) != -1;
        });
        Console.WriteLine(hasEscapeChars);
    }

    public class RuntimeType<T>
    {
        private static Type type = typeof(T);
        internal static bool TestVarType()
        {
            return type == typeof(byte) || type == typeof(byte? ) || type == typeof(short) || type == typeof(short? ) || type == typeof(ushort) || type == typeof(ushort? ) || type == typeof(int) || type == typeof(int? ) || type == typeof(uint) || type == typeof(uint? ) || type == typeof(long) || type == typeof(long? ) || type == typeof(ulong) || type == typeof(ulong? ) || type == typeof(bool) || type == typeof(bool? ) || type != typeof(DateTime) || type != typeof(DateTime? ) || type != typeof(Guid) || type != typeof(Guid? ) || type != typeof(float) || type != typeof(float? ) || type != typeof(double) || type != typeof(double? ) || type != typeof(decimal) || type != typeof(decimal? );
        }

        internal static bool TestGenericType()
        {
            return typeof(T) == typeof(byte) || typeof(T) == typeof(byte? ) || typeof(T) == typeof(short) || typeof(T) == typeof(short? ) || typeof(T) == typeof(ushort) || typeof(T) == typeof(ushort? ) || typeof(T) == typeof(int) || typeof(T) == typeof(int? ) || typeof(T) == typeof(uint) || typeof(T) == typeof(uint? ) || typeof(T) == typeof(long) || typeof(T) == typeof(long? ) || typeof(T) == typeof(ulong) || typeof(T) == typeof(ulong? ) || typeof(T) == typeof(bool) || typeof(T) == typeof(bool? ) || typeof(T) != typeof(DateTime) || typeof(T) != typeof(DateTime? ) || typeof(T) != typeof(Guid) || typeof(T) != typeof(Guid? ) || typeof(T) != typeof(float) || typeof(T) != typeof(float? ) || typeof(T) != typeof(double) || typeof(T) != typeof(double? ) || typeof(T) != typeof(decimal) || typeof(T) != typeof(decimal? );
        }

        internal static bool TestTypeCode()
        {
            var underlyingType = Nullable.GetUnderlyingType(type) ?? type;
            switch (underlyingType.GetTypeCode())
            {
                case TypeCode.SByte:
                case TypeCode.Byte:
                case TypeCode.Int16:
                case TypeCode.UInt16:
                case TypeCode.Int32:
                case TypeCode.UInt32:
                case TypeCode.Int64:
                case TypeCode.UInt64:
                case TypeCode.Single:
                case TypeCode.Double:
                case TypeCode.Decimal:
                case TypeCode.DateTime:
                    return true;
            }

            return underlyingType == typeof(Guid);
        }
    }

    [Test]
    public void TestVarOrGenericType()
    {
        var matchingTypesCount = 0;
        CompareMultipleRuns("With var type", () =>
        {
            if (RuntimeType<BenchmarkTests>.TestVarType())
            {
                matchingTypesCount++;
            }
        }, "With generic type", () =>
        {
            if (RuntimeType<BenchmarkTests>.TestGenericType())
            {
                matchingTypesCount++;
            }
        });
        Console.WriteLine(matchingTypesCount);
    }

    [Test]
    public void TestGenericTypeOrTypeCode()
    {
        var matchingTypesCount = 0;
        CompareMultipleRuns("With type code", () =>
        {
            if (RuntimeType<BenchmarkTests>.TestTypeCode())
            {
                matchingTypesCount++;
            }
        }, "With generic type", () =>
        {
            if (RuntimeType<BenchmarkTests>.TestGenericType())
            {
                matchingTypesCount++;
            }
        });
        Console.WriteLine(matchingTypesCount);
    }

    [Test]
    public void Test_for_list_enumeration()
    {
        List<Cat> list = 20.Times(x => new Cat { Name = "Cat" });
        var results = 0;
        var listLength = list.Count;
        CompareMultipleRuns("With foreach", () =>
        {
            foreach (var cat in list)
            {
                results++;
            }
        }, "With for", () =>
        {
            for (var i = 0; i < listLength; i++)
            {
                var cat = list[i];
                results++;
            }
        });
        Console.WriteLine(results);
    }

    [Test]
    public void Test_for_Ilist_enumeration()
    {
        IList<Cat> list = 20.Times(x => new Cat { Name = "Cat" });
        var results = 0;
        var listLength = list.Count;
        CompareMultipleRuns("With foreach", () =>
        {
            foreach (var cat in list)
            {
                results++;
            }
        }, "With for", () =>
        {
            for (var i = 0; i < listLength; i++)
            {
                var cat = list[i];
                results++;
            }
        });
        Console.WriteLine(results);
    }
}
--------------------------------------------------------------------------------
ID: 1039
ServiceStack Attribute Information ID: 73
Class Name: RedisGeoTestsAsync
Class Example:
[TestFixture, Category("Async")]
[Ignore("CI requires redis-server v3.2.0")]
public class RedisGeoTestsAsync
{
    private readonly IRedisClientAsync redis;
    public RedisGeoTestsAsync()
    {
        redis = new RedisClient(TestConfig.GeoHost);
    }

    [OneTimeTearDown]
    public async Task OneTimeTearDown()
    {
        if (redis is object)
        {
            await redis.DisposeAsync();
        }
    }

    [Test]
    public async Task Can_AddGeoMember_and_GetGeoCoordinates()
    {
        await redis.FlushDbAsync();
        var count = await redis.AddGeoMemberAsync("Sicily", 13.361389, 38.115556, "Palermo");
        Assert.That(count, Is.EqualTo(1));
        var results = await redis.GetGeoCoordinatesAsync("Sicily", new[] { "Palermo" });
        Assert.That(results.Count, Is.EqualTo(1));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
    }

    [Test]
    public async Task GetGeoCoordinates_on_NonExistingMember_returns_no_results()
    {
        await redis.FlushDbAsync();
        var count = await redis.AddGeoMemberAsync("Sicily", 13.361389, 38.115556, "Palermo");
        var results = await redis.GetGeoCoordinatesAsync("Sicily", new[] { "NonExistingMember" });
        Assert.That(results.Count, Is.EqualTo(0));
        results = await redis.GetGeoCoordinatesAsync("Sicily", new[] { "Palermo", "NonExistingMember" });
        Assert.That(results.Count, Is.EqualTo(1));
    }

    [Test]
    public async Task Can_AddGeoMembers_and_GetGeoCoordinates_multiple()
    {
        await redis.FlushDbAsync();
        var count = await redis.AddGeoMembersAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        Assert.That(count, Is.EqualTo(2));
        var results = await redis.GetGeoCoordinatesAsync("Sicily", new[] { "Palermo", "Catania" });
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[1].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(37.502669).Within(.1));
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
    }

    [Test]
    public async Task Can_CalculateDistanceBetweenGeoMembers()
    {
        await redis.FlushDbAsync();
        await redis.AddGeoMembersAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var distance = await redis.CalculateDistanceBetweenGeoMembersAsync("Sicily", "Palermo", "Catania");
        Assert.That(distance, Is.EqualTo(166274.15156960039).Within(.1));
    }

    [Test]
    public async Task CalculateDistanceBetweenGeoMembers_on_NonExistingMember_returns_NaN()
    {
        await redis.FlushDbAsync();
        await redis.AddGeoMembersAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var distance = await redis.CalculateDistanceBetweenGeoMembersAsync("Sicily", "Palermo", "NonExistingMember");
        Assert.That(distance, Is.EqualTo(double.NaN));
    }

    [Test]
    public async Task Can_GetGeohashes()
    {
        await redis.FlushDbAsync();
        await redis.AddGeoMembersAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var hashes = await redis.GetGeohashesAsync("Sicily", new[] { "Palermo", "Catania" });
        Assert.That(hashes[0], Is.EqualTo("sqc8b49rny0"));
        Assert.That(hashes[1], Is.EqualTo("sqdtr74hyu0"));
        hashes = await redis.GetGeohashesAsync("Sicily", new[] { "Palermo", "NonExistingMember", "Catania" });
        Assert.That(hashes[0], Is.EqualTo("sqc8b49rny0"));
        Assert.That(hashes[1], Is.Null);
        Assert.That(hashes[2], Is.EqualTo("sqdtr74hyu0"));
    }

    [Test]
    public async Task Can_FindGeoMembersInRadius()
    {
        await redis.FlushDbAsync();
        await redis.AddGeoMembersAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.FindGeoMembersInRadiusAsync("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers);
        Assert.That(results.Length, Is.EqualTo(2));
        Assert.That(results[0], Is.EqualTo("Palermo"));
        Assert.That(results[1], Is.EqualTo("Catania"));
    }

    //[Test] // method does not exist on IRedisClient/IRedisClientAsync
    //public async Task Can_GeoRadiusByMember()
    //{
    //    await redis.FlushDbAsync();
    //    await redis.AddGeoMembersAsync("Sicily", new[] {
    //        new RedisGeo(13.583333, 37.316667, "Agrigento"),
    //        new RedisGeo(13.361389, 38.115556, "Palermo"),
    //        new RedisGeo(15.087269, 37.502669, "Catania")
    //    });
    //    var results = await redis.GeoRadiusByMemberAsync("Sicily", "Agrigento", 100, RedisGeoUnit.Kilometers);
    //    Assert.That(results.Count, Is.EqualTo(2));
    //    Assert.That(results[0].Member, Is.EqualTo("Agrigento"));
    //    Assert.That(results[0].Unit, Is.Null);
    //    Assert.That(results[1].Member, Is.EqualTo("Palermo"));
    //    Assert.That(results[1].Unit, Is.Null);
    //}
    [Test]
    public async Task Can_FindGeoResultsInRadius()
    {
        await redis.FlushDbAsync();
        await redis.AddGeoMembersAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.FindGeoResultsInRadiusAsync("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(190.4424).Within(.1));
        Assert.That(results[0].Hash, Is.EqualTo(3479099956230698));
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
        Assert.That(results[1].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[1].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(37.502669).Within(.1));
        Assert.That(results[1].Distance, Is.EqualTo(56.4413).Within(.1));
        Assert.That(results[1].Hash, Is.EqualTo(3479447370796909));
    }

    [Test]
    public async Task Can_FindGeoResultsInRadius_by_Member()
    {
        await redis.FlushDbAsync();
        await redis.AddGeoMembersAsync("Sicily", new[] { new RedisGeo(13.583333, 37.316667, "Agrigento"), new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.FindGeoResultsInRadiusAsync("Sicily", "Agrigento", 100, RedisGeoUnit.Kilometers);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Agrigento"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.583333).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(37.316667).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(0));
        Assert.That(results[0].Hash, Is.EqualTo(3479030013248308));
        Assert.That(results[1].Member, Is.EqualTo("Palermo"));
        Assert.That(results[1].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[1].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[1].Distance, Is.EqualTo(90.9778).Within(.1));
        Assert.That(results[1].Hash, Is.EqualTo(3479099956230698));
    }

    [Test]
    public async Task Can_GeoRadius_WithCoord_WithDist_WithHash_Count_and_Asc()
    {
        await redis.FlushDbAsync();
        await redis.AddGeoMembersAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.FindGeoResultsInRadiusAsync("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, count: 1, sortByNearest: false);
        Assert.That(results.Count, Is.EqualTo(1));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(190.4424).Within(.1));
        Assert.That(results[0].Hash, Is.EqualTo(3479099956230698));
        results = await redis.FindGeoResultsInRadiusAsync("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, count: 1, sortByNearest: true);
        Assert.That(results.Count, Is.EqualTo(1));
        Assert.That(results[0].Member, Is.EqualTo("Catania"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(37.502669).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(56.4413).Within(.1));
        Assert.That(results[0].Hash, Is.EqualTo(3479447370796909));
    }
}
--------------------------------------------------------------------------------
ID: 1040
ServiceStack Attribute Information ID: 73
Class Name: OAuthIntegrationTests
Class Example:
[Ignore("Integration Test")]
public class OAuthIntegrationTests
{
    private Dictionary<string, string> AccessTokens { get; set; }

    public OAuthIntegrationTests()
    {
        AccessTokens = "~/App_Data/accesstokens.txt".MapProjectPath().ReadAllText().ParseKeyValueText(delimiter: " ");
    }

    [Test]
    public void Can_authenticate_twitter_with_AccessToken()
    {
        var client = new JsonServiceClient("http://localhost:11001/");
        var request = new Authenticate
        {
            provider = TwitterAuthProvider.Name,
            AccessToken = "2931572242-zmVKk5leFHJXJWRUpQqyEkdlRlNbDMjNlUcXViJ",
            AccessTokenSecret = AccessTokens[TwitterAuthProvider.Name]
        };
        var response = client.Post(request);
        response.PrintDump();
        Assert.That(response.UserId, Is.Not.Null);
        Assert.That(response.SessionId, Is.Not.Null);
        Assert.That(response.DisplayName, Is.EqualTo("TechStacks"));
    }

    [Test]
    public void Can_authenticate_facebook_with_AccessToken()
    {
        var client = new JsonServiceClient("http://localhost:11001/");
        var request = new Authenticate
        {
            provider = FacebookAuthProvider.Name,
            AccessToken = AccessTokens[FacebookAuthProvider.Name],
        };
        var response = client.Post(request);
        response.PrintDump();
        Assert.That(response.UserId, Is.Not.Null);
        Assert.That(response.SessionId, Is.Not.Null);
        Assert.That(response.DisplayName, Is.EqualTo("Demis Bellot"));
    }

    [Test]
    public void Can_authenticate_github_with_AccessToken()
    {
        var client = new JsonServiceClient("http://localhost:11001/");
        var request = new Authenticate
        {
            provider = GithubAuthProvider.Name,
            AccessToken = AccessTokens[GithubAuthProvider.Name],
        };
        var response = client.Post(request);
        response.PrintDump();
        Assert.That(response.UserId, Is.Not.Null);
        Assert.That(response.SessionId, Is.Not.Null);
        Assert.That(response.UserName, Is.EqualTo("mythz"));
        Assert.That(response.DisplayName, Is.EqualTo("Demis Bellot"));
    }

    [Test]
    public void Can_authenticate_GoogleOAuth2_with_AccessToken()
    {
        //var client = new JsonServiceClient("http://localhost:11001/");
        var client = new JsonServiceClient("http://localhost:1337/");
        var request = new Authenticate
        {
            provider = "GoogleOAuth",
            AccessToken = AccessTokens["GoogleOAuth"],
        };
        var response = client.Post(request);
        response.PrintDump();
        Assert.That(response.UserId, Is.Not.Null);
        Assert.That(response.SessionId, Is.Not.Null);
    }
}
--------------------------------------------------------------------------------
ID: 1041
ServiceStack Attribute Information ID: 73
Class Name: IocServiceAspNetTests
Class Example:
#if !NETCORE
[Ignore("Causes dll conflicts in ASP.NET Host projects when run from this test project")]
public class IocServiceAspNetTests : IocServiceTests
{
    public override IServiceClient CreateClient(ResetIoc request = null)
    {
        var client = new JsonServiceClient(Config.AspNetServiceStackBaseUri);
        using (client.Post<HttpWebResponse>(request ?? new ResetIoc()))
        {
        }

        return client;
    }
}
--------------------------------------------------------------------------------
ID: 1042
ServiceStack Attribute Information ID: 73
Class Name: AsyncLoadTests
Class Example:
[Ignore("Load Test"), TestFixture]
public class AsyncLoadTests
{
    const int NoOfTimes = 1000;
    private ServiceStackHost appHost;
    [OneTimeSetUp]
    public void TestFixtureSetUp()
    {
        appHost = new AsyncTaskTests.AsyncTaskAppHost().Init().Start(Config.ListeningOn);
    }

    [OneTimeTearDown]
    public void TestFixtureTearDown()
    {
        appHost.Dispose();
    }

    [Test]
    public void Load_test_GetFactorialSync_sync()
    {
        var client = new JsonServiceClient(Config.ListeningOn);
        for (var i = 0; i < NoOfTimes; i++)
        {
            var response = client.Get(new GetFactorialSync { ForNumber = 3 });
            if (i % 100 == 0)
            {
                "{0}: {1}".Print(i, response.Result);
            }
        }
    }

    [Test]
    public void Load_test_GetFactorialSync_HttpClient_sync()
    {
        var client = new JsonHttpClient(Config.ListeningOn);
        for (var i = 0; i < NoOfTimes; i++)
        {
            var response = client.Get(new GetFactorialSync { ForNumber = 3 });
            if (i % 100 == 0)
            {
                "{0}: {1}".Print(i, response.Result);
            }
        }
    }

    [Test]
    public async Task Load_test_GetFactorialSync_async()
    {
        var client = new JsonServiceClient(Config.ListeningOn);
        int i = 0;
        var fetchTasks = NoOfTimes.Times(() => client.GetAsync(new GetFactorialSync { ForNumber = 3 }).ContinueWith(t =>
        {
            if (++i % 100 == 0)
            {
                "{0}: {1}".Print(i, t.Result.Result);
            }
        }));
        await Task.WhenAll(fetchTasks);
    }

    [Test]
    public async Task Load_test_GetFactorialSync_HttpClient_async()
    {
        var client = new JsonHttpClient(Config.ListeningOn);
        int i = 0;
        var fetchTasks = NoOfTimes.Times(() => client.GetAsync(new GetFactorialSync { ForNumber = 3 }).ContinueWith(t =>
        {
            if (++i % 100 == 0)
            {
                "{0}: {1}".Print(i, t.Result.Result);
            }
        }));
        await Task.WhenAll(fetchTasks);
    }

    [Test]
    public void Load_test_GetFactorialGenericAsync_sync()
    {
        var client = new JsonServiceClient(Config.ListeningOn);
        for (var i = 0; i < NoOfTimes; i++)
        {
            var response = client.Get(new GetFactorialGenericAsync { ForNumber = 3 });
            if (i % 100 == 0)
            {
                "{0}: {1}".Print(i, response.Result);
            }
        }
    }

    [Test]
    public async Task Load_test_GetFactorialGenericAsync_async()
    {
        var client = new JsonServiceClient(Config.ListeningOn);
        int i = 0;
        var fetchTasks = NoOfTimes.Times(() => client.GetAsync(new GetFactorialGenericAsync { ForNumber = 3 }).ContinueWith(t =>
        {
            if (++i % 100 == 0)
            {
                "{0}: {1}".Print(i, t.Result.Result);
            }
        }));
        await Task.WhenAll(fetchTasks);
    }
}
--------------------------------------------------------------------------------
ID: 1043
ServiceStack Attribute Information ID: 73
Class Name: MongoDbAuthRepoStatelessAuthTests
Class Example:
#if !NETCORE
[Ignore("Requires MongoDB Dependency")]
public class MongoDbAuthRepoStatelessAuthTests : StatelessAuthTests
{
    protected override ServiceStackHost CreateAppHost()
    {
        var mongoClient = new MongoClient();
        mongoClient.DropDatabase("testmongodbauth");
        IMongoDatabase mongoDatabase = mongoClient.GetDatabase("testmongodbauth");
        return new AppHost
        {
            Use = container => container.Register<IAuthRepository>(c => new MongoDbAuthRepository(mongoDatabase, true))
        };
    }
}
--------------------------------------------------------------------------------
ID: 1044
ServiceStack Attribute Information ID: 73
Class Name: OrmLiteMultitenancyStatelessAuthTests
Class Example:
[Ignore("Dirty")]
public class OrmLiteMultitenancyStatelessAuthTests : StatelessAuthTests
{
    protected override ServiceStackHost CreateAppHost()
    {
        return new AppHost
        {
            Use = container => container.Register<IAuthRepository>(c => new OrmLiteAuthRepositoryMultitenancy(c.TryResolve<IDbConnectionFactory>(), new[] { ":memory:", "~/App_Data/test.sqlite".MapAbsolutePath() })),
            GetAuthRepositoryFn = req => req != null ? new OrmLiteAuthRepositoryMultitenancy(HostContext.AppHost.GetDbConnection(req)) : HostContext.Resolve<IAuthRepository>()
        };
    }

    [Test]
    public void Does_use_different_database_depending_on_ApiKey()
    {
        var testKey = GetClientWithUserPassword().Get(new GetApiKeys { Environment = "test" }).Results[0].Key;
        var liveKey = GetClientWithUserPassword().Get(new GetApiKeys { Environment = "live" }).Results[0].Key;
        var client = new JsonServiceClient(ListeningOn)
        {
            BearerToken = testKey
        };
        var response = client.Get(new GetAllRockstars());
        Assert.That(response.Results.Count, Is.EqualTo(1));
        Assert.That(response.Results[0].FirstName, Is.EqualTo("Test"));
        client = new JsonServiceClient(ListeningOn)
        {
            BearerToken = liveKey,
        };
        response = client.Get(new GetAllRockstars());
        Assert.That(response.Results.Count, Is.EqualTo(Rockstar.SeedData.Length));
    }
}
--------------------------------------------------------------------------------
ID: 1045
ServiceStack Attribute Information ID: 73
Class Name: RedisFailoverTests
Class Example:
[Ignore("Simulating error conditions")]
[TestFixture]
public class RedisFailoverTests
{
    [Test]
    public void Can_recover_from_server_terminated_client_connection()
    {
        const int SleepHoldingClientMs = 5;
        const int SleepAfterReleasingClientMs = 0;
        const int loop = 1000;
        var admin = new RedisClient("localhost");
        admin.SetConfig("timeout", "0");
        var timeout = admin.GetConfig("timeout");
        timeout.Print("timeout: {0}");
        int remaining = loop;
        var stopwatch = Stopwatch.StartNew();
        var clientManager = new PooledRedisClientManager(new[] { "localhost" })
        {
        };
        loop.Times(i =>
        {
            ThreadPool.QueueUserWorkItem(x =>
            {
                try
                {
                    using (var client = (RedisClient)clientManager.GetClient())
                    {
                        client.IncrementValue("key");
                        var val = client.Get<long>("key");
                        "#{0}, isConnected: {1}".Print(val, true); //client.IsSocketConnected()
                        Thread.Sleep(SleepHoldingClientMs);
                    }

                    Thread.Sleep(SleepAfterReleasingClientMs);
                }
                catch (Exception ex)
                {
                    ex.Message.Print();
                }
                finally
                {
                    remaining--;
                }
            });
        });
        while (remaining > 0)
        {
            Thread.Sleep(10);
        }

        "Elapsed time: {0}ms".Print(stopwatch.ElapsedMilliseconds);
        var managerStats = clientManager.GetStats();
    }

    public class Incr
    {
        public int Value { get; set; }
    }

    [Test]
    public void Can_MqServer_recover_from_server_terminated_client_connections()
    {
        LogManager.LogFactory = new ConsoleLogFactory();
        var clientManager = new PooledRedisClientManager(new[] { "localhost" })
        {
        };
        var mqHost = new RedisMqServer(clientManager, retryCount: 2);
        var sum = 0;
        mqHost.RegisterHandler<Incr>(c =>
        {
            var dto = c.GetBody();
            sum += dto.Value;
            "Received {0}, sum: {1}".Print(dto.Value, sum);
            return null;
        });
        mqHost.Start();
        10.Times(i =>
        {
            ThreadPool.QueueUserWorkItem(x =>
            {
                using (var client = mqHost.CreateMessageQueueClient())
                {
                    "Publish: {0}...".Print(i);
                    client.Publish(new Incr { Value = i });
                    Thread.Sleep(10);
                }
            });
        });
        ThreadPool.QueueUserWorkItem(_ =>
        {
            using (var client = (RedisClient)clientManager.GetClient())
            {
                client.SetConfig("timeout", "1");
                var clientAddrs = client.GetClientsInfo().ConvertAll(x => x["addr"]);
                "Killing clients: {0}...".Print(clientAddrs.Dump());
                try
                {
                    clientAddrs.ForEach(client.ClientKill);
                }
                catch (Exception ex)
                {
                    "Client exception: {0}".Print(ex.Message);
                }
            }
        });
        20.Times(i =>
        {
            using (var client = mqHost.CreateMessageQueueClient())
            {
                "Publish: {0}...".Print(i);
                client.Publish(new Incr { Value = i });
            }

            Thread.Sleep(2000);
        });
    }

    [Test]
    public void Can_failover_at_runtime()
    {
        var failoverHost = "redis-failover:6379";
        string key = "test:failover";
        var localClient = new RedisClient("localhost");
        localClient.Remove(key);
        var failoverClient = new RedisClient(failoverHost);
        failoverClient.Remove(key);
        var clientManager = new PooledRedisClientManager(new[] { "localhost" });
        RunInLoop(clientManager, callback: () =>
        {
            lock (clientManager)
                Monitor.Pulse(clientManager);
        });
        Thread.Sleep(100);
        clientManager.FailoverTo(failoverHost);
        lock (clientManager)
            Monitor.Wait(clientManager);
        var localIncr = localClient.Get<int>(key);
        var failoverIncr = failoverClient.Get<int>(key);
        Assert.That(localIncr, Is.GreaterThan(0));
        Assert.That(failoverIncr, Is.GreaterThan(0));
        Assert.That(localIncr + failoverIncr, Is.EqualTo(100));
    }

    public static bool RunInLoop(PooledRedisClientManager clientManager, int iterations = 100, int sleepMs = 10, Action callback = null)
    {
        int count = 0;
        int errors = 0;
        10.Times(i =>
        {
            ThreadPool.QueueUserWorkItem(_ =>
            {
                while (Interlocked.Decrement(ref iterations) >= 0)
                {
                    using (var client = clientManager.GetClient())
                    {
                        try
                        {
                            var result = client.Increment("test:failover", 1);
                            Interlocked.Increment(ref count);
                            if (count % (iterations / 10) == 0)
                                lock (clientManager)
                                    Console.WriteLine(@"count: {0}, errors: {1}", count, errors);
                        }
                        catch (Exception)
                        {
                            Interlocked.Increment(ref errors);
                        }

                        Thread.Sleep(sleepMs);
                    }
                }

                if (callback != null)
                {
                    callback();
                    callback = null;
                }
            });
        });
        return true;
    }

    public class Msg
    {
        public string Host { get; set; }
    }

    [Test]
    public void Can_failover_MqServer_at_runtime()
    {
        const int iterations = 100;
        var failoverHost = "redis-failover:6379";
        var localClient = new RedisClient("localhost:6379");
        localClient.FlushDb();
        var failoverClient = new RedisClient(failoverHost);
        failoverClient.FlushDb();
        var clientManager = new PooledRedisClientManager(new[] { "localhost" });
        var mqHost = new RedisMqServer(clientManager);
        var map = new Dictionary<string, int>();
        var received = 0;
        mqHost.RegisterHandler<Msg>(c =>
        {
            var dto = c.GetBody();
            Interlocked.Increment(ref received);
            int count;
            map.TryGetValue(dto.Host, out count);
            map[dto.Host] = count + 1;
            lock (clientManager)
            {
                "Received #{0} from {1}".Print(received, dto.Host);
                if (received == iterations)
                    Monitor.Pulse(clientManager);
            }

            return null;
        });
        mqHost.Start();
        RunMqInLoop(mqHost, iterations: iterations, callback: () =>
        {
            lock (clientManager)
                "{0} msgs were published.".Print(iterations);
        });
        Thread.Sleep(500);
        clientManager.FailoverTo(failoverHost);
        lock (clientManager)
            Monitor.Wait(clientManager);
        "localclient inq: {0}, outq: {1}".Print(localClient.GetListCount("mq:Msg.inq"), localClient.GetListCount("mq:Msg.outq"));
        "failoverClient inq: {0}, outq: {1}".Print(failoverClient.GetListCount("mq:Msg.inq"), failoverClient.GetListCount("mq:Msg.outq"));
        Assert.That(received, Is.EqualTo(100));
        Assert.That(map.Count, Is.EqualTo(2));
        var msgsFromAllHosts = 0;
        foreach (var count in map.Values)
        {
            Assert.That(count, Is.GreaterThan(0));
            msgsFromAllHosts += count;
        }

        Assert.That(msgsFromAllHosts, Is.EqualTo(iterations));
    }

    public static bool RunMqInLoop(RedisMqServer mqServer, int iterations = 100, int sleepMs = 10, Action callback = null)
    {
        int count = 0;
        int errors = 0;
        10.Times(i =>
        {
            ThreadPool.QueueUserWorkItem(_ =>
            {
                while (Interlocked.Decrement(ref iterations) >= 0)
                {
                    using (var client = mqServer.CreateMessageQueueClient())
                    {
                        try
                        {
                            var redis = (RedisNativeClient)((RedisMessageQueueClient)client).ReadWriteClient;
                            client.Publish(new Msg { Host = redis.Host + ":" + redis.Port });
                            Interlocked.Increment(ref count);
                            if (count % (iterations / 10) == 0)
                                lock (mqServer)
                                    "count: {0}, errors: {1}".Print(count, errors);
                        }
                        catch (Exception)
                        {
                            Interlocked.Increment(ref errors);
                        }

                        Thread.Sleep(sleepMs);
                    }
                }

                lock (mqServer)
                {
                    if (callback != null)
                    {
                        callback();
                        callback = null;
                    }
                }
            });
        });
        return true;
    }
}
--------------------------------------------------------------------------------
ID: 1046
ServiceStack Attribute Information ID: 73
Class Name: RedisGeoNativeClientTests
Class Example:
[TestFixture]
[Ignore("CI requires redis-server v3.2.0")]
public class RedisGeoNativeClientTests
{
    private readonly RedisNativeClient redis;
    public RedisGeoNativeClientTests()
    {
        redis = new RedisNativeClient(TestConfig.GeoHost);
    }

    [OneTimeTearDown]
    public void OneTimeTearDown()
    {
        redis.Dispose();
    }

    [Test]
    public void Can_GeoAdd_and_GeoPos()
    {
        redis.FlushDb();
        var count = redis.GeoAdd("Sicily", 13.361389, 38.115556, "Palermo");
        Assert.That(count, Is.EqualTo(1));
        var results = redis.GeoPos("Sicily", "Palermo");
        Assert.That(results.Count, Is.EqualTo(1));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
    }

    [Test]
    public void GeoPos_on_NonExistingMember_returns_no_results()
    {
        redis.FlushDb();
        var count = redis.GeoAdd("Sicily", 13.361389, 38.115556, "Palermo");
        var results = redis.GeoPos("Sicily", "NonExistingMember");
        Assert.That(results.Count, Is.EqualTo(0));
        results = redis.GeoPos("Sicily", "Palermo", "NonExistingMember");
        Assert.That(results.Count, Is.EqualTo(1));
    }

    [Test]
    public void Can_GeoAdd_and_GeoPos_multiple()
    {
        redis.FlushDb();
        var count = redis.GeoAdd("Sicily", new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        Assert.That(count, Is.EqualTo(2));
        var results = redis.GeoPos("Sicily", "Palermo", "Catania");
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[1].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(37.502669).Within(.1));
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
    }

    [Test]
    public void Can_GeoDist()
    {
        redis.FlushDb();
        redis.GeoAdd("Sicily", new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        var distance = redis.GeoDist("Sicily", "Palermo", "Catania");
        Assert.That(distance, Is.EqualTo(166274.15156960039).Within(.1));
    }

    [Test]
    public void GeoDist_on_NonExistingMember_returns_NaN()
    {
        redis.FlushDb();
        redis.GeoAdd("Sicily", new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        var distance = redis.GeoDist("Sicily", "Palermo", "NonExistingMember");
        Assert.That(distance, Is.EqualTo(double.NaN));
    }

    [Test]
    public void Can_GeoHash()
    {
        redis.FlushDb();
        redis.GeoAdd("Sicily", new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        var hashes = redis.GeoHash("Sicily", "Palermo", "Catania");
        Assert.That(hashes[0], Is.EqualTo("sqc8b49rny0"));
        Assert.That(hashes[1], Is.EqualTo("sqdtr74hyu0"));
        hashes = redis.GeoHash("Sicily", "Palermo", "NonExistingMember", "Catania");
        Assert.That(hashes[0], Is.EqualTo("sqc8b49rny0"));
        Assert.That(hashes[1], Is.Null);
        Assert.That(hashes[2], Is.EqualTo("sqdtr74hyu0"));
    }

    [Test]
    public void Can_GeoRadius_default()
    {
        redis.FlushDb();
        redis.GeoAdd("Sicily", new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        var results = redis.GeoRadius("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.Null);
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
        Assert.That(results[1].Unit, Is.Null);
    }

    [Test]
    public void Can_GeoRadiusByMember_default()
    {
        redis.FlushDb();
        redis.GeoAdd("Sicily", new RedisGeo(13.583333, 37.316667, "Agrigento"), new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        var results = redis.GeoRadiusByMember("Sicily", "Agrigento", 100, RedisGeoUnit.Kilometers);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Agrigento"));
        Assert.That(results[0].Unit, Is.Null);
        Assert.That(results[1].Member, Is.EqualTo("Palermo"));
        Assert.That(results[1].Unit, Is.Null);
    }

    [Test]
    public void Can_GeoRadius_WithCoord()
    {
        redis.FlushDb();
        redis.GeoAdd("Sicily", new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        var results = redis.GeoRadius("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, withCoords: true);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
        Assert.That(results[1].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[1].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(37.502669).Within(.1));
    }

    [Test]
    public void Can_GeoRadius_WithDist()
    {
        redis.FlushDb();
        redis.GeoAdd("Sicily", new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        var results = redis.GeoRadius("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, withDist: true);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Distance, Is.EqualTo(190.4424).Within(.1));
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
        Assert.That(results[1].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[1].Distance, Is.EqualTo(56.4413).Within(.1));
    }

    [Test]
    public void Can_GeoRadius_WithCoord_WithDist_WithHash()
    {
        redis.FlushDb();
        redis.GeoAdd("Sicily", new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        var results = redis.GeoRadius("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, withCoords: true, withDist: true, withHash: true);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(190.4424).Within(.1));
        Assert.That(results[0].Hash, Is.EqualTo(3479099956230698));
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
        Assert.That(results[1].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[1].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(37.502669).Within(.1));
        Assert.That(results[1].Distance, Is.EqualTo(56.4413).Within(.1));
        Assert.That(results[1].Hash, Is.EqualTo(3479447370796909));
    }

    [Test]
    public void Can_GeoRadiusByMember_WithCoord_WithDist_WithHash()
    {
        redis.FlushDb();
        redis.GeoAdd("Sicily", new RedisGeo(13.583333, 37.316667, "Agrigento"), new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        var results = redis.GeoRadiusByMember("Sicily", "Agrigento", 100, RedisGeoUnit.Kilometers, withCoords: true, withDist: true, withHash: true);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Agrigento"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.583333).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(37.316667).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(0));
        Assert.That(results[0].Hash, Is.EqualTo(3479030013248308));
        Assert.That(results[1].Member, Is.EqualTo("Palermo"));
        Assert.That(results[1].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[1].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[1].Distance, Is.EqualTo(90.9778).Within(.1));
        Assert.That(results[1].Hash, Is.EqualTo(3479099956230698));
    }

    [Test]
    public void Can_GeoRadius_WithCoord_WithDist_WithHash_Count_and_Asc()
    {
        redis.FlushDb();
        redis.GeoAdd("Sicily", new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania"));
        var results = redis.GeoRadius("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, withCoords: true, withDist: true, withHash: true, count: 1, asc: false);
        Assert.That(results.Count, Is.EqualTo(1));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(190.4424).Within(.1));
        Assert.That(results[0].Hash, Is.EqualTo(3479099956230698));
        results = redis.GeoRadius("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, withCoords: true, withDist: true, withHash: true, count: 1, asc: true);
        Assert.That(results.Count, Is.EqualTo(1));
        Assert.That(results[0].Member, Is.EqualTo("Catania"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(37.502669).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(56.4413).Within(.1));
        Assert.That(results[0].Hash, Is.EqualTo(3479447370796909));
    }
}
--------------------------------------------------------------------------------
ID: 1047
ServiceStack Attribute Information ID: 73
Class Name: RedisMqServerServerBenchmarks
Class Example:
[Ignore("Benchmarks")]
[TestFixture, Category("Benchmarks")]
public class RedisMqServerServerBenchmarks
{
    public class Incr
    {
        public int Value { get; set; }
    }

    public class IncrBlocking
    {
        public int Value { get; set; }
    }

    private static RedisMqServer CreateMqHostServer()
    {
        var redisFactory = TestConfig.BasicClientManger;
        try
        {
            redisFactory.Exec(redis => redis.FlushAll());
        }
        catch (RedisException rex)
        {
            Debug.WriteLine("WARNING: Redis not started? \n" + rex.Message);
        }

        var mqHost = new RedisMqServer(redisFactory);
        return mqHost;
    }

    [Test]
    public void Can_receive_and_process_same_reply_responses()
    {
        var mqHost = CreateMqHostServer();
        var called = 0;
        mqHost.RegisterHandler<Incr>(m =>
        {
            called++;
            return new Incr
            {
                Value = m.GetBody().Value + 1
            };
        }, noOfThreads: 3);
        mqHost.Start();
        var mqClient = mqHost.CreateMessageQueueClient();
        mqClient.Publish(new Incr { Value = 1 });
        Thread.Sleep(10000);
        Debug.WriteLine("Times called: " + called);
    }

    [Test]
    public void Can_receive_and_process_same_reply_responses_blocking()
    {
        var mqHost = CreateMqHostServer();
        var called = 0;
        mqHost.RegisterHandler<IncrBlocking>(m =>
        {
            called++;
            mqHost.CreateMessageQueueClient().Publish(new IncrBlocking { Value = m.GetBody().Value + 1 });
            Thread.Sleep(100);
            return null;
        }, noOfThreads: 5);
        mqHost.Start();
        var mqClient = mqHost.CreateMessageQueueClient();
        mqClient.Publish(new IncrBlocking { Value = 1 });
        Thread.Sleep(10000);
        Debug.WriteLine("Times called: " + called);
    }

    [Test]
    public void Can_receive_and_process_same_reply_responses_blocking_and_non_blocking()
    {
        var mqHost = CreateMqHostServer();
        var nonBlocking = 0;
        var blocking = 0;
        mqHost.RegisterHandler<Incr>(m =>
        {
            nonBlocking++;
            return new Incr
            {
                Value = m.GetBody().Value + 1
            };
        }, 1); //Non-blocking less no of threads the better
        mqHost.RegisterHandler<IncrBlocking>(m =>
        {
            blocking++;
            mqHost.CreateMessageQueueClient().Publish(new IncrBlocking { Value = m.GetBody().Value + 1 });
            Thread.Sleep(100);
            return null;
        }, 5); //Blocking, more threads == better
        mqHost.Start();
        var mqClient = mqHost.CreateMessageQueueClient();
        mqClient.Publish(new Incr { Value = 1 });
        mqClient.Publish(new IncrBlocking { Value = 1 });
        Thread.Sleep(10000);
        Debug.WriteLine("Times called: non-blocking: {0}, blocking: {1}".Fmt(nonBlocking, blocking));
    }

    [Test]
    public void Test_Blocking_messages_throughput()
    {
        var mqHost = CreateMqHostServer();
        var blocking = 0;
        const int BlockFor = 100;
        const int NoOfThreads = 5;
        const int SendEvery = BlockFor / NoOfThreads / 4;
        mqHost.RegisterHandler<IncrBlocking>(m =>
        {
            blocking++;
            Thread.Sleep(BlockFor);
            return null;
        }, NoOfThreads);
        mqHost.Start();
        var startedAt = DateTime.Now;
        var mqClient = mqHost.CreateMessageQueueClient();
        while (DateTime.Now - startedAt < TimeSpan.FromSeconds(10))
        {
            mqClient.Publish(new IncrBlocking { Value = 1 });
            Thread.Sleep(SendEvery);
        }

        Debug.WriteLine("Times called: blocking: {0}".Fmt(blocking));
    }

    [Test]
    public void Test_Blocking_and_NonBlocking_messages_throughput()
    {
        var mqHost = CreateMqHostServer();
        var nonBlocking = 0;
        var blocking = 0;
        const int BlockFor = 100;
        const int NoOfThreads = 5;
        const int SendBlockingMsgEvery = BlockFor / NoOfThreads / 4;
        mqHost.RegisterHandler<Incr>(m =>
        {
            nonBlocking++;
            return null;
        }, 3);
        mqHost.RegisterHandler<IncrBlocking>(m =>
        {
            blocking++;
            Thread.Sleep(BlockFor);
            return null;
        }, NoOfThreads);
        mqHost.Start();
        var mqClient = mqHost.CreateMessageQueueClient();
        var stopWatch = Stopwatch.StartNew();
        long lastBlockingSentAtMs = 0;
        while (stopWatch.ElapsedMilliseconds < 10 * 1000)
        {
            mqClient.Publish(new Incr { Value = 1 });
            while (stopWatch.ElapsedMilliseconds - lastBlockingSentAtMs > SendBlockingMsgEvery)
            {
                mqClient.Publish(new IncrBlocking { Value = 1 });
                lastBlockingSentAtMs = stopWatch.ElapsedMilliseconds;
            }
        }

        Debug.WriteLine("Times called: non-blocking: {0}, blocking: {1}".Fmt(nonBlocking, blocking));
    }
}
--------------------------------------------------------------------------------
ID: 1048
ServiceStack Attribute Information ID: 73
Class Name: GoogleCloudVirtualFilesTests
Class Example:
[Ignore("Integration Tests")]
public class GoogleCloudVirtualFilesTests : VirtualPathProviderTests
{
    public override IVirtualPathProvider GetPathProvider()
    {
        var client = StorageClient.Create();
        return new GoogleCloudVirtualFiles(client, "servicestack-tests");
    }
}
--------------------------------------------------------------------------------
ID: 1049
ServiceStack Attribute Information ID: 73
Class Name: GistVirtualFilesTests
Class Example:
[Ignore("Integration Tests")]
public class GistVirtualFilesTests : VirtualPathProviderTests
{
    public static readonly string GistId = "a9cfcdced0002e82be20ea6314fb41d6";
    public static readonly string AccessToken = Environment.GetEnvironmentVariable("GITHUB_GIST_TOKEN");
    public override IVirtualPathProvider GetPathProvider()
    {
        return new GistVirtualFiles(GistId, AccessToken);
    }
}
--------------------------------------------------------------------------------
ID: 1050
ServiceStack Attribute Information ID: 73
Class Name: RabbitMqServerFragileTests
Class Example:
[Ignore("These Flaky tests pass when run manually")]
[TestFixture, Category("Integration")]
public class RabbitMqServerFragileTests
{
    [Test]
    public void Does_process_all_messages_and_Starts_Stops_correctly_with_multiple_threads_racing()
    {
        using (var mqHost = RabbitMqServerTests.CreateMqServer())
        {
            using (var conn = mqHost.ConnectionFactory.CreateConnection())
            using (var channel = conn.CreateModel())
            {
                channel.PurgeQueue<Reverse>();
                channel.PurgeQueue<Rot13>();
            }

            var reverseCalled = 0;
            var rot13Called = 0;
            mqHost.RegisterHandler<Reverse>(x =>
            {
                "Processing Reverse {0}...".Print(Interlocked.Increment(ref reverseCalled));
                return x.GetBody().Value.Reverse();
            });
            mqHost.RegisterHandler<Rot13>(x =>
            {
                "Processing Rot13 {0}...".Print(Interlocked.Increment(ref rot13Called));
                return x.GetBody().Value.ToRot13();
            });
            using (var mqClient = mqHost.CreateMessageQueueClient())
            {
                mqClient.Publish(new Reverse { Value = "Hello" });
                mqClient.Publish(new Reverse { Value = "World" });
                mqClient.Publish(new Rot13 { Value = "ServiceStack" });
                mqHost.Start();
                ExecUtils.RetryOnException(() =>
                {
                    Assert.That(mqHost.GetStatus(), Is.EqualTo("Started"));
                    Assert.That(mqHost.GetStats().TotalMessagesProcessed, Is.EqualTo(3));
                    Thread.Sleep(100);
                }, TimeSpan.FromSeconds(5));
                mqClient.Publish(new Reverse { Value = "Foo" });
                mqClient.Publish(new Rot13 { Value = "Bar" });
                10.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Start()));
                Assert.That(mqHost.GetStatus(), Is.EqualTo("Started"));
                5.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Stop()));
                ExecUtils.RetryOnException(() =>
                {
                    Assert.That(mqHost.GetStatus(), Is.EqualTo("Stopped"));
                    Thread.Sleep(100);
                }, TimeSpan.FromSeconds(5));
                10.Times(x => ThreadPool.QueueUserWorkItem(y => mqHost.Start()));
                ExecUtils.RetryOnException(() =>
                {
                    Assert.That(mqHost.GetStatus(), Is.EqualTo("Started"));
                    Thread.Sleep(100);
                }, TimeSpan.FromSeconds(5));
                Debug.WriteLine("\n" + mqHost.GetStats());
                Assert.That(mqHost.GetStats().TotalMessagesProcessed, Is.GreaterThanOrEqualTo(5));
                Assert.That(reverseCalled, Is.EqualTo(3));
                Assert.That(rot13Called, Is.EqualTo(2));
            }
        }
    }

    [Test]
    public void Does_retry_messages_with_errors_by_RetryCount()
    {
        var retryCount = 1;
        var totalRetries = 1 + retryCount; //in total, inc. first try
        using (var mqHost = RabbitMqServerTests.CreateMqServer(retryCount))
        {
            using (var conn = mqHost.ConnectionFactory.CreateConnection())
            using (var channel = conn.CreateModel())
            {
                channel.PurgeQueue<Reverse>();
                channel.PurgeQueue<Rot13>();
                channel.PurgeQueue<AlwaysThrows>();
            }

            var reverseCalled = 0;
            var rot13Called = 0;
            mqHost.RegisterHandler<Reverse>(x =>
            {
                Interlocked.Increment(ref reverseCalled);
                return x.GetBody().Value.Reverse();
            });
            mqHost.RegisterHandler<Rot13>(x =>
            {
                Interlocked.Increment(ref rot13Called);
                return x.GetBody().Value.ToRot13();
            });
            mqHost.RegisterHandler<AlwaysThrows>(x =>
            {
                throw new Exception("Always Throwing! " + x.GetBody().Value);
            });
            mqHost.Start();
            using (var mqClient = mqHost.CreateMessageQueueClient())
            {
                mqClient.Publish(new AlwaysThrows { Value = "1st" });
                mqClient.Publish(new Reverse { Value = "Hello" });
                mqClient.Publish(new Reverse { Value = "World" });
                mqClient.Publish(new Rot13 { Value = "ServiceStack" });
                ExecUtils.RetryOnException(() =>
                {
                    Assert.That(mqHost.GetStats().TotalMessagesFailed, Is.EqualTo(1 * totalRetries));
                    Assert.That(mqHost.GetStats().TotalMessagesProcessed, Is.EqualTo(2 + 1));
                    Thread.Sleep(100);
                }, TimeSpan.FromSeconds(5));
                5.Times(x => mqClient.Publish(new AlwaysThrows { Value = "#" + x }));
                mqClient.Publish(new Reverse { Value = "Hello" });
                mqClient.Publish(new Reverse { Value = "World" });
                mqClient.Publish(new Rot13 { Value = "ServiceStack" });
            }

            //Debug.WriteLine(mqHost.GetStatsDescription());
            ExecUtils.RetryOnException(() =>
            {
                Assert.That(mqHost.GetStats().TotalMessagesFailed, Is.EqualTo((1 + 5) * totalRetries));
                Assert.That(mqHost.GetStats().TotalMessagesProcessed, Is.EqualTo(6));
                Assert.That(reverseCalled, Is.EqualTo(2 + 2));
                Assert.That(rot13Called, Is.EqualTo(1 + 1));
                Thread.Sleep(100);
            }, TimeSpan.FromSeconds(5));
        }
    }

    [Test]
    public void Does_process_messages_sent_before_it_was_started()
    {
        var reverseCalled = 0;
        using (var mqServer = RabbitMqServerTests.CreateMqServer())
        {
            using (var conn = mqServer.ConnectionFactory.CreateConnection())
            using (var channel = conn.CreateModel())
            {
                channel.PurgeQueue<Reverse>();
            }

            mqServer.RegisterHandler<Reverse>(x =>
            {
                Interlocked.Increment(ref reverseCalled);
                return x.GetBody().Value.Reverse();
            });
            using (var mqClient = mqServer.CreateMessageQueueClient())
            {
                RabbitMqServerTests.Publish_4_messages(mqClient);
                mqServer.Start();
                ExecUtils.RetryOnException(() =>
                {
                    Assert.That(mqServer.GetStats().TotalMessagesProcessed, Is.EqualTo(4));
                    Assert.That(reverseCalled, Is.EqualTo(4));
                    Thread.Sleep(100);
                }, TimeSpan.FromSeconds(5));
            }
        }
    }
}
--------------------------------------------------------------------------------
ID: 1051
ServiceStack Attribute Information ID: 73
Class Name: RedisGeoNativeClientTestsAsync
Class Example:
[TestFixture, Category("Async")]
[Ignore("CI requires redis-server v3.2.0")]
public class RedisGeoNativeClientTestsAsync
{
    private readonly IRedisNativeClientAsync redis;
    public RedisGeoNativeClientTestsAsync()
    {
        redis = new RedisNativeClient(TestConfig.GeoHost);
    }

    [OneTimeTearDown]
    public async Task OneTimeTearDown()
    {
        await redis.DisposeAsync();
    }

    [Test]
    public async Task Can_GeoAdd_and_GeoPos()
    {
        await redis.FlushDbAsync();
        var count = await redis.GeoAddAsync("Sicily", 13.361389, 38.115556, "Palermo");
        Assert.That(count, Is.EqualTo(1));
        var results = await redis.GeoPosAsync("Sicily", new[] { "Palermo" });
        Assert.That(results.Count, Is.EqualTo(1));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
    }

    [Test]
    public async Task GeoPos_on_NonExistingMember_returns_no_results()
    {
        await redis.FlushDbAsync();
        var count = await redis.GeoAddAsync("Sicily", 13.361389, 38.115556, "Palermo");
        var results = await redis.GeoPosAsync("Sicily", new[] { "NonExistingMember" });
        Assert.That(results.Count, Is.EqualTo(0));
        results = await redis.GeoPosAsync("Sicily", new[] { "Palermo", "NonExistingMember" });
        Assert.That(results.Count, Is.EqualTo(1));
    }

    [Test]
    public async Task Can_GeoAdd_and_GeoPos_multiple()
    {
        await redis.FlushDbAsync();
        var count = await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        Assert.That(count, Is.EqualTo(2));
        var results = await redis.GeoPosAsync("Sicily", new[] { "Palermo", "Catania" });
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[1].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(37.502669).Within(.1));
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
    }

    [Test]
    public async Task Can_GeoDist()
    {
        await redis.FlushDbAsync();
        await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var distance = await redis.GeoDistAsync("Sicily", "Palermo", "Catania");
        Assert.That(distance, Is.EqualTo(166274.15156960039).Within(.1));
    }

    [Test]
    public async Task GeoDist_on_NonExistingMember_returns_NaN()
    {
        await redis.FlushDbAsync();
        await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var distance = await redis.GeoDistAsync("Sicily", "Palermo", "NonExistingMember");
        Assert.That(distance, Is.EqualTo(double.NaN));
    }

    [Test]
    public async Task Can_GeoHash()
    {
        await redis.FlushDbAsync();
        await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var hashes = await redis.GeoHashAsync("Sicily", new[] { "Palermo", "Catania" });
        Assert.That(hashes[0], Is.EqualTo("sqc8b49rny0"));
        Assert.That(hashes[1], Is.EqualTo("sqdtr74hyu0"));
        hashes = await redis.GeoHashAsync("Sicily", new[] { "Palermo", "NonExistingMember", "Catania" });
        Assert.That(hashes[0], Is.EqualTo("sqc8b49rny0"));
        Assert.That(hashes[1], Is.Null);
        Assert.That(hashes[2], Is.EqualTo("sqdtr74hyu0"));
    }

    [Test]
    public async Task Can_GeoRadius_default()
    {
        await redis.FlushDbAsync();
        await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.GeoRadiusAsync("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.Null);
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
        Assert.That(results[1].Unit, Is.Null);
    }

    [Test]
    public async Task Can_GeoRadiusByMember_default()
    {
        await redis.FlushDbAsync();
        await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.583333, 37.316667, "Agrigento"), new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.GeoRadiusByMemberAsync("Sicily", "Agrigento", 100, RedisGeoUnit.Kilometers);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Agrigento"));
        Assert.That(results[0].Unit, Is.Null);
        Assert.That(results[1].Member, Is.EqualTo("Palermo"));
        Assert.That(results[1].Unit, Is.Null);
    }

    [Test]
    public async Task Can_GeoRadius_WithCoord()
    {
        await redis.FlushDbAsync();
        await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.GeoRadiusAsync("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, withCoords: true);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
        Assert.That(results[1].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[1].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(37.502669).Within(.1));
    }

    [Test]
    public async Task Can_GeoRadius_WithDist()
    {
        await redis.FlushDbAsync();
        await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.GeoRadiusAsync("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, withDist: true);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Distance, Is.EqualTo(190.4424).Within(.1));
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
        Assert.That(results[1].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[1].Distance, Is.EqualTo(56.4413).Within(.1));
    }

    [Test]
    public async Task Can_GeoRadius_WithCoord_WithDist_WithHash()
    {
        await redis.FlushDbAsync();
        await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.GeoRadiusAsync("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, withCoords: true, withDist: true, withHash: true);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(190.4424).Within(.1));
        Assert.That(results[0].Hash, Is.EqualTo(3479099956230698));
        Assert.That(results[1].Member, Is.EqualTo("Catania"));
        Assert.That(results[1].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[1].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(37.502669).Within(.1));
        Assert.That(results[1].Distance, Is.EqualTo(56.4413).Within(.1));
        Assert.That(results[1].Hash, Is.EqualTo(3479447370796909));
    }

    [Test]
    public async Task Can_GeoRadiusByMember_WithCoord_WithDist_WithHash()
    {
        await redis.FlushDbAsync();
        await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.583333, 37.316667, "Agrigento"), new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.GeoRadiusByMemberAsync("Sicily", "Agrigento", 100, RedisGeoUnit.Kilometers, withCoords: true, withDist: true, withHash: true);
        Assert.That(results.Count, Is.EqualTo(2));
        Assert.That(results[0].Member, Is.EqualTo("Agrigento"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.583333).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(37.316667).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(0));
        Assert.That(results[0].Hash, Is.EqualTo(3479030013248308));
        Assert.That(results[1].Member, Is.EqualTo("Palermo"));
        Assert.That(results[1].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[1].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[1].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[1].Distance, Is.EqualTo(90.9778).Within(.1));
        Assert.That(results[1].Hash, Is.EqualTo(3479099956230698));
    }

    [Test]
    public async Task Can_GeoRadius_WithCoord_WithDist_WithHash_Count_and_Asc()
    {
        await redis.FlushDbAsync();
        await redis.GeoAddAsync("Sicily", new[] { new RedisGeo(13.361389, 38.115556, "Palermo"), new RedisGeo(15.087269, 37.502669, "Catania") });
        var results = await redis.GeoRadiusAsync("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, withCoords: true, withDist: true, withHash: true, count: 1, asc: false);
        Assert.That(results.Count, Is.EqualTo(1));
        Assert.That(results[0].Member, Is.EqualTo("Palermo"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(13.361389).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(38.115556).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(190.4424).Within(.1));
        Assert.That(results[0].Hash, Is.EqualTo(3479099956230698));
        results = await redis.GeoRadiusAsync("Sicily", 15, 37, 200, RedisGeoUnit.Kilometers, withCoords: true, withDist: true, withHash: true, count: 1, asc: true);
        Assert.That(results.Count, Is.EqualTo(1));
        Assert.That(results[0].Member, Is.EqualTo("Catania"));
        Assert.That(results[0].Unit, Is.EqualTo(RedisGeoUnit.Kilometers));
        Assert.That(results[0].Longitude, Is.EqualTo(15.087269).Within(.1));
        Assert.That(results[0].Latitude, Is.EqualTo(37.502669).Within(.1));
        Assert.That(results[0].Distance, Is.EqualTo(56.4413).Within(.1));
        Assert.That(results[0].Hash, Is.EqualTo(3479447370796909));
    }
}
--------------------------------------------------------------------------------
ID: 1052
ServiceStack Attribute Information ID: 74
Class Name: AppUser
Class Example:
[Alias("AspNetUsers")] // Tell OrmLite which table this EF Data Model maps to
public class AppUser : IdentityUser<int>
{
    public string? FirstName { get; set; }
    public string? LastName { get; set; }
    public string? DisplayName { get; set; }
    public string? ProfileUrl { get; set; }

    [Input(Type = "file"), UploadTo("avatars")]
    public string? Avatar { get; set; } //overrides ProfileUrl
    public string? Handle { get; set; }
    public int? RefId { get; set; }
    public string RefIdStr { get; set; } = Guid.NewGuid().ToString();
    public bool IsArchived { get; set; }
    public DateTime? ArchivedDate { get; set; }
    public string? LastLoginIp { get; set; }
    public DateTime? LastLoginDate { get; set; }
    public DateTime CreatedDate { get; set; } = DateTime.UtcNow;
    public DateTime ModifiedDate { get; set; } = DateTime.UtcNow;
} ` ` `


--------------------------------------------------------------------------------
ID: 1053
ServiceStack Attribute Information ID: 74
Class Name: ApplicationUser
Class Example:
// Add profile data for application users by adding properties to the ApplicationUser class
[Icon(Svg = "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'><path fill='currentColor' d='M10.277 2.084a.5.5 0 0 0-.554 0a15.05 15.05 0 0 1-6.294 2.421A.5.5 0 0 0 3 5v4.5c0 3.891 2.307 6.73 6.82 8.467a.5.5 0 0 0 .36 0C14.693 16.23 17 13.39 17 9.5V5a.5.5 0 0 0-.43-.495a15.05 15.05 0 0 1-6.293-2.421ZM10 9.5a2 2 0 1 1 0-4a2 2 0 0 1 0 4Zm0 5c-2.5 0-3.5-1.25-3.5-2.5A1.5 1.5 0 0 1 8 10.5h4a1.5 1.5 0 0 1 1.5 1.5c0 1.245-1 2.5-3.5 2.5Z'/></svg>")]
[Alias("AspNetUsers")]
public class ApplicationUser : IdentityUser, IRequireRefreshToken
{
    public string? FirstName { get; set; }
    public string? LastName { get; set; }
    public string? DisplayName { get; set; }
    public string? ProfileUrl { get; set; }
    public string? RefreshToken { get; set; }
    public DateTime? RefreshTokenExpiry { get; set; }
}
--------------------------------------------------------------------------------
ID: 1054
ServiceStack Attribute Information ID: 74
Class Name: ACSProfile
Class Example:
[References(typeof(acsprofileResponse))]
[Route("/api/acsprofiles", "POST,PUT,PATCH,DELETE")]
[Route("/api/acsprofiles/{profileId}")]
[Alias("ACSProfiles")]
public class ACSProfile : IReturn<acsprofileResponse>, IHasVersion, IHasSessionId
{
    [PrimaryKey]
    public string profileId { get; set; }

    [StringLength(20)]
    public string shortName { get; set; }

    [StringLength(60)]
    public string longName { get; set; }

    [StringLength(20)]
    [Index(Unique = false)]
    public string regionId { get; set; }

    [StringLength(20)]
    [Index(Unique = false)]
    public string groupId { get; set; }

    [StringLength(12)]
    [Index(Unique = false)]
    public string deviceID { get; set; }
    public DateTime lastUpdated { get; set; }
    public bool enabled { get; set; }
    public int Version { get; set; }
    public string SessionId { get; set; }
}
--------------------------------------------------------------------------------
ID: 1055
ServiceStack Attribute Information ID: 74
Class Name: HelloAnnotations
Class Example:
[Alias("AliasAnnotations")]
[Schema("Annotations.dbo")]
[NamedConnection("AnnotationsDb")]
[Tag("web"), Tag("mobile"), Tag("desktop")]
public class HelloAnnotations : IReturn<HelloAnnotations>
{
    [Display(AutoGenerateField = false, AutoGenerateFilter = true, ShortName = "Id", Order = 1)]
    [AutoIncrement]
    public int Id { get; set; }

    [Display(AutoGenerateField = false, AutoGenerateFilter = true, ShortName = "ItemNumber", Order = 1)]
    public string ItemNumber { get; set; }

    [Display(AutoGenerateField = false, AutoGenerateFilter = true, ShortName = "WarehouseCode", Order = 2)]
    public string WarehouseCode { get; set; }

    [Display(AutoGenerateField = true, AutoGenerateFilter = true, ShortName = "Qty", Order = 3)]
    public int? QtyOnHand { get; set; }

    [Display(AutoGenerateField = true, AutoGenerateFilter = true, ShortName = "Lot Serial", Order = 4)]
    public string LotSerial { get; set; }

    [Display(AutoGenerateField = false, AutoGenerateFilter = true, ShortName = "LocationCode", Order = 5)]
    public string LocationCode { get; set; }

    [Display(AutoGenerateField = false, AutoGenerateFilter = true, ShortName = "Device ID", Order = 6)]
    public string DeviceId { get; set; }

    [Display(AutoGenerateField = true, AutoGenerateFilter = true, ShortName = "Counted", Order = 7)]
    [DataType(DataType.DateTime)]
    [DisplayFormat(DataFormatString = "MM/dd/yyyy HH:mm:ss")]
    public DateTime CountDate { get; set; }

    [Display(AutoGenerateField = true, AutoGenerateFilter = true, ShortName = "Counted By", Order = 8)]
    public string DeviceUser { get; set; }

    [Display(AutoGenerateField = false, AutoGenerateFilter = false, ShortName = "BatchKey", Order = 9)]
    public int? BatchKey { get; set; }

    [Display(AutoGenerateField = true, AutoGenerateFilter = false, ShortName = "Item", Order = -1)]
    [Association(name: "Item.ItemID", thisKey: "ItemKey", otherKey: "ItemKey")]
    public int ItemKey { get; set; }

    [Display(AutoGenerateField = true, AutoGenerateFilter = true, ShortName = "Expiration Date", Order = 4)]
    [DataType(DataType.DateTime)]
    [DisplayFormat(DataFormatString = "MM/yyyy")]
    public DateTime? ExpirationDate { get; set; }

    [Display(AutoGenerateField = true, AutoGenerateFilter = true, ShortName = "Updated", Order = 14)]
    [DataType(DataType.DateTime)]
    [DisplayFormat(DataFormatString = "MM/dd/yyyy HH:mm:ss")]
    public DateTime? UpdateDate { get; set; }

    [Display(AutoGenerateField = true, AutoGenerateFilter = true, ShortName = "Updated By", Order = 15)]
    public string UpdatedBy { get; set; }
}
--------------------------------------------------------------------------------
ID: 1056
ServiceStack Attribute Information ID: 74
Class Name: Shipper
Class Example:
[Alias("Shippers")]
public class Shipper : IHasId<int>
{
    [AutoIncrement]
    [Alias("ShipperID")]
    public int Id { get; set; }

    [Required]
    [Index(Unique = true)]
    [StringLength(40)]
    public string CompanyName { get; set; }

    [StringLength(24)]
    public string Phone { get; set; }

    [References(typeof(ShipperType))]
    public int ShipperTypeId { get; set; }
}
--------------------------------------------------------------------------------
ID: 1057
ServiceStack Attribute Information ID: 74
Class Name: ShipperType
Class Example:
[Alias("ShipperTypes")]
public class ShipperType : IHasId<int>
{
    [AutoIncrement]
    [Alias("ShipperTypeID")]
    public int Id { get; set; }

    [Required]
    [Index(Unique = true)]
    [StringLength(40)]
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 1058
ServiceStack Attribute Information ID: 74
Class Name: BookingV1
Class Example:
[Alias("Booking")]
public class BookingV1
{
    public int Id { get; set; }
    public string? Name { get; set; }
    public string? ToRemove { get; set; }
}
--------------------------------------------------------------------------------
ID: 1059
ServiceStack Attribute Information ID: 74
Class Name: BookingV2
Class Example:
[Alias("Booking")]
public class BookingV2
{
    public int Id { get; set; }
    public string? Name { get; set; }
    public string? ToCreate { get; set; }
}
--------------------------------------------------------------------------------
ID: 1060
ServiceStack Attribute Information ID: 74
Class Name: Editable
Class Example:
[Alias("Editables")]
[Schema("Schema")]
public partial class Editable : IHasId<int>
{
    public string Content { get; set; }

    [Alias("EditableID")]
    [AutoIncrement]
    [PrimaryKey]
    public int Id { get; set; }

    [Required]
    public int Index { get; set; }

    [Alias("ReportPageID")]
    [Required]
    public int PageId { get; set; }
    public string Styles { get; set; }

    [Alias("Type")]
    [Required]
    public int TypeId { get; set; }
}
--------------------------------------------------------------------------------
ID: 1061
ServiceStack Attribute Information ID: 74
Class Name: EditableRevision
Class Example:
[Alias("EditableRevisions")]
[Schema("Schema")]
public partial class EditableRevision : IHasId<int>
{
    public string Content { get; set; }

    [Required]
    public DateTime Date { get; set; }

    [Alias("EditableID")]
    [Required]
    public int EditableId { get; set; }

    [Required]
    public int EmployeeId { get; set; }

    [Alias("EditableRevisionsID")]
    [AutoIncrement]
    [PrimaryKey]
    public int Id { get; set; }
    public string Reason { get; set; }
    public string Styles { get; set; }
}
--------------------------------------------------------------------------------
ID: 1062
ServiceStack Attribute Information ID: 74
Class Name: LogEntry
Class Example:
[Alias("LogEntries")]
[Schema("Schema")]
public class LogEntry : IHasId<int>
{
    [Required]
    public DateTime Date { get; set; }

    [Alias("LogEntriesID")]
    [AutoIncrement]
    [PrimaryKey]
    public int Id { get; set; }

    [Required]
    public int KlasId { get; set; }

    [Required]
    public int PageTrackerId { get; set; }

    [Alias("ReportID")]
    [Required]
    public int ReportId { get; set; }

    [Alias("ReportPageID")]
    [Required]
    public int PageId { get; set; }
    public string RequestUrl { get; set; }

    [Alias("Type")]
    [Required]
    public int TypeId { get; set; }
}
--------------------------------------------------------------------------------
ID: 1063
ServiceStack Attribute Information ID: 74
Class Name: Page
Class Example:
[Alias("ReportPages")]
[Schema("Schema")]
public partial class Page : IHasId<int>
{
    [Required]
    public int AccessLevel { get; set; }

    [Required]
    public int AssignedEmployeeId { get; set; }

    [Required]
    public bool Cover { get; set; }

    [Required]
    public bool Deleted { get; set; }

    [Required]
    public bool Disabled { get; set; }

    [Alias("ReportPageID")]
    [AutoIncrement]
    [PrimaryKey]
    public int Id { get; set; }

    [Required]
    public int Index { get; set; }
    public string Name { get; set; }

    [Alias("ReportSectionID")]
    [Required]
    public int SectionId { get; set; }
    public string Template { get; set; }
}
--------------------------------------------------------------------------------
ID: 1064
ServiceStack Attribute Information ID: 74
Class Name: Report
Class Example:
[Alias("Reports")]
[Schema("Schema")]
public partial class Report : IHasId<int>
{
    [Required]
    public int DefaultAccessLevel { get; set; }

    [Required]
    public bool Deleted { get; set; }
    public string Description { get; set; }

    [Alias("ReportID")]
    [AutoIncrement]
    [PrimaryKey]
    public int Id { get; set; }
    public string Name { get; set; }
}
--------------------------------------------------------------------------------
ID: 1065
ServiceStack Attribute Information ID: 74
Class Name: Section
Class Example:
[Alias("ReportSections")]
[Schema("Schema")]
public class Section : IHasId<int>
{
    [Alias("ReportSectionID")]
    [AutoIncrement]
    [PrimaryKey]
    public int Id { get; set; }
    public string Name { get; set; }

    [Alias("ReportID")]
    [Required]
    public int ReportId { get; set; }
}
--------------------------------------------------------------------------------
ID: 1066
ServiceStack Attribute Information ID: 74
Class Name: AliasedTable
Class Example:
[Alias("aliased_table")]
public class AliasedTable
{
    [Alias("hash_key")]
    public string HashKey { get; set; }

    [Alias("range_key")]
    public string RangeKey { get; set; }

    [Alias("the_field")]
    public string TheField { get; set; }
}
--------------------------------------------------------------------------------
ID: 1067
ServiceStack Attribute Information ID: 74
Class Name: ImageBlobDto
Class Example:
[Alias("ImageBlobsDto")]
public class ImageBlobDto
{
    [AutoIncrement]
    public int Id { get; set; }
    public virtual Byte[] Image1 { get; set; }
    public virtual Byte[] Image2 { get; set; }
    public virtual Byte[] Image3 { get; set; }
    public virtual object[] Complex { get; set; }
}
--------------------------------------------------------------------------------
ID: 1068
ServiceStack Attribute Information ID: 74
Class Name: User
Class Example:
[Alias("Users")]
[Schema("Security")]
public class User
{
    [AutoIncrement]
    public int Id { get; set; }

    [Index]
    public string Name { get; set; }
    public DateTime CreatedDate { get; set; }
}
--------------------------------------------------------------------------------
ID: 1069
ServiceStack Attribute Information ID: 74
Class Name: COMMENT_first
Class Example:
[Alias("COMMENT")]
private class COMMENT_first
{
    public string COMMENT { get; set; }

    [AutoIncrement, PrimaryKey]
    public int Id { get; set; }
}
--------------------------------------------------------------------------------
ID: 1070
ServiceStack Attribute Information ID: 74
Class Name: COMMENT_other
Class Example:
[Alias("COMMENT")]
private class COMMENT_other
{
    [AutoIncrement, PrimaryKey]
    public int Id { get; set; }
    public string COMMENT { get; set; }
}
--------------------------------------------------------------------------------
ID: 1071
ServiceStack Attribute Information ID: 74
Class Name: Test
Class Example:
[Alias("TestWithNullable")]
public class Test
{
    public int Id { get; set; }
    public decimal Decimal { get; set; }
}
--------------------------------------------------------------------------------
ID: 1072
ServiceStack Attribute Information ID: 74
Class Name: Analyze
Class Example:
/// <summary>
/// Provided by RyogoNA in issue #38 https://github.com/ServiceStack/ServiceStack.OrmLite/issues/38#issuecomment-4625178
/// </summary>
[Alias("Analyzes")]
public class Analyze : IHasId<int>
{
    [AutoIncrement]
    [PrimaryKey]
    public int Id { get; set; }

    [Alias("AnalyzeDate")]
    public DateTime Date { get; set; }
    public string Url { get; set; }
}
--------------------------------------------------------------------------------
ID: 1073
ServiceStack Attribute Information ID: 74
Class Name: MismatchTable
Class Example:
[Alias("OriginalTable")]
public class MismatchTable
{
    public int Id { get; set; }
    public DateTime SaleDate { get; set; }
    public DateTime SaleTime { get; set; }
    public int NumberOfItems { get; set; }
    public decimal Amount { get; set; }
}
--------------------------------------------------------------------------------
ID: 1074
ServiceStack Attribute Information ID: 74
Class Name: MakeModel
Class Example:
[Alias("makemodel")]
public class MakeModel
{
    [Alias("id"), PrimaryKey]
    public int Id { get; set; }

    [Alias("manufacturer")]
    public string Manufacturer { get; set; }

    [Alias("model")]
    public string Model { get; set; }

    [References(typeof(PerformanceCategory))]
    [Alias("performance_category_id")]
    public int PerformanceCategoryId { get; set; }
    public ulong RowVersion { get; set; }
}
--------------------------------------------------------------------------------
ID: 1075
ServiceStack Attribute Information ID: 74
Class Name: PerformanceCategory
Class Example:
[Alias("performance_category")]
public class PerformanceCategory
{
    [Alias("id"), PrimaryKey]
    public int Id { get; set; }

    [Alias("category")]
    public string Category { get; set; }

    [Alias("description")]
    public string Description { get; set; }
}
--------------------------------------------------------------------------------
ID: 1076
ServiceStack Attribute Information ID: 74
Class Name: TableWithAliases
Class Example:
[Alias("t1")]
class TableWithAliases
{
    public int Id { get; set; }

    [Alias("n1")]
    public string Name { get; set; }

    [Alias("n2")]
    public string Name1 { get; set; }

    [Alias("n3")]
    public string Name2 { get; set; }
}
--------------------------------------------------------------------------------
ID: 1077
ServiceStack Attribute Information ID: 74
Class Name: ProflieExtended
Class Example:
[Alias("profile_extended")]
public class ProflieExtended
{
    public int Id { get; set; }
}
--------------------------------------------------------------------------------
ID: 1078
ServiceStack Attribute Information ID: 74
Class Name: UV_Child
Class Example:
[Alias("UV_Child")]
public partial class UV_Child
{
    public int? KindergartenId { get; set; }
    public string KindergartenName { get; set; }
    public int? ClassId { get; set; }
    public string ClassName { get; set; }

    [Required]
    public int ChildId { get; set; }

    [Required]
    public string ChildName { get; set; }
    public int? ParentId { get; set; }
    public string DisplayName { get; set; }
    public string UserName { get; set; }
    public string PhoneNumber { get; set; }
    public string ImageName { get; set; }
}
--------------------------------------------------------------------------------
ID: 1079
ServiceStack Attribute Information ID: 74
Class Name: Employee
Class Example:
[Alias("Employees")]
public class Employee : IHasIntId, IEquatable<Employee>
{
    [AutoIncrement]
    [Alias("EmployeeID")]
    public int Id { get; set; }

    [Index]
    [Required]
    [StringLength(20)]
    public string LastName { get; set; }

    [Required]
    [StringLength(10)]
    public string FirstName { get; set; }

    [StringLength(30)]
    public string Title { get; set; }

    [StringLength(25)]
    public string TitleOfCourtesy { get; set; }
    public DateTime? BirthDate { get; set; }
    public DateTime? HireDate { get; set; }

    [StringLength(60)]
    public string Address { get; set; }

    [StringLength(15)]
    public string City { get; set; }

    [StringLength(15)]
    public string Region { get; set; }

    [Index]
    [StringLength(10)]
    public string PostalCode { get; set; }

    [StringLength(15)]
    public string Country { get; set; }

    [StringLength(24)]
    public string HomePhone { get; set; }

    [StringLength(4)]
    public string Extension { get; set; }
    public byte[] Photo { get; set; }

    [StringLength(8000)]
    public string Notes { get; set; }

    [References(typeof(Employee))]
    public int? ReportsTo { get; set; }

    [StringLength(255)]
    public string PhotoPath { get; set; }

    public bool Equals(Employee other)
    {
        if (ReferenceEquals(null, other))
            return false;
        if (ReferenceEquals(this, other))
            return true;
        return Id == other.Id && string.Equals(LastName, other.LastName) && string.Equals(FirstName, other.FirstName) && string.Equals(Title, other.Title) && string.Equals(TitleOfCourtesy, other.TitleOfCourtesy) && BirthDate.Equals(other.BirthDate) && HireDate.Equals(other.HireDate) && string.Equals(Address, other.Address) && string.Equals(City, other.City) && string.Equals(Region, other.Region) && string.Equals(PostalCode, other.PostalCode) && string.Equals(Country, other.Country) && string.Equals(HomePhone, other.HomePhone) && string.Equals(Extension, other.Extension) && Equals(Photo, other.Photo) && string.Equals(Notes, other.Notes) && ReportsTo == other.ReportsTo && string.Equals(PhotoPath, other.PhotoPath);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((Employee)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = Id;
            hashCode = (hashCode * 397) ^ (LastName != null ? LastName.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (FirstName != null ? FirstName.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Title != null ? Title.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (TitleOfCourtesy != null ? TitleOfCourtesy.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ BirthDate.GetHashCode();
            hashCode = (hashCode * 397) ^ HireDate.GetHashCode();
            hashCode = (hashCode * 397) ^ (Address != null ? Address.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (City != null ? City.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Region != null ? Region.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (PostalCode != null ? PostalCode.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Country != null ? Country.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (HomePhone != null ? HomePhone.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Extension != null ? Extension.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Photo != null ? Photo.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Notes != null ? Notes.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ ReportsTo.GetHashCode();
            hashCode = (hashCode * 397) ^ (PhotoPath != null ? PhotoPath.GetHashCode() : 0);
            return hashCode;
        }
    }
}
--------------------------------------------------------------------------------
ID: 1080
ServiceStack Attribute Information ID: 74
Class Name: Category
Class Example:
[Alias("Categories")]
public class Category : IHasIntId, IEquatable<Category>
{
    [Alias("CategoryID")]
    public int Id { get; set; }

    [Index]
    [Required]
    [StringLength(15)]
    public string CategoryName { get; set; }

    [StringLength(100)]
    public string Description { get; set; }
    public byte[] Picture { get; set; }

    public bool Equals(Category other)
    {
        if (ReferenceEquals(null, other))
            return false;
        if (ReferenceEquals(this, other))
            return true;
        return Id == other.Id && string.Equals(CategoryName, other.CategoryName) && string.Equals(Description, other.Description) && Equals(Picture, other.Picture);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((Category)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = Id;
            hashCode = (hashCode * 397) ^ (CategoryName != null ? CategoryName.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Description != null ? Description.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Picture != null ? Picture.GetHashCode() : 0);
            return hashCode;
        }
    }
}
--------------------------------------------------------------------------------
ID: 1081
ServiceStack Attribute Information ID: 74
Class Name: Customer
Class Example:
[Alias("Customers")]
public class Customer : IHasStringId, IEquatable<Customer>
{
    [Required]
    [StringLength(5)]
    [Alias("CustomerID")]
    public string Id { get; set; }

    [Index]
    [Required]
    [StringLength(40)]
    public string CompanyName { get; set; }

    [StringLength(30)]
    public string ContactName { get; set; }

    [StringLength(30)]
    public string ContactTitle { get; set; }

    [StringLength(60)]
    public string Address { get; set; }

    [Index]
    [StringLength(15)]
    public string City { get; set; }

    [Index]
    [StringLength(15)]
    public string Region { get; set; }

    [Index]
    [StringLength(10)]
    public string PostalCode { get; set; }

    [StringLength(15)]
    public string Country { get; set; }

    [StringLength(24)]
    public string Phone { get; set; }

    [StringLength(24)]
    public string Fax { get; set; }
    public byte[] Picture { get; set; }

    public bool Equals(Customer other)
    {
        if (ReferenceEquals(null, other))
            return false;
        if (ReferenceEquals(this, other))
            return true;
        return string.Equals(Id, other.Id) && string.Equals(CompanyName, other.CompanyName) && string.Equals(ContactName, other.ContactName) && string.Equals(ContactTitle, other.ContactTitle) && string.Equals(Address, other.Address) && string.Equals(City, other.City) && string.Equals(Region, other.Region) && string.Equals(PostalCode, other.PostalCode) && string.Equals(Country, other.Country) && string.Equals(Phone, other.Phone) && string.Equals(Fax, other.Fax) && Equals(Picture, other.Picture);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((Customer)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = (Id != null ? Id.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (CompanyName != null ? CompanyName.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (ContactName != null ? ContactName.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (ContactTitle != null ? ContactTitle.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Address != null ? Address.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (City != null ? City.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Region != null ? Region.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (PostalCode != null ? PostalCode.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Country != null ? Country.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Phone != null ? Phone.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Fax != null ? Fax.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Picture != null ? Picture.GetHashCode() : 0);
            return hashCode;
        }
    }
}
--------------------------------------------------------------------------------
ID: 1082
ServiceStack Attribute Information ID: 74
Class Name: Supplier
Class Example:
[Alias("Suppliers")]
public class Supplier : IHasIntId, IEquatable<Supplier>
{
    [AutoIncrement]
    [Alias("SupplierID")]
    public int Id { get; set; }

    [Index]
    [Required]
    [StringLength(40)]
    public string CompanyName { get; set; }

    [StringLength(30)]
    public string ContactName { get; set; }

    [StringLength(30)]
    public string ContactTitle { get; set; }

    [StringLength(60)]
    public string Address { get; set; }

    [StringLength(15)]
    public string City { get; set; }

    [StringLength(15)]
    public string Region { get; set; }

    [Index]
    [StringLength(10)]
    public string PostalCode { get; set; }

    [StringLength(15)]
    public string Country { get; set; }

    [StringLength(24)]
    public string Phone { get; set; }

    [StringLength(24)]
    public string Fax { get; set; }
    public string HomePage { get; set; }

    public bool Equals(Supplier other)
    {
        if (ReferenceEquals(null, other))
            return false;
        if (ReferenceEquals(this, other))
            return true;
        return Id == other.Id && string.Equals(CompanyName, other.CompanyName) && string.Equals(ContactName, other.ContactName) && string.Equals(ContactTitle, other.ContactTitle) && string.Equals(Address, other.Address) && string.Equals(City, other.City) && string.Equals(Region, other.Region) && string.Equals(PostalCode, other.PostalCode) && string.Equals(Country, other.Country) && string.Equals(Phone, other.Phone) && string.Equals(Fax, other.Fax) && string.Equals(HomePage, other.HomePage);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((Supplier)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = Id;
            hashCode = (hashCode * 397) ^ (CompanyName != null ? CompanyName.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (ContactName != null ? ContactName.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (ContactTitle != null ? ContactTitle.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Address != null ? Address.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (City != null ? City.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Region != null ? Region.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (PostalCode != null ? PostalCode.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Country != null ? Country.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Phone != null ? Phone.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (Fax != null ? Fax.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (HomePage != null ? HomePage.GetHashCode() : 0);
            return hashCode;
        }
    }
}
--------------------------------------------------------------------------------
ID: 1083
ServiceStack Attribute Information ID: 74
Class Name: Order
Class Example:
[Alias("Orders")]
public class Order : IHasIntId, IEquatable<Order>
{
    //[AutoIncrement]
    [Alias("OrderID")]
    public int Id { get; set; }

    [Index]
    [References(typeof(Customer))]
    [Alias("CustomerID")]
    [StringLength(5)]
    public string CustomerId { get; set; }

    [Index]
    [References(typeof(Employee))]
    [Alias("EmployeeID")]
    public int EmployeeId { get; set; }

    [Index]
    public DateTime? OrderDate { get; set; }
    public DateTime? RequiredDate { get; set; }

    [Index]
    public DateTime? ShippedDate { get; set; }

    [Index]
    [References(typeof(Shipper))]
    public int? ShipVia { get; set; }
    public decimal Freight { get; set; }

    [StringLength(40)]
    public string ShipName { get; set; }

    [StringLength(60)]
    public string ShipAddress { get; set; }

    [StringLength(15)]
    public string ShipCity { get; set; }

    [StringLength(15)]
    public string ShipRegion { get; set; }

    [Index]
    [StringLength(10)]
    public string ShipPostalCode { get; set; }

    [StringLength(15)]
    public string ShipCountry { get; set; }

    public bool Equals(Order other)
    {
        if (ReferenceEquals(null, other))
            return false;
        if (ReferenceEquals(this, other))
            return true;
        return Id == other.Id && string.Equals(CustomerId, other.CustomerId) && EmployeeId == other.EmployeeId && OrderDate.Equals(other.OrderDate) && RequiredDate.Equals(other.RequiredDate) && ShippedDate.Equals(other.ShippedDate) && ShipVia == other.ShipVia && Freight == other.Freight && string.Equals(ShipName, other.ShipName) && string.Equals(ShipAddress, other.ShipAddress) && string.Equals(ShipCity, other.ShipCity) && string.Equals(ShipRegion, other.ShipRegion) && string.Equals(ShipPostalCode, other.ShipPostalCode) && string.Equals(ShipCountry, other.ShipCountry);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((Order)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = Id;
            hashCode = (hashCode * 397) ^ (CustomerId != null ? CustomerId.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ EmployeeId;
            hashCode = (hashCode * 397) ^ OrderDate.GetHashCode();
            hashCode = (hashCode * 397) ^ RequiredDate.GetHashCode();
            hashCode = (hashCode * 397) ^ ShippedDate.GetHashCode();
            hashCode = (hashCode * 397) ^ ShipVia.GetHashCode();
            hashCode = (hashCode * 397) ^ Freight.GetHashCode();
            hashCode = (hashCode * 397) ^ (ShipName != null ? ShipName.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (ShipAddress != null ? ShipAddress.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (ShipCity != null ? ShipCity.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (ShipRegion != null ? ShipRegion.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (ShipPostalCode != null ? ShipPostalCode.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (ShipCountry != null ? ShipCountry.GetHashCode() : 0);
            return hashCode;
        }
    }
}
--------------------------------------------------------------------------------
ID: 1084
ServiceStack Attribute Information ID: 74
Class Name: Product
Class Example:
[Alias("Products")]
public class Product : IHasIntId, IEquatable<Product>
{
    [AutoIncrement]
    [Alias("ProductID")]
    public int Id { get; set; }

    [Index]
    [Required]
    [StringLength(40)]
    public string ProductName { get; set; }

    [Index]
    [Alias("SupplierID")]
    [References(typeof(Supplier))]
    public int SupplierId { get; set; }

    [Index]
    [Alias("CategoryID")]
    [References(typeof(Category))]
    public int CategoryId { get; set; }

    [StringLength(20)]
    public string QuantityPerUnit { get; set; }

    [Range(0, double.MaxValue)]
    public decimal UnitPrice { get; set; }

    [Range(0, double.MaxValue)]
    public short UnitsInStock { get; set; }

    [Range(0, double.MaxValue)]
    public short UnitsOnOrder { get; set; }

    [Range(0, double.MaxValue)]
    public short ReorderLevel { get; set; }
    public bool Discontinued { get; set; }

    public bool Equals(Product other)
    {
        if (ReferenceEquals(null, other))
            return false;
        if (ReferenceEquals(this, other))
            return true;
        return Id == other.Id && string.Equals(ProductName, other.ProductName) && SupplierId == other.SupplierId && CategoryId == other.CategoryId && string.Equals(QuantityPerUnit, other.QuantityPerUnit) && UnitPrice == other.UnitPrice && UnitsInStock == other.UnitsInStock && UnitsOnOrder == other.UnitsOnOrder && ReorderLevel == other.ReorderLevel && Discontinued == other.Discontinued;
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((Product)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = Id;
            hashCode = (hashCode * 397) ^ (ProductName != null ? ProductName.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ SupplierId;
            hashCode = (hashCode * 397) ^ CategoryId;
            hashCode = (hashCode * 397) ^ (QuantityPerUnit != null ? QuantityPerUnit.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ UnitPrice.GetHashCode();
            hashCode = (hashCode * 397) ^ UnitsInStock.GetHashCode();
            hashCode = (hashCode * 397) ^ UnitsOnOrder.GetHashCode();
            hashCode = (hashCode * 397) ^ ReorderLevel.GetHashCode();
            hashCode = (hashCode * 397) ^ Discontinued.GetHashCode();
            return hashCode;
        }
    }
}
--------------------------------------------------------------------------------
ID: 1085
ServiceStack Attribute Information ID: 74
Class Name: OrderDetail
Class Example:
[Alias("Order Details")]
public class OrderDetail : IHasStringId, IEquatable<OrderDetail>
{
    public string Id => this.OrderId + "/" + this.ProductId;

    [Index]
    [Alias("OrderID")]
    [References(typeof(Order))]
    public int OrderId { get; set; }

    [Index]
    [Alias("ProductID")]
    [References(typeof(Product))]
    public int ProductId { get; set; }

    [Range(0, double.MaxValue)]
    public decimal UnitPrice { get; set; }

    [Range(0, double.MaxValue)]
    public short Quantity { get; set; }

    [Range(0, double.MaxValue)]
    public double Discount { get; set; }

    public bool Equals(OrderDetail other)
    {
        if (ReferenceEquals(null, other))
            return false;
        if (ReferenceEquals(this, other))
            return true;
        return OrderId == other.OrderId && ProductId == other.ProductId && UnitPrice == other.UnitPrice && Quantity == other.Quantity && Discount.Equals(other.Discount);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((OrderDetail)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = OrderId;
            hashCode = (hashCode * 397) ^ ProductId;
            hashCode = (hashCode * 397) ^ UnitPrice.GetHashCode();
            hashCode = (hashCode * 397) ^ Quantity.GetHashCode();
            hashCode = (hashCode * 397) ^ Discount.GetHashCode();
            return hashCode;
        }
    }
}
--------------------------------------------------------------------------------
ID: 1086
ServiceStack Attribute Information ID: 74
Class Name: CustomerDemographic
Class Example:
[Alias("CustomerDemographics")]
public class CustomerDemographic : IHasStringId, IEquatable<CustomerDemographic>
{
    [StringLength(10)]
    [Alias("CustomerTypeID")]
    public string Id { get; set; }
    public string CustomerDesc { get; set; }

    public bool Equals(CustomerDemographic other)
    {
        if (ReferenceEquals(null, other))
            return false;
        if (ReferenceEquals(this, other))
            return true;
        return string.Equals(Id, other.Id) && string.Equals(CustomerDesc, other.CustomerDesc);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((CustomerDemographic)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            return ((Id != null ? Id.GetHashCode() : 0) * 397) ^ (CustomerDesc != null ? CustomerDesc.GetHashCode() : 0);
        }
    }
}
--------------------------------------------------------------------------------
ID: 1087
ServiceStack Attribute Information ID: 74
Class Name: Territory
Class Example:
[Alias("Territories")]
public class Territory : IHasStringId, IEquatable<Territory>
{
    [StringLength(20)]
    [Alias("TerritoryID")]
    public string Id { get; set; }

    [Required]
    [StringLength(50)]
    public string TerritoryDescription { get; set; }

    [Alias("RegionID")]
    [References(typeof(Region))]
    public int RegionId { get; set; }

    public bool Equals(Territory other)
    {
        if (ReferenceEquals(null, other))
            return false;
        if (ReferenceEquals(this, other))
            return true;
        return string.Equals(Id, other.Id) && string.Equals(TerritoryDescription, other.TerritoryDescription) && RegionId == other.RegionId;
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((Territory)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = (Id != null ? Id.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ (TerritoryDescription != null ? TerritoryDescription.GetHashCode() : 0);
            hashCode = (hashCode * 397) ^ RegionId;
            return hashCode;
        }
    }
}
--------------------------------------------------------------------------------
ID: 1088
ServiceStack Attribute Information ID: 74
Class Name: EmployeeTerritory
Class Example:
[Alias("EmployeeTerritories")]
public class EmployeeTerritory : IHasStringId, IEquatable<EmployeeTerritory>
{
    public string Id
    {
        get
        {
            return this.EmployeeId + "/" + this.TerritoryId;
        }
    }

    [Alias("EmployeeID")]
    public int EmployeeId { get; set; }

    [Required]
    [StringLength(20)]
    [Alias("TerritoryID")]
    public string TerritoryId { get; set; }

    public bool Equals(EmployeeTerritory other)
    {
        if (ReferenceEquals(null, other))
            return false;
        if (ReferenceEquals(this, other))
            return true;
        return EmployeeId == other.EmployeeId && string.Equals(TerritoryId, other.TerritoryId);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
            return false;
        if (ReferenceEquals(this, obj))
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return Equals((EmployeeTerritory)obj);
    }

    public override int GetHashCode()
    {
        unchecked
        {
            return (EmployeeId * 397) ^ (TerritoryId != null ? TerritoryId.GetHashCode() : 0);
        }
    }
}
--------------------------------------------------------------------------------
ID: 1089
ServiceStack Attribute Information ID: 74
Class Name: UsersSqlBuilder
Class Example:
[Alias("UsersSqlBuilder")]
public class UsersSqlBuilder
{
    [AutoIncrement]
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
}
--------------------------------------------------------------------------------
ID: 1090
ServiceStack Attribute Information ID: 74
Class Name: LRAAnalisi
Class Example:
[Alias("LRAANALISI")]
public class LRAAnalisi : IHasId<int>
{
    [PrimaryKey]
    [AutoIncrement]
    [Alias("IDAANALISI")]
    public int Id { get; set; }

    [Alias("ACONTENITOREID")]
    [References(typeof(LRAContenitore))]
    public int ContenitoreId { get; set; }

    [Reference]
    public LRAContenitore Contenitore { get; set; }

    [Alias("DATAORAVALIDAZIONE")]
    public DateTime? DataOraValidazione { get; set; }

    [Alias("DLABORATORIOCANDIDATOID")]
    [References(typeof(LRDLaboratorio))]
    public int? LaboratorioEsecutoreCandidatoId { get; set; }

    [Alias("DATAORAESECUZIONE")]
    public DateTime? DataOraEsecuzione { get; set; }
}
--------------------------------------------------------------------------------
ID: 1091
ServiceStack Attribute Information ID: 74
Class Name: LRAContenitore
Class Example:
[Alias("LRACONTENITORI")]
public class LRAContenitore : DBObject, IHasId<int>
{
    [PrimaryKey]
    [AutoIncrement]
    [Alias("IDACONTENITORE")]
    public int Id { get; set; }

    [Alias("ARICHIESTAID")]
    [References(typeof(LRARichiesta))]
    public int RichiestaId { get; set; }

    [Alias("DPRIORITAID")]
    [References(typeof(LRDPriorita))]
    public int PrioritaId { get; set; }

    [Alias("DATAORAPRELIEVO")]
    public DateTime? DataOraPrelievo { get; set; }

    [Alias("DATAORAPRIMOCHECKIN")]
    public DateTime? DataOraPrimoCheckin { get; set; }
}
--------------------------------------------------------------------------------
ID: 1092
ServiceStack Attribute Information ID: 74
Class Name: LRARichiesta
Class Example:
[Alias("LRARICHIESTE")]
public class LRARichiesta : DBObject, IHasId<int>
{
    [PrimaryKey]
    [AutoIncrement]
    [Alias("IDARICHIESTA")]
    public int Id { get; set; }

    [Alias("APAZIENTEID")]
    [ForeignKey(typeof(LRAPaziente))]
    public int PazienteId { get; set; }

    [Index(Unique = false)]
    [Alias("DATAORAACCETTAZIONE")]
    public DateTime DataOraAccettazione { get; set; }

    [Alias("ETAPAZIENTE")]
    public int? EtaPaziente { get; set; }

    [Alias("UNITADIMISURAETAPAZIENTE")]
    [Default((int)UnitaMisuraEtaPaziente.Anni)]
    public int UnitaDiMisuraEtaPaziente { get; set; }

    [Alias("SETTIMANEGRAVIDANZA")]
    public int? SettimaneGravidanza { get; set; }

    [Alias("DREPARTOID")]
    [References(typeof(LRDReparto))]
    public int? RepartoId { get; set; }

    [Required]
    [Alias("DPRIORITAID")]
    [References(typeof(LRDPriorita))]
    public int PrioritaId { get; set; }

    [Required]
    [References(typeof(LRDLaboratorio))]
    [Alias("DLABORATORIORICHIEDENTEID")]
    public int? LaboratorioRichiedenteId { get; set; }

    [Alias("COMMENTO")]
    [StringLength(StringLengthAttribute.MaxText)]
    public string Commento { get; set; }
}
--------------------------------------------------------------------------------
ID: 1093
ServiceStack Attribute Information ID: 74
Class Name: LRAPaziente
Class Example:
[Alias("LRAPAZIENTI")]
public class LRAPaziente : DBObject, IHasId<int>
{
    [PrimaryKey]
    [AutoIncrement]
    [Alias("IDAPAZIENTE")]
    public int Id { get; set; }

    [Alias("SESSO")]
    [Default((int)SessiPaziente.NonDichiarato)]
    public int Sesso { get; set; }

    [Alias("DATADINASCITA")]
    public DateTime? DataDiNascita { get; set; }
}
--------------------------------------------------------------------------------
ID: 1094
ServiceStack Attribute Information ID: 74
Class Name: LRARisultato
Class Example:
[Alias("LRARISULTATI")]
[CompositeIndex("AANALISIID", "DRISULTATOID", "STATO", Unique = false, Name = "IDXLRARISULTATI")]
public class LRARisultato : DBObject, IHasId<int>
{
    [PrimaryKey]
    [AutoIncrement]
    [Alias("IDARISULTATO")]
    public int Id { get; set; }

    [Index]
    [Alias("AANALISIID")]
    public int AnalisiId { get; set; }

    [Required]
    [Alias("TIPOVALORE")]
    public int TipoValore { get; set; }

    [Alias("OPERATORERELAZIONALE")]
    public string OperatoreRelazionale { get; set; }

    [Alias("VALORENUMERICO")]
    public decimal? ValoreNumerico { get; set; }

    [Index]
    [Alias("DTESTOCODIFICATOID")]
    public int? TestoCodificatoId { get; set; }

    [Alias("TESTOLIBERO")]
    [StringLength(StringLengthAttribute.MaxText)]
    public string TestoLibero { get; set; }

    [Index]
    [Alias("DRISULTATOID")]
    public int RisultatoId { get; set; }

    [Required]
    [Alias("STATO")]
    public int Stato { get; set; }

    [Alias("INVIAREALIS")]
    public int InviareALIS { get; set; }

    [Alias("RISULTATOPRINCIPALE")]
    public int RisultatoPrincipale { get; set; }

    [Alias("TIPOINSERIMENTO")]
    public int TipoInserimento { get; set; }

    [Index]
    [Alias("DOPERATOREINSERIMENTOID")]
    public int? OperatoreInserimentoId { get; set; }

    [Index]
    [Alias("DDEVICEID")]
    public int? DeviceId { get; set; }

    [Index]
    [Alias("DLABORATORIOESECUTOREID")]
    public int? LaboratorioEsecutoreId { get; set; }

    [Alias("CITRATO")]
    public int Citrato { get; set; }

    [Alias("DATAORARIPETIZIONE")]
    public DateTime? DataOraRipetizione { get; set; }

    [Alias("DATAORAESECUZIONE")]
    public DateTime? DataOraEsecuzione { get; set; }

    [Alias("DATAORARICEZIONE")]
    public DateTime DataOraRicezione { get; set; }

    [Alias("IDENTIFICATIVODEVICE")]
    public string IdentificativoDevice { get; set; }

    [Alias("POSIZIONESUDEVICE")]
    public string PosizioneSuDevice { get; set; }

    [Alias("REAGENTE")]
    public string Reagente { get; set; }

    [Alias("LOTTOREAGENTE")]
    public string LottoReagente { get; set; }

    [Alias("DATASCADENZAREAGENTE")]
    public DateTime? DataScadenzaReagente { get; set; }

    [Alias("CURVADICALIBRAZIONE")]
    public string CurvaDiCalibrazione { get; set; }

    [Index]
    [Alias("DDILUIZIONEID")]
    public int? DiluizioneId { get; set; }

    [Index]
    [Alias("DRANGENORMALITAID")]
    public int? RangeNormalitaId { get; set; }

    [Index]
    [Alias("DRANGECONVALIDAID")]
    public int? RangeConvalidaId { get; set; }

    [Index]
    [Alias("DDELTACHECKSTORICOID")]
    public int? DeltaCheckStoricoId { get; set; }

    [Index]
    [Alias("DDELTACHECKROUTINEID")]
    public int? DeltaCheckRoutineId { get; set; }

    [Index]
    [Alias("DREGOLACONVALIDAID")]
    public int? RegolaConvalidaId { get; set; }

    [Alias("COMMENTO")]
    [StringLength(StringLengthAttribute.MaxText)]
    public string Commento { get; set; }

    [StringLength(250)]
    [Alias("RISULTATORAW")]
    public string RisultatoRaw { get; set; }

    [Index]
    [References(typeof(LRARisultato))]
    [Alias("ADELTARISULTATOSTORICODID")]
    public int? DeltaRisultatoStoricoId { get; set; }

    [Index]
    [References(typeof(LRARisultato))]
    [Alias("ADELTARISULTATOPRECEDENTEID")]
    public int? DeltaRisultatoPrecedenteId { get; set; }
}
--------------------------------------------------------------------------------
ID: 1095
ServiceStack Attribute Information ID: 74
Class Name: LRDProfiloAnalisi
Class Example:
[Alias("LRDPROFILOANALISI")]
[CompositeIndex("DPROFILOANALISIID", "DANALISIID", Unique = true, Name = "IDXPROFILO")]
public class LRDProfiloAnalisi : DBObject, IHasId<int>
{
    [Alias("IDDPROFILOANALISI")]
    [AutoIncrement]
    [PrimaryKey]
    public int Id { get; set; }

    [ApiMember(Description = "Analisi profilo a cui appartiene l'analisi")]
    [Alias("DPROFILOANALISIID")]
    [References(typeof(LRDProfiloAnalisi))]
    public int? ProfiloAnalisiId { get; set; } // dove NULL allora DANALISIID e' l'analisi profilo

    [ApiMember(Description = "Analisi dal dizionario")]
    [Alias("DANALISIID")]
    [References(typeof(LRDAnalisi))]
    public int AnalisiId { get; set; }
}
--------------------------------------------------------------------------------
ID: 1096
ServiceStack Attribute Information ID: 74
Class Name: LRDContenitore
Class Example:
[Alias("LRDCONTENITORI")]
public class LRDContenitore : DBObject, IHasId<int>
{
    private const int CColore = 7; // lunghezza colore HTML es. #AABBCC
    private const int CPrefisso = 5;
    [Alias("IDDCONTENITORE")]
    [AutoIncrement]
    [PrimaryKey]
    public int Id { get; set; }

    [Alias("CODICE")]
    [Required]
    [Index(Unique = true)]
    public string Codice { get; set; }

    [Required]
    [Alias("DESCRIZIONE")]
    public string Descrizione { get; set; }

    [Alias("DESCRIZIONEESTESA")]
    public string DescrizioneEstesa { get; set; }

    [Alias("ORDINE")]
    [Required]
    public int Ordine { get; set; }

    [Required]
    [Alias("TIPOCONTENITORE")]
    public int TipoContenitore { get; set; }

    [Alias("COLORE")]
    [StringLength(CColore)]
    public string Colore { get; set; }

    [Alias("PREFISSO")]
    [StringLength(CPrefisso)]
    public string Prefisso { get; set; }

    [Alias("PROGRESSIVOBARCODEMIN")]
    [DecimalLength(30, 0)]
    public decimal ProgressivoBarcodeMin { get; set; }

    [Alias("PROGRESSIVOBARCODEMAX")]
    [DecimalLength(30, 0)]
    [Default(int.MaxValue)]
    public decimal ProgressivoBarcodeMax { get; set; }

    [Alias("DMATERIALEID")]
    public int? MaterialeId { get; set; }

    [Alias("DETICHETTAID")]
    public int? EtichettaId { get; set; }

    [Required]
    [Alias("EMATOLOGIA")]
    public int Ematologia { get; set; }

    [Required]
    [Alias("URINE")]
    public int Urine { get; set; }
}
--------------------------------------------------------------------------------
ID: 1097
ServiceStack Attribute Information ID: 74
Class Name: LRDAnalisi
Class Example:
[Alias("LRDANALISI")]
public class LRDAnalisi : DBObject, IHasId<int>
{
    [Alias("IDDANALISI")]
    [AutoIncrement]
    [PrimaryKey]
    public int Id { get; set; }

    [Alias("CODICE")]
    [Required]
    [Index(Unique = true)]
    public string Codice { get; set; }

    [Alias("DESCRIZIONE")]
    [Required]
    public string Descrizione { get; set; }

    [Alias("DESCRIZIONEESTESA")]
    public string DescrizioneEstesa { get; set; }

    [Alias("CODICEREGIONALE")]
    public string CodiceRegionale { get; set; }

    [Alias("DCONTENITOREID")]
    public int ContenitoreId { get; set; }

    [Alias("ORDINE")]
    public int Ordine { get; set; }

    [Alias("DMETODOID")]
    public int? MetodoId { get; set; }

    [Alias("DPANNELLOANALISIID")]
    public int? PannelloAnalisiId { get; set; }

    [Alias("DCLASSEANALISIID")]
    public int? ClasseAnalisiId { get; set; }

    [Alias("QCREGISTRAZIONERISULTATI")]
    public int QCRegistrazioneRisultati { get; set; }

    [Alias("QCVERIFICA")]
    public int QCVerifica { get; set; }

    [Alias("QCOREINTERVALLOVERIFICA")]
    public int? QCOreIntervalloVerifica { get; set; }
}
--------------------------------------------------------------------------------
ID: 1098
ServiceStack Attribute Information ID: 74
Class Name: LookupTypeWithEnumAsIntAsPk
Class Example:
[Alias("LookupTypeWithEnumAsIntAsPk")]
public class LookupTypeWithEnumAsIntAsPk
{
    [PrimaryKey]
    public LookupTypeEnum EnumAsIntAsPkId { get; set; }
    public SomeEnum EnumValueThatWouldGoInAsString { get; set; }
    /// <summary>
    /// Allow this lookup type to be soft deleted in the future, but retaining referential integrity
    /// </summary>
    public bool IsDeleted { get; set; }
}
--------------------------------------------------------------------------------
ID: 1099
ServiceStack Attribute Information ID: 74
Class Name: TypeWithSimpleForeignKey
Class Example:
[Alias("TWSKF")]
public class TypeWithSimpleForeignKey
{
    [AutoIncrement]
    public int Id { get; set; }

    [References(typeof(ReferencedType))]
    public int RefId { get; set; }
}
--------------------------------------------------------------------------------
ID: 1100
ServiceStack Attribute Information ID: 74
Class Name: TypeWithOnDeleteCascade
Class Example:
[Alias("TWODC")]
public class TypeWithOnDeleteCascade
{
    [AutoIncrement]
    public int Id { get; set; }

    [ForeignKey(typeof(ReferencedType), OnDelete = "CASCADE", ForeignKeyName = "FK_DC")]
    public int? RefId { get; set; }
}
--------------------------------------------------------------------------------

